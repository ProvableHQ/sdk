{"version":3,"file":"284.bundle.js","mappings":"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","sources":["webpack://aleo-website/../../node_modules/comlink/dist/esm/comlink.mjs","webpack://aleo-website/../src/account.ts","webpack://aleo-website/../src/utils.ts","webpack://aleo-website/../src/network-client.ts","webpack://aleo-website/../src/function-key-provider.ts","webpack://aleo-website/../src/offline-key-provider.ts","webpack://aleo-website/../src/record-provider.ts","webpack://aleo-website/../src/managed-worker.ts","webpack://aleo-website/../src/program-manager.ts","webpack://aleo-website/../src/index.ts","webpack://aleo-website/wasm.js","webpack://aleo-website/../js/index.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    return createProxy(ep, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        ep.addEventListener(\"message\", function l(ev) {\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\n                return;\n            }\n            ep.removeEventListener(\"message\", l);\n            resolve(ev.data);\n        });\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","import {\n  Address,\n  PrivateKey,\n  Signature,\n  ViewKey,\n  PrivateKeyCiphertext,\n  RecordCiphertext,\n} from \"./index\";\n\ninterface AccountParam {\n  privateKey?: string;\n  seed?: Uint8Array;\n}\n\n/**\n * Key Management class. Enables the creation of a new Aleo Account, importation of an existing account from\n * an existing private key or seed, and message signing and verification functionality.\n *\n * An Aleo Account is generated from a randomly generated seed (number) from which an account private key, view key,\n * and a public account address are derived. The private key lies at the root of an Aleo account. It is a highly\n * sensitive secret and should be protected as it allows for creation of Aleo Program executions and arbitrary value\n * transfers. The View Key allows for decryption of a user's activity on the blockchain. The Address is the public\n * address to which other users of Aleo can send Aleo credits and other records to. This class should only be used\n * environments where the safety of the underlying key material can be assured.\n *\n * @example\n * // Create a new account\n * const myRandomAccount = new Account();\n *\n * // Create an account from a randomly generated seed\n * const seed = new Uint8Array([94, 91, 52, 251, 240, 230, 226, 35, 117, 253, 224, 210, 175, 13, 205, 120, 155, 214, 7, 169, 66, 62, 206, 50, 188, 40, 29, 122, 40, 250, 54, 18]);\n * const mySeededAccount = new Account({seed: seed});\n *\n * // Create an account from an existing private key\n * const myExistingAccount = new Account({privateKey: 'myExistingPrivateKey'})\n *\n * // Sign a message\n * const hello_world = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n * const signature = myRandomAccount.sign(hello_world)\n *\n * // Verify a signature\n * myRandomAccount.verify(hello_world, signature)\n */\nexport class Account {\n  _privateKey: PrivateKey;\n  _viewKey: ViewKey;\n  _address: Address;\n\n  constructor(params: AccountParam = {}) {\n    try {\n      this._privateKey = this.privateKeyFromParams(params);\n    } catch (e) {\n      console.error(\"Wrong parameter\", e);\n      throw new Error(\"Wrong Parameter\");\n    }\n    this._viewKey = ViewKey.from_private_key(this._privateKey);\n    this._address = Address.from_private_key(this._privateKey);\n  }\n\n  /**\n   * Attempts to create an account from a private key ciphertext\n   * @param {PrivateKeyCiphertext | string} ciphertext\n   * @param {string} password\n   * @returns {PrivateKey | Error}\n   *\n   * @example\n   * const ciphertext = PrivateKey.newEncrypted(\"password\");\n   * const account = Account.fromCiphertext(ciphertext, \"password\");\n   */\n  public static fromCiphertext(ciphertext: PrivateKeyCiphertext | string, password: string) {\n    try {\n      ciphertext = (typeof ciphertext === \"string\") ? PrivateKeyCiphertext.fromString(ciphertext) : ciphertext;\n      const _privateKey = PrivateKey.fromPrivateKeyCiphertext(ciphertext, password);\n      return new Account({ privateKey: _privateKey.to_string() });\n    } catch(e) {\n      throw new Error(\"Wrong password or invalid ciphertext\");\n    }\n  }\n\n  private privateKeyFromParams(params: AccountParam) {\n    if (params.seed) {\n      return PrivateKey.from_seed_unchecked(params.seed);\n    }\n    if (params.privateKey) {\n      return PrivateKey.from_string(params.privateKey);\n    }\n    return new PrivateKey();\n  }\n\n  privateKey() {\n    return this._privateKey;\n  }\n\n  viewKey() {\n    return this._viewKey;\n  }\n\n  address() {\n    return this._address;\n  }\n\n  toString() {\n    return this.address().to_string()\n  }\n\n  /**\n   * Encrypt the account's private key with a password\n   * @param {string} ciphertext\n   * @returns {PrivateKeyCiphertext}\n   *\n   * @example\n   * const account = new Account();\n   * const ciphertext = account.encryptAccount(\"password\");\n   */\n  encryptAccount(password: string) {\n    return this._privateKey.toCiphertext(password);\n  }\n\n  /**\n   * Decrypts a Record in ciphertext form into plaintext\n   * @param {string} ciphertext\n   * @returns {Record}\n   *\n   * @example\n   * const account = new Account();\n   * const record = account.decryptRecord(\"record1ciphertext\");\n   */\n  decryptRecord(ciphertext: string) {\n    return this._viewKey.decrypt(ciphertext);\n  }\n\n  /**\n   * Decrypts an array of Records in ciphertext form into plaintext\n   * @param {string[]} ciphertexts\n   * @returns {Record[]}\n   *\n   * @example\n   * const account = new Account();\n   * const record = account.decryptRecords([\"record1ciphertext\", \"record2ciphertext\"]);\n   */\n  decryptRecords(ciphertexts: string[]) {\n    return ciphertexts.map((ciphertext) => this._viewKey.decrypt(ciphertext));\n  }\n\n  /**\n   * Determines whether the account owns a ciphertext record\n   * @param {RecordCipherText | string} ciphertext\n   * @returns {boolean}\n   *\n   * @example\n   * // Create a connection to the Aleo network and an account\n   * const connection = new NodeConnection(\"vm.aleo.org/api\");\n   * const account = Account.fromCiphertext(\"ciphertext\", \"password\");\n   *\n   * // Get a record from the network\n   * const record = connection.getBlock(1234);\n   * const recordCipherText = record.transactions[0].execution.transitions[0].id;\n   *\n   * // Check if the account owns the record\n   * if account.ownsRecord(recordCipherText) {\n   *     // Then one can do something like:\n   *     // Decrypt the record and check if it's spent\n   *     // Store the record in a local database\n   *     // Etc.\n   * }\n   */\n  ownsRecordCiphertext(ciphertext: RecordCiphertext | string) {\n    if (typeof ciphertext === 'string') {\n      try {\n        const ciphertextObject = RecordCiphertext.fromString(ciphertext);\n        return ciphertextObject.isOwner(this._viewKey);\n      }\n      catch (e) {\n        return false;\n      }\n    }\n    else {\n      return ciphertext.isOwner(this._viewKey);\n    }\n  }\n\n  /**\n   * Signs a message with the account's private key.\n   * Returns a Signature.\n   *\n   * @param {Uint8Array} message\n   * @returns {Signature}\n   *\n   * @example\n   * const account = new Account();\n   * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n   * account.sign(message);\n   */\n  sign(message: Uint8Array) {\n    return this._privateKey.sign(message);\n  }\n\n  /**\n   * Verifies the Signature on a message.\n   *\n   * @param {Uint8Array} message\n   * @param {Signature} signature\n   * @returns {boolean}\n   *\n   * @example\n   * const account = new Account();\n   * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n   * const signature = account.sign(message);\n   * account.verify(message, signature);\n   */\n  verify(message: Uint8Array, signature: Signature) {\n    return this._address.verify(message, signature);\n  }\n\n}\n","export async function get(url: URL | string, options?: RequestInit) {\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not get URL \" + url);\n    }\n\n    return response;\n}\n\n\nexport async function post(url: URL | string, options: RequestInit) {\n    options.method = \"POST\";\n\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not post URL \" + url);\n    }\n\n    return response;\n}\n","import { get, post } from \"./utils\";\nimport {\n  Account,\n  Block,\n  RecordCiphertext,\n  Program,\n  RecordPlaintext,\n  PrivateKey,\n  Transaction,\n  TransactionModel,\n  logAndThrow\n} from \"./index\";\n\ntype ProgramImports = { [key: string]: string | Program };\n\ninterface AleoNetworkClientOptions {\n  headers?: { [key: string]: string };\n}\n\n/**\n * Client library that encapsulates REST calls to publicly exposed endpoints of Aleo nodes. The methods provided in this\n * allow users to query public information from the Aleo blockchain and submit transactions to the network.\n *\n * @param {string} host\n * @example\n * // Connection to a local node\n * const localNetworkClient = new AleoNetworkClient(\"http://localhost:3030\");\n *\n * // Connection to a public beacon node\n * const publicnetworkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n */\nclass AleoNetworkClient {\n  host: string;\n  headers: { [key: string]: string };\n  account: Account | undefined;\n\n  constructor(host: string, options?: AleoNetworkClientOptions) {\n    this.host = host + \"/testnet\";\n\n    if (options && options.headers) {\n      this.headers = options.headers;\n\n    } else {\n      this.headers = {\n        // This is replaced by the actual version by a Rollup plugin\n        \"X-Aleo-SDK-Version\": \"%%VERSION%%\",\n      };\n    }\n  }\n\n  /**\n   * Set an account to use in networkClient calls\n   *\n   * @param {Account} account\n   * @example\n   * const account = new Account();\n   * networkClient.setAccount(account);\n   */\n  setAccount(account: Account) {\n    this.account = account;\n  }\n\n  /**\n   * Return the Aleo account used in the networkClient\n   *\n   * @example\n   * const account = networkClient.getAccount();\n   */\n  getAccount(): Account | undefined {\n    return this.account;\n  }\n\n  /**\n   * Set a new host for the networkClient\n   *\n   * @param {string} host The address of a node hosting the Aleo API\n   * @param host\n   */\n  setHost(host: string) {\n    this.host = host + \"/testnet\";\n  }\n\n  async fetchData<Type>(\n      url = \"/\",\n  ): Promise<Type> {\n    try {\n    const response = await get(this.host + url, {\n      headers: this.headers\n    });\n\n    return await response.json();\n    } catch (error) {\n      throw new Error(\"Error fetching data.\");\n    }\n  }\n\n  /**\n   * Attempts to find unspent records in the Aleo blockchain for a specified private key\n   * @param {number} startHeight - The height at which to start searching for unspent records\n   * @param {number} endHeight - The height at which to stop searching for unspent records\n   * @param {string | PrivateKey} privateKey - The private key to use to find unspent records\n   * @param {number[]} amounts - The amounts (in microcredits) to search for (eg. [100, 200, 3000])\n   * @param {number} maxMicrocredits - The maximum number of microcredits to search for\n   * @param {string[]} nonces - The nonces of already found records to exclude from the search\n   *\n   * @example\n   * // Find all unspent records\n   * const privateKey = \"[PRIVATE_KEY]\";\n   * const records = networkClient.findUnspentRecords(0, undefined, privateKey);\n   *\n   * // Find specific amounts\n   * const startHeight = 500000;\n   * const amounts = [600000, 1000000];\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, amounts);\n   *\n   * // Find specific amounts with a maximum number of cumulative microcredits\n   * const maxMicrocredits = 100000;\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, undefined, maxMicrocredits);\n   */\n  async findUnspentRecords(\n      startHeight: number,\n      endHeight: number | undefined,\n      privateKey: string | PrivateKey | undefined,\n      amounts: number[] | undefined,\n      maxMicrocredits?: number | undefined,\n      nonces?: string[] | undefined,\n  ): Promise<Array<RecordPlaintext> | Error> {\n    nonces = nonces || [];\n    // Ensure start height is not negative\n    if (startHeight < 0) {\n      throw new Error(\"Start height must be greater than or equal to 0\");\n    }\n\n    // Initialize search parameters\n    const records = new Array<RecordPlaintext>();\n    let start;\n    let end;\n    let resolvedPrivateKey: PrivateKey;\n    let failures = 0;\n    let totalRecordValue = BigInt(0);\n    let latestHeight: number;\n\n    // Ensure a private key is present to find owned records\n    if (typeof privateKey === \"undefined\") {\n      if (typeof this.account === \"undefined\") {\n        throw new Error(\"Private key must be specified in an argument to findOwnedRecords or set in the AleoNetworkClient\");\n      } else {\n        resolvedPrivateKey = this.account._privateKey;\n      }\n    } else {\n      try {\n        resolvedPrivateKey = privateKey instanceof PrivateKey ? privateKey : PrivateKey.from_string(privateKey);\n      } catch (error) {\n        throw new Error(\"Error parsing private key provided.\");\n      }\n    }\n    const viewKey = resolvedPrivateKey.to_view_key();\n\n    // Get the latest height to ensure the range being searched is valid\n    try {\n      const blockHeight = await this.getLatestHeight();\n      if (typeof blockHeight === \"number\") {\n        latestHeight = blockHeight;\n      } else {\n        throw new Error(\"Error fetching latest block height.\");\n      }\n    } catch (error) {\n      throw new Error(\"Error fetching latest block height.\");\n    }\n\n    // If no end height is specified or is greater than the latest height, set the end height to the latest height\n    if (typeof endHeight === \"number\" && endHeight <= latestHeight) {\n      end = endHeight\n    } else {\n      end = latestHeight;\n    }\n\n    // If the starting is greater than the ending height, return an error\n    if (startHeight > end) {\n      throw new Error(\"Start height must be less than or equal to end height.\");\n    }\n\n    // Iterate through blocks in reverse order in chunks of 50\n    while (end > startHeight) {\n      start = end - 50;\n      if (start < startHeight) {\n        start = startHeight;\n      }\n      try {\n        // Get 50 blocks (or the difference between the start and end if less than 50)\n        const blocks = await this.getBlockRange(start, end);\n        end = start;\n        if (!(blocks instanceof Error)) {\n          // Iterate through blocks to find unspent records\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const transactions = block.transactions;\n            if (!(typeof transactions === \"undefined\")) {\n              for (let j = 0; j < transactions.length; j++) {\n                const confirmedTransaction = transactions[j];\n                // Search for unspent records in execute transactions of credits.aleo\n                if (confirmedTransaction.type == \"execute\") {\n                  const transaction = confirmedTransaction.transaction;\n                  if (transaction.execution && !(typeof transaction.execution.transitions == \"undefined\")) {\n                    for (let k = 0; k < transaction.execution.transitions.length; k++) {\n                      const transition = transaction.execution.transitions[k];\n                      // Only search for unspent records in credits.aleo (for now)\n                      if (transition.program !== \"credits.aleo\") {\n                        continue;\n                      }\n                      if (!(typeof transition.outputs == \"undefined\")) {\n                        for (let l = 0; l < transition.outputs.length; l++) {\n                          const output = transition.outputs[l];\n                          if (output.type === \"record\") {\n                            try {\n                              // Create a wasm record ciphertext object from the found output\n                              const record = RecordCiphertext.fromString(output.value);\n                              // Determine if the record is owned by the specified view key\n                              if (record.isOwner(viewKey)) {\n                                // Decrypt the record and get the serial number\n                                const recordPlaintext = record.decrypt(viewKey);\n\n                                // If the record has already been found, skip it\n                                const nonce = recordPlaintext.nonce();\n                                if (nonces.includes(nonce)) {\n                                  continue;\n                                }\n\n                                // Otherwise record the nonce that has been found\n                                const serialNumber = recordPlaintext.serialNumberString(resolvedPrivateKey, \"credits.aleo\", \"credits\");\n                                // Attempt to see if the serial number is spent\n                                try {\n                                  await this.getTransitionId(serialNumber);\n                                } catch (error) {\n                                  // If it's not found, add it to the list of unspent records\n                                  if (!amounts) {\n                                    records.push(recordPlaintext);\n                                    // If the user specified a maximum number of microcredits, check if the search has found enough\n                                    if (typeof maxMicrocredits === \"number\") {\n                                      totalRecordValue += recordPlaintext.microcredits();\n                                      // Exit if the search has found the amount specified\n                                      if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                        return records;\n                                      }\n                                    }\n                                  }\n                                  // If the user specified a list of amounts, check if the search has found them\n                                  if (!(typeof amounts === \"undefined\") && amounts.length > 0) {\n                                    let amounts_found = 0;\n                                    if (recordPlaintext.microcredits() > amounts[amounts_found]) {\n                                        amounts_found += 1;\n                                        records.push(recordPlaintext);\n                                        // If the user specified a maximum number of microcredits, check if the search has found enough\n                                        if (typeof maxMicrocredits === \"number\") {\n                                          totalRecordValue += recordPlaintext.microcredits();\n                                          // Exit if the search has found the amount specified\n                                          if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                            return records;\n                                          }\n                                        }\n                                        if (records.length >= amounts.length) {\n                                          return records;\n                                        }\n                                    }\n                                  }\n                                }\n                              }\n                            } catch (error) {\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // If there is an error fetching blocks, log it and keep searching\n        console.warn(\"Error fetching blocks in range: \" + start.toString() + \"-\" + end.toString());\n        console.warn(\"Error: \", error);\n        failures += 1;\n        if (failures > 10) {\n          console.warn(\"10 failures fetching records reached. Returning records fetched so far\");\n          return records;\n        }\n      }\n    }\n    return records;\n  }\n\n  /**\n   * Returns the contents of the block at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const block = networkClient.getBlock(1234);\n   */\n  async getBlock(height: number): Promise<Block | Error> {\n    try {\n      const block = await this.fetchData<Block>(\"/block/\" + height);\n      return block;\n    } catch (error) {\n      throw new Error(\"Error fetching block.\");\n    }\n  }\n\n  /**\n   * Returns a range of blocks between the specified block heights\n   *\n   * @param {number} start\n   * @param {number} end\n   * @example\n   * const blockRange = networkClient.getBlockRange(2050, 2100);\n   */\n  async getBlockRange(start: number, end: number): Promise<Array<Block> | Error> {\n    try {\n      return await this.fetchData<Array<Block>>(\"/blocks?start=\" + start + \"&end=\" + end);\n    } catch (error) {\n      const errorMessage = \"Error fetching blocks between \" + start + \" and \" + end + \".\"\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Returns the deployment transaction id associated with the specified program\n   *\n   * @param {Program | string} program\n   * @returns {TransactionModel | Error}\n   */\n  async getDeploymentTransactionIDForProgram(program: Program | string): Promise<string | Error> {\n    if (program instanceof Program) {\n      program = program.toString();\n    }\n    try {\n      const id = await this.fetchData<string>(\"/find/transactionID/deployment/\" + program);\n      return id.replace(\"\\\"\", \"\")\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the deployment transaction associated with a specified program\n   *\n   * @param {Program | string} program\n   * @returns {TransactionModel | Error}\n   */\n  async getDeploymentTransactionForProgram(program: Program | string): Promise<TransactionModel | Error> {\n    try {\n      const transaction_id = <string>await this.getDeploymentTransactionIDForProgram(program);\n      return <TransactionModel>await this.getTransaction(transaction_id);\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the contents of the latest block\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestBlock();\n   */\n  async getLatestBlock(): Promise<Block | Error> {\n    try {\n      return await this.fetchData<Block>(\"/latest/block\") as Block;\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest committee\n   *\n   * @returns {Promise<object>} A javascript object containing the latest committee\n   */\n  async getLatestCommittee(): Promise<object | Error> {\n    try {\n      return await this.fetchData<object>(\"/committee/latest\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest block height\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestHeight();\n   */\n  async getLatestHeight(): Promise<number | Error> {\n    try {\n      return await this.fetchData<number>(\"/latest/height\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest height.\");\n    }\n  }\n\n  /**\n   * Returns the source code of a program given a program ID\n   *\n   * @param {string} programId The program ID of a program deployed to the Aleo Network\n   * @return {Promise<string>} Source code of the program\n   *\n   * @example\n   * const program = networkClient.getProgram(\"hello_hello.aleo\");\n   * const expectedSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * assert.equal(program, expectedSource);\n   */\n  async getProgram(programId: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId)\n    } catch (error) {\n      throw new Error(\"Error fetching program\");\n    }\n  }\n\n  /**\n   * Returns a program object from a program ID or program source code\n   *\n   * @param {string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @return {Promise<Program | Error>} Source code of the program\n   *\n   * @example\n   * const programID = \"hello_hello.aleo\";\n   * const programSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   *\n   * // Get program object from program ID or program source code\n   * const programObjectFromID = await networkClient.getProgramObject(programID);\n   * const programObjectFromSource = await networkClient.getProgramObject(programSource);\n   *\n   * // Both program objects should be equal\n   * assert.equal(programObjectFromID.to_string(), programObjectFromSource.to_string());\n   */\n  async getProgramObject(inputProgram: string): Promise<Program | Error> {\n    try {\n      return Program.fromString(inputProgram);\n    } catch (error) {\n      try {\n        return Program.fromString(<string>(await this.getProgram(inputProgram)));\n      } catch (error) {\n        throw new Error(`${inputProgram} is neither a program name or a valid program`);\n      }\n    }\n  }\n\n  /**\n   *  Returns an object containing the source code of a program and the source code of all programs it imports\n   *\n   * @param {Program | string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @returns {Promise<ProgramImports>} Object of the form { \"program_id\": \"program_source\", .. } containing program id & source code for all program imports\n   *\n   * @example\n   * const double_test_source = \"import multiply_test.aleo;\\n\\nprogram double_test.aleo;\\n\\nfunction double_it:\\n    input r0 as u32.private;\\n    call multiply_test.aleo/multiply 2u32 r0 into r1;\\n    output r1 as u32.private;\\n\"\n   * const double_test = Program.fromString(double_test_source);\n   * const expectedImports = {\n   *     \"multiply_test.aleo\": \"program multiply_test.aleo;\\n\\nfunction multiply:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    mul r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * }\n   *\n   * // Imports can be fetched using the program ID, source code, or program object\n   * let programImports = await networkClient.getProgramImports(\"double_test.aleo\");\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program source code\n   * programImports = await networkClient.getProgramImports(double_test_source);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program object\n   * programImports = await networkClient.getProgramImports(double_test);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   */\n  async getProgramImports(inputProgram: Program | string): Promise<ProgramImports | Error> {\n    try {\n      const imports: ProgramImports = {};\n\n      // Get the program object or fail if the program is not valid or does not exist\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n\n      // Get the list of programs that the program imports\n      const importList = program.getImports();\n\n      // Recursively get any imports that the imported programs have in a depth first search order\n      for (let i = 0; i < importList.length; i++) {\n        const import_id = importList[i];\n        if (!imports.hasOwnProperty(import_id)) {\n          const programSource = <string>await this.getProgram(import_id);\n          const nestedImports = <ProgramImports>await this.getProgramImports(import_id);\n          for (const key in nestedImports) {\n            if (!imports.hasOwnProperty(key)) {\n              imports[key] = nestedImports[key];\n            }\n          }\n          imports[import_id] = programSource;\n        }\n      }\n      return imports;\n    } catch (error) {\n      throw logAndThrow(\"Error fetching program imports: \" + error)\n    }\n  }\n\n  /**\n   * Get a list of the program names that a program imports\n   *\n   * @param {Program | string} inputProgram - The program id or program source code to get the imports of\n   * @returns {string[]} - The list of program names that the program imports\n   *\n   * @example\n   * const programImportsNames = networkClient.getProgramImports(\"double_test.aleo\");\n   * const expectedImportsNames = [\"multiply_test.aleo\"];\n   * assert.deepStrictEqual(programImportsNames, expectedImportsNames);\n   */\n  async getProgramImportNames(inputProgram: Program | string): Promise<string[] | Error> {\n    try {\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n      return program.getImports();\n    } catch (error) {\n      throw new Error(\"Error fetching program imports with error: \" + error);\n    }\n  }\n\n  /**\n   * Returns the names of the mappings of a program\n   *\n   * @param {string} programId - The program ID to get the mappings of (e.g. \"credits.aleo\")\n   * @example\n   * const mappings = networkClient.getProgramMappingNames(\"credits.aleo\");\n   * const expectedMappings = [\"account\"];\n   * assert.deepStrictEqual(mappings, expectedMappings);\n   */\n  async getProgramMappingNames(programId: string): Promise<Array<string> | Error> {\n    try {\n      return await this.fetchData<Array<string>>(\"/program/\" + programId + \"/mappings\")\n    } catch (error) {\n      throw new Error(\"Error fetching program mappings - ensure the program exists on chain before trying again\");\n    }\n  }\n\n  /**\n   * Returns the value of a program's mapping for a specific key\n   *\n   * @param {string} programId - The program ID to get the mapping value of (e.g. \"credits.aleo\")\n   * @param {string} mappingName - The name of the mapping to get the value of (e.g. \"account\")\n   * @param {string} key - The key of the mapping to get the value of (e.g. \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\")\n   * @return {Promise<string>} String representation of the value of the mapping\n   *\n   * @example\n   * // Get public balance of an account\n   * const mappingValue = networkClient.getMappingValue(\"credits.aleo\", \"account\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\");\n   * const expectedValue = \"0u64\";\n   * assert.equal(mappingValue, expectedValue);\n   */\n  async getProgramMappingValue(programId: string, mappingName: string, key: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId + \"/mapping/\" + mappingName + \"/\" + key)\n    } catch (error) {\n      throw new Error(\"Error fetching mapping value - ensure the mapping exists and the key is correct\");\n    }\n  }\n\n  /**\n   * Returns the latest state/merkle root of the Aleo blockchain\n   *\n   * @example\n   * const stateRoot = networkClient.getStateRoot();\n   */\n  async getStateRoot(): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/latest/stateRoot\");\n    } catch (error) {\n      throw new Error(\"Error fetching Aleo state root\");\n    }\n  }\n\n  /**\n   * Returns a transaction by its unique identifier\n   *\n   * @param {string} id\n   * @example\n   * const transaction = networkClient.getTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n   */\n  async getTransaction(id: string): Promise<TransactionModel | Error> {\n    try {\n    return await this.fetchData<TransactionModel>(\"/transaction/\" + id);\n    } catch (error) {\n      throw new Error(\"Error fetching transaction.\");\n    }\n  }\n\n  /**\n   * Returns the transactions present at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const transactions = networkClient.getTransactions(654);\n   */\n  async getTransactions(height: number): Promise<Array<TransactionModel> | Error> {\n    try {\n    return await this.fetchData<Array<TransactionModel>>(\"/block/\" + height.toString() + \"/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions.\");\n    }\n  }\n\n  /**\n   * Returns the transactions in the memory pool.\n   *\n   * @example\n   * const transactions = networkClient.getTransactionsInMempool();\n   */\n  async getTransactionsInMempool(): Promise<Array<TransactionModel> | Error> {\n    try {\n      return await this.fetchData<Array<TransactionModel>>(\"/memoryPool/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions from mempool.\");\n    }\n  }\n\n  /**\n   * Returns the transition ID of the transition corresponding to the ID of the input or output.\n   * @param {string} inputOrOutputID - ID of the input or output.\n   *\n   * @example\n   * const transitionId = networkClient.getTransitionId(\"2429232855236830926144356377868449890830704336664550203176918782554219952323field\");\n   */\n  async getTransitionId(inputOrOutputID: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/find/transitionID/\" + inputOrOutputID);\n    } catch (error) {\n      throw new Error(\"Error fetching transition ID.\");\n    }\n  }\n\n  /**\n   * Submit an execute or deployment transaction to the Aleo network\n   *\n   * @param {Transaction | string} transaction  - The transaction to submit to the network\n   * @returns {string | Error} - The transaction id of the submitted transaction or the resulting error\n   */\n  async submitTransaction(transaction: Transaction | string): Promise<string | Error> {\n    const transaction_string = transaction instanceof Transaction ? transaction.toString() : transaction;\n    try {\n      const response = await post(this.host + \"/transaction/broadcast\", {\n        body: transaction_string,\n        headers: Object.assign({}, this.headers, {\n          \"Content-Type\": \"application/json\",\n        }),\n      });\n\n      try {\n        return await response.json();\n\n      } catch (error) {\n        throw new Error(`Error posting transaction. Aleo network response: ${(error as Error).message}`);\n      }\n    } catch (error) {\n      throw new Error(`Error posting transaction: No response received: ${(error as Error).message}`);\n    }\n  }\n}\n\nexport { AleoNetworkClient, AleoNetworkClientOptions, ProgramImports }\n","import {\n    ProvingKey,\n    VerifyingKey,\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PUBLIC_TRANSFER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    PUBLIC_TRANSFER_AS_SIGNER\n} from \"./index\";\nimport { get } from \"./utils\";\n\ntype FunctionKeyPair = [ProvingKey, VerifyingKey];\ntype CachedKeyPair = [Uint8Array, Uint8Array];\ntype AleoKeyProviderInitParams = {\n    proverUri?: string;\n    verifierUri?: string;\n    cacheKey?: string;\n};\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface KeySearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * AleoKeyProviderParams search parameter for the AleoKeyProvider. It allows for the specification of a proverUri and\n * verifierUri to fetch keys via HTTP from a remote resource as well as a unique cacheKey to store the keys in memory.\n */\nclass AleoKeyProviderParams implements KeySearchParams {\n    proverUri: string | undefined;\n    verifierUri: string | undefined;\n    cacheKey: string | undefined;\n\n    /**\n     * Create a new AleoKeyProviderParams object which implements the KeySearchParams interface. Users can optionally\n     * specify a url for the proverUri & verifierUri to fetch keys via HTTP from a remote resource as well as a unique\n     * cacheKey to store the keys in memory for future use. If no proverUri or verifierUri is specified, a cachekey must\n     * be provided.\n     *\n     * @param { AleoKeyProviderInitParams } params - Optional search parameters\n     */\n    constructor(params: {proverUri?: string, verifierUri?: string, cacheKey?: string}) {\n        this.proverUri = params.proverUri;\n        this.verifierUri = params.verifierUri;\n        this.cacheKey = params.cacheKey;\n    }\n}\n\n/**\n * KeyProvider interface. Enables the retrieval of public proving and verifying keys for Aleo Programs.\n */\ninterface FunctionKeyProvider {\n    /**\n     * Get bond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the bond_public function\n     */\n    bondPublicKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get bond_validator function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the bond_validator function\n     */\n    bondValidatorKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void;\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the unbond_public function\n     */\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a search object which implements the KeySearchParams interface\n     * class IndexDbSearch implements KeySearchParams {\n     *     db: string\n     *     keyId: string\n     *     constructor(params: {db: string, keyId: string}) {\n     *         this.db = params.db;\n     *         this.keyId = params.keyId;\n     *     }\n     * }\n     *\n     * // Create a new object which implements the KeyProvider interface\n     * class IndexDbKeyProvider implements FunctionKeyProvider {\n     *     async functionKeys(params: KeySearchParams): Promise<FunctionKeyPair | Error> {\n     *         return new Promise((resolve, reject) => {\n     *             const request = indexedDB.open(params.db, 1);\n     *\n     *             request.onupgradeneeded = function(e) {\n     *                 const db = e.target.result;\n     *                 if (!db.objectStoreNames.contains('keys')) {\n     *                     db.createObjectStore('keys', { keyPath: 'id' });\n     *                 }\n     *             };\n     *\n     *             request.onsuccess = function(e) {\n     *                 const db = e.target.result;\n     *                 const transaction = db.transaction([\"keys\"], \"readonly\");\n     *                 const store = transaction.objectStore(\"keys\");\n     *                 const request = store.get(params.keyId);\n     *                 request.onsuccess = function(e) {\n     *                     if (request.result) {\n     *                         resolve(request.result as FunctionKeyPair);\n     *                     } else {\n     *                         reject(new Error(\"Key not found\"));\n     *                     }\n     *                 };\n     *                 request.onerror = function(e) { reject(new Error(\"Error fetching key\")); };\n     *             };\n     *\n     *             request.onerror = function(e) { reject(new Error(\"Error opening database\")); };\n     *         });\n     *     }\n     *\n     *     // implement the other methods...\n     * }\n     *\n     *\n     * const keyProvider = new AleoKeyProvider();\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const searchParams = new IndexDbSearch({db: \"keys\", keyId: \"credits.aleo:transferPrivate\"});\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(searchParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_private function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get join function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get split function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    unBondPublicKeys(): Promise<FunctionKeyPair | Error>;\n\n}\n\n\n/**\n * AleoKeyProvider class. Implements the KeyProvider interface. Enables the retrieval of Aleo program proving and\n * verifying keys for the credits.aleo program over http from official Aleo sources and storing and retrieving function\n * keys from a local memory cache.\n */\nclass AleoKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n    cacheOption: boolean;\n    keyUris: string;\n\n    async fetchBytes(\n        url = \"/\",\n    ): Promise<Uint8Array> {\n        try {\n        const response = await get(url);\n        const data = await response.arrayBuffer();\n        return new Uint8Array(data);\n        } catch (error) {\n            throw new Error(\"Error fetching data.\" + error);\n        }\n    }\n\n    constructor() {\n        this.keyUris = KEY_STORE;\n        this.cache = new Map<string, CachedKeyPair>();\n        this.cacheOption = false;\n    }\n\n    /**\n     * Use local memory to store keys\n     *\n     * @param {boolean} useCache whether to store keys in local memory\n     */\n    useCache(useCache: boolean) {\n        this.cacheOption = useCache;\n    }\n\n    /**\n     * Clear the key cache\n     */\n    clearCache() {\n        this.cache.clear();\n    }\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair) {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    }\n\n    /**\n     * Determine if a keyId exists in the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair\n     * @returns {boolean} true if the keyId exists in the cache, false otherwise\n     */\n    containsKeys(keyId: string): boolean {\n        return this.cache.has(keyId)\n    }\n\n    /**\n     * Delete a set of keys from the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair to delete from memory\n     * @returns {boolean} true if the keyId exists in the cache and was deleted, false if the key did not exist\n     */\n    deleteKeys(keyId: string): boolean {\n        return this.cache.delete(keyId)\n    }\n\n    /**\n     * Get a set of keys from the cache\n     * @param keyId keyId of a proving and verifying key pair\n     *\n     * @returns {FunctionKeyPair | Error} Proving and verifying keys for the specified program\n     */\n    getKeys(keyId: string): FunctionKeyPair | Error {\n        console.debug(`Checking if key exists in cache. KeyId: ${keyId}`)\n        if (this.cache.has(keyId)) {\n            const [provingKeyBytes, verifyingKeyBytes] = <CachedKeyPair>this.cache.get(keyId);\n            return [ProvingKey.fromBytes(provingKeyBytes), VerifyingKey.fromBytes(verifyingKeyBytes)];\n        } else {\n            return new Error(\"Key not found in cache.\");\n        }\n    }\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams} params parameters for the key search in form of: {proverUri: string, verifierUri: string, cacheKey: string}\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually using the key provider\n     * const keySearchParams = { \"cacheKey\": \"myProgram:myFunction\" };\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(keySearchParams);\n     */\n    async functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error> {\n        if (params) {\n            let proverUrl;\n            let verifierUrl;\n            let cacheKey;\n            if (\"proverUri\" in params && typeof params[\"proverUri\"] == \"string\") {\n                proverUrl = params[\"proverUri\"];\n            }\n\n            if (\"verifierUri\" in params && typeof params[\"verifierUri\"] == \"string\") {\n                verifierUrl = params[\"verifierUri\"];\n            }\n\n            if (\"cacheKey\" in params && typeof params[\"cacheKey\"] == \"string\") {\n                cacheKey = params[\"cacheKey\"];\n            }\n\n            if (proverUrl && verifierUrl) {\n                return await this.fetchKeys(proverUrl, verifierUrl, cacheKey);\n            }\n\n            if (cacheKey) {\n                return this.getKeys(cacheKey);\n            }\n        }\n        throw Error(\"Invalid parameters provided, must provide either a cacheKey and/or a proverUrl and a verifierUrl\");\n    }\n\n    /**\n     * Returns the proving and verifying keys for a specified program from a specified url.\n     *\n     * @param {string} verifierUrl Url of the proving key\n     * @param {string} proverUrl Url the verifying key\n     * @param {string} cacheKey Key to store the keys in the cache\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new AleoKeyProvider object\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.fetchKeys(\n     *     CREDITS_PROGRAM_KEYS.transfer_private.prover,\n     *     CREDITS_PROGRAM_KEYS.transfer_private.verifier,\n     * );\n     */\n    async fetchKeys(proverUrl: string, verifierUrl: string, cacheKey?: string): Promise<FunctionKeyPair | Error> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return [ProvingKey.fromBytes(value[0]), VerifyingKey.fromBytes(value[1])];\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                    console.debug(\"Fetching verifying keys \" + verifierUrl);\n                    const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                    this.cache.set(cacheKey, [provingKey.toBytes(), verifyingKey.toBytes()]);\n                    return [provingKey, verifyingKey];\n                }\n            }\n            else {\n                // If cache is disabled, fetch the keys and return them\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                return [provingKey, verifyingKey];\n            }\n        } catch (error) {\n            throw new Error(`Error: ${error} fetching fee proving and verifying keys from ${proverUrl} and ${verifierUrl}.`);\n        }\n    }\n\n    bondPublicKeys(): Promise<FunctionKeyPair | Error> {\n        return this.fetchKeys(CREDITS_PROGRAM_KEYS.bond_public.prover, CREDITS_PROGRAM_KEYS.bond_public.verifier, CREDITS_PROGRAM_KEYS.bond_public.locator)\n    }\n\n    bondValidatorKeys(): Promise<FunctionKeyPair | Error> {\n        return this.fetchKeys(CREDITS_PROGRAM_KEYS.bond_validator.prover, CREDITS_PROGRAM_KEYS.bond_validator.verifier, CREDITS_PROGRAM_KEYS.bond_validator.locator)\n    }\n\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair | Error> {\n        return this.fetchKeys(CREDITS_PROGRAM_KEYS.claim_unbond_public.prover, CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier, CREDITS_PROGRAM_KEYS.claim_unbond_public.locator)\n    }\n\n    /**\n     * Returns the proving and verifying keys for the transfer functions in the credits.aleo program\n     * @param {string} visibility Visibility of the transfer function\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the transfer functions\n     *\n     * @example\n     * // Create a new AleoKeyProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    async transferKeys(visibility: string): Promise<FunctionKeyPair | Error> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private.prover, CREDITS_PROGRAM_KEYS.transfer_private.verifier, CREDITS_PROGRAM_KEYS.transfer_private.locator);\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private_to_public.prover, CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier, CREDITS_PROGRAM_KEYS.transfer_private_to_public.locator);\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public.prover, CREDITS_PROGRAM_KEYS.transfer_public.verifier, CREDITS_PROGRAM_KEYS.transfer_public.locator);\n        } else if (PUBLIC_TRANSFER_AS_SIGNER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public_as_signer.prover, CREDITS_PROGRAM_KEYS.transfer_public_as_signer.verifier, CREDITS_PROGRAM_KEYS.transfer_public_as_signer.locator);\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public_to_private.prover, CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier, CREDITS_PROGRAM_KEYS.transfer_public_to_private.locator);\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the join function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    async joinKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.join.prover, CREDITS_PROGRAM_KEYS.join.verifier, CREDITS_PROGRAM_KEYS.join.locator);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the split function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the split function\n     * */\n    async splitKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.split.prover, CREDITS_PROGRAM_KEYS.split.verifier, CREDITS_PROGRAM_KEYS.split.locator);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_private function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePrivateKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_private.prover, CREDITS_PROGRAM_KEYS.fee_private.verifier, CREDITS_PROGRAM_KEYS.fee_private.locator);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_public function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePublicKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_public.prover, CREDITS_PROGRAM_KEYS.fee_public.verifier, CREDITS_PROGRAM_KEYS.fee_public.locator);\n    }\n\n    /**\n     * Gets a verifying key. If the verifying key is for a credits.aleo function, get it from the wasm cache otherwise\n     *\n     * @returns {Promise<VerifyingKey | Error>} Verifying key for the function\n     */\n    // attempt to fetch it from the network\n    async getVerifyingKey(verifierUri: string): Promise<VerifyingKey | Error> {\n        switch (verifierUri) {\n            case CREDITS_PROGRAM_KEYS.bond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.bond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.bond_validator.verifier:\n                return CREDITS_PROGRAM_KEYS.bond_validator.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.claim_unbond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_private.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_public.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.inclusion.verifier:\n                return CREDITS_PROGRAM_KEYS.inclusion.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.join.verifier:\n                return CREDITS_PROGRAM_KEYS.join.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.set_validator_state.verifier:\n                return CREDITS_PROGRAM_KEYS.set_validator_state.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.split.verifier:\n                return CREDITS_PROGRAM_KEYS.split.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public_as_signer.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public_as_signer.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.unbond_public.verifyingKey();\n            default:\n                try {\n                    /// Try to fetch the verifying key from the network as a string\n                    const response = await get(verifierUri);\n                    const text = await response.text();\n                    return <VerifyingKey>VerifyingKey.fromString(text);\n                } catch (e) {\n                    /// If that fails, try to fetch the verifying key from the network as bytes\n                    try {\n                    return <VerifyingKey>VerifyingKey.fromBytes(await this.fetchBytes(verifierUri));\n                    } catch (inner) {\n                        return new Error(\"Invalid verifying key. Error: \" + inner);\n                    }\n                }\n        }\n    }\n\n    unBondPublicKeys(): Promise<FunctionKeyPair | Error> {\n        return this.fetchKeys(CREDITS_PROGRAM_KEYS.unbond_public.prover, CREDITS_PROGRAM_KEYS.unbond_public.verifier, CREDITS_PROGRAM_KEYS.unbond_public.locator);\n    }\n}\n\nexport {AleoKeyProvider, AleoKeyProviderParams, AleoKeyProviderInitParams, CachedKeyPair, FunctionKeyPair, FunctionKeyProvider, KeySearchParams}\n","import {\n    FunctionKeyProvider,\n    KeySearchParams,\n    FunctionKeyPair,\n    CachedKeyPair,\n    ProvingKey,\n    VerifyingKey,\n    CREDITS_PROGRAM_KEYS,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PUBLIC_TRANSFER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    PUBLIC_TRANSFER_AS_SIGNER\n} from \"./index\";\n\n/**\n * Search parameters for the offline key provider. This class implements the KeySearchParams interface and includes\n * a convenience method for creating a new instance of this class for each function of the credits.aleo program.\n *\n * @example\n * // If storing a key for a custom program function\n * offlineSearchParams = new OfflineSearchParams(\"myprogram.aleo/myfunction\");\n *\n * // If storing a key for a credits.aleo program function\n * bondPublicKeyParams = OfflineSearchParams.bondPublicKeyParams();\n */\nclass OfflineSearchParams implements KeySearchParams {\n    cacheKey: string | undefined;\n    verifyCreditsKeys: boolean | undefined;\n\n    /**\n     * Create a new OfflineSearchParams instance.\n     *\n     * @param {string} cacheKey - Key used to store the local function proving & verifying keys. This should be stored\n     * under the naming convention \"programName/functionName\" (i.e. \"myprogram.aleo/myfunction\")\n     * @param {boolean} verifyCreditsKeys - Whether to verify the keys against the credits.aleo program,\n     * defaults to false, but should be set to true if using keys from the credits.aleo program\n     */\n    constructor(cacheKey: string, verifyCreditsKeys = false) {\n        this.cacheKey = cacheKey;\n        this.verifyCreditsKeys = verifyCreditsKeys;\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the bond_public function of the credits.aleo program.\n     */\n    static bondPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.bond_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the bond_validator function of the credits.aleo program.\n     */\n    static bondValidatorKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.bond_validator.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the claim_unbond_public function of the\n     */\n    static claimUnbondPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.claim_unbond_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the fee_private function of the credits.aleo program.\n     */\n    static feePrivateKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.fee_private.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the fee_public function of the credits.aleo program.\n     */\n    static feePublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.fee_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the inclusion prover function.\n     */\n    static inclusionKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.inclusion.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the join function of the credits.aleo program.\n     */\n    static joinKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.join.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the set_validator_state function of the credits.aleo program.\n     */\n    static setValidatorStateKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.set_validator_state.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the split function of the credits.aleo program.\n     */\n    static splitKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.split.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_private function of the credits.aleo program.\n     */\n    static transferPrivateKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_private.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_private_to_public function of the credits.aleo program.\n     */\n    static transferPrivateToPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_private_to_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_public function of the credits.aleo program.\n     */\n    static transferPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_public_as_signer function of the credits.aleo program.\n     */\n    static transferPublicAsSignerKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_public_as_signer.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_public_to_private function of the credits.aleo program.\n     */\n    static transferPublicToPrivateKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_public_to_private.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the unbond_public function of the credits.aleo program.\n     */\n    static unbondPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.unbond_public.locator, true);\n    }\n}\n\n/**\n * A key provider meant for building transactions offline on devices such as hardware wallets. This key provider is not\n * able to contact the internet for key material and instead relies on the user to insert Aleo function proving &\n * verifying keys from local storage prior to usage.\n *\n * @example\n * // Create an offline program manager\n * const programManager = new ProgramManager();\n *\n * // Create a temporary account for the execution of the program\n * const account = new Account();\n * programManager.setAccount(account);\n *\n * // Create the proving keys from the key bytes on the offline machine\n * console.log(\"Creating proving keys from local key files\");\n * const program = \"program hello_hello.aleo; function hello: input r0 as u32.public; input r1 as u32.private; add r0 r1 into r2; output r2 as u32.private;\";\n * const myFunctionProver = await getLocalKey(\"/path/to/my/function/hello_hello.prover\");\n * const myFunctionVerifier = await getLocalKey(\"/path/to/my/function/hello_hello.verifier\");\n * const feePublicProvingKeyBytes = await getLocalKey(\"/path/to/credits.aleo/feePublic.prover\");\n *\n * myFunctionProvingKey = ProvingKey.fromBytes(myFunctionProver);\n * myFunctionVerifyingKey = VerifyingKey.fromBytes(myFunctionVerifier);\n * const feePublicProvingKey = ProvingKey.fromBytes(feePublicKeyBytes);\n *\n * // Create an offline key provider\n * console.log(\"Creating offline key provider\");\n * const offlineKeyProvider = new OfflineKeyProvider();\n *\n * // Cache the keys\n * // Cache the proving and verifying keys for the custom hello function\n * OfflineKeyProvider.cacheKeys(\"hello_hello.aleo/hello\", myFunctionProvingKey, myFunctionVerifyingKey);\n *\n * // Cache the proving key for the fee_public function (the verifying key is automatically cached)\n * OfflineKeyProvider.insertFeePublicKey(feePublicProvingKey);\n *\n * // Create an offline query using the latest state root in order to create the inclusion proof\n * const offlineQuery = new OfflineQuery(\"latestStateRoot\");\n *\n * // Insert the key provider into the program manager\n * programManager.setKeyProvider(offlineKeyProvider);\n *\n * // Create the offline search params\n * const offlineSearchParams = new OfflineSearchParams(\"hello_hello.aleo/hello\");\n *\n * // Create the offline transaction\n * const offlineExecuteTx = <Transaction>await this.buildExecutionTransaction(\"hello_hello.aleo\", \"hello\", 1, false, [\"5u32\", \"5u32\"], undefined, offlineSearchParams, undefined, undefined, undefined, undefined, offlineQuery, program);\n *\n * // Broadcast the transaction later on a machine with internet access\n * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n * const txId = await networkClient.broadcastTransaction(offlineExecuteTx);\n */\nclass OfflineKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n\n    constructor() {\n        this.cache = new Map<string, CachedKeyPair>();\n    }\n\n    /**\n     * Get bond_public function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the bond_public function\n     */\n    bondPublicKeys(): Promise<FunctionKeyPair | Error> {\n        return this.functionKeys(OfflineSearchParams.bondPublicKeyParams());\n    };\n\n    /**\n     * Get bond_validator function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the bond_public function\n     */\n    bondValidatorKeys(): Promise<FunctionKeyPair | Error> {\n        return this.functionKeys(OfflineSearchParams.bondValidatorKeyParams());\n    };\n\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    };\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the unbond_public function\n     */\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair | Error> {\n        return this.functionKeys(OfflineSearchParams.claimUnbondPublicKeyParams());\n    };\n\n    /**\n     * Get arbitrary function key from the offline key provider cache.\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * /// First cache the keys from local offline resources\n     * const offlineKeyProvider = new OfflineKeyProvider();\n     * const myFunctionVerifyingKey = VerifyingKey.fromString(\"verifier...\");\n     * const myFunctionProvingKeyBytes = await readBinaryFile('./resources/myfunction.prover');\n     * const myFunctionProvingKey = ProvingKey.fromBytes(myFunctionProvingKeyBytes);\n     *\n     * /// Cache the keys for future use with a memorable locator\n     * offlineKeyProvider.cacheKeys(\"myprogram.aleo/myfunction\", [myFunctionProvingKey, myFunctionVerifyingKey]);\n     *\n     * /// When they're needed, retrieve the keys from the cache\n     *\n     * /// First create a search parameter object with the same locator used to cache the keys\n     * const keyParams = new OfflineSearchParams(\"myprogram.aleo/myfunction\");\n     *\n     * /// Then retrieve the keys\n     * const [myFunctionProver, myFunctionVerifier] = await offlineKeyProvider.functionKeys(keyParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error> {\n        return new Promise((resolve, reject) => {\n            if (params === undefined) {\n                reject(new Error(\"No search parameters provided, cannot retrieve keys\"));\n            } else {\n                const keyId = params.cacheKey;\n                const verifyCreditsKeys = params.verifyCreditsKeys;\n                if (this.cache.has(keyId)) {\n                    const [provingKeyBytes, verifyingKeyBytes] = this.cache.get(keyId) as CachedKeyPair;\n                    const provingKey = ProvingKey.fromBytes(provingKeyBytes);\n                    const verifyingKey = VerifyingKey.fromBytes(verifyingKeyBytes);\n                    if (verifyCreditsKeys) {\n                        const keysMatchExpected = this.verifyCreditsKeys(keyId, provingKey, verifyingKey)\n                        if (!keysMatchExpected) {\n                            reject (new Error(`Cached keys do not match expected keys for ${keyId}`));\n                        }\n                    }\n                    resolve([provingKey, verifyingKey]);\n                } else {\n                    reject(new Error(\"Keys not found in cache for \" + keyId));\n                }\n            }\n        });\n    };\n\n    /**\n     * Determines if the keys for a given credits function match the expected keys.\n     *\n     * @returns {boolean} Whether the keys match the expected keys\n     */\n    verifyCreditsKeys(locator: string, provingKey: ProvingKey, verifyingKey: VerifyingKey): boolean {\n        switch (locator) {\n            case CREDITS_PROGRAM_KEYS.bond_public.locator:\n                return provingKey.isBondPublicProver() && verifyingKey.isBondPublicVerifier();\n            case CREDITS_PROGRAM_KEYS.claim_unbond_public.locator:\n                return provingKey.isClaimUnbondPublicProver() && verifyingKey.isClaimUnbondPublicVerifier();\n            case CREDITS_PROGRAM_KEYS.fee_private.locator:\n                return provingKey.isFeePrivateProver() && verifyingKey.isFeePrivateVerifier();\n            case CREDITS_PROGRAM_KEYS.fee_public.locator:\n                return provingKey.isFeePublicProver() && verifyingKey.isFeePublicVerifier();\n            case CREDITS_PROGRAM_KEYS.inclusion.locator:\n                return provingKey.isInclusionProver() && verifyingKey.isInclusionVerifier();\n            case CREDITS_PROGRAM_KEYS.join.locator:\n                return provingKey.isJoinProver() && verifyingKey.isJoinVerifier();\n            case CREDITS_PROGRAM_KEYS.set_validator_state.locator:\n                return provingKey.isSetValidatorStateProver() && verifyingKey.isSetValidatorStateVerifier();\n            case CREDITS_PROGRAM_KEYS.split.locator:\n                return provingKey.isSplitProver() && verifyingKey.isSplitVerifier();\n            case CREDITS_PROGRAM_KEYS.transfer_private.locator:\n                return provingKey.isTransferPrivateProver() && verifyingKey.isTransferPrivateVerifier();\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.locator:\n                return provingKey.isTransferPrivateToPublicProver() && verifyingKey.isTransferPrivateToPublicVerifier();\n            case CREDITS_PROGRAM_KEYS.transfer_public.locator:\n                return provingKey.isTransferPublicProver() && verifyingKey.isTransferPublicVerifier();\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.locator:\n                return provingKey.isTransferPublicToPrivateProver() && verifyingKey.isTransferPublicToPrivateVerifier();\n            case CREDITS_PROGRAM_KEYS.unbond_public.locator:\n                return provingKey.isUnbondPublicProver() && verifyingKey.isUnbondPublicVerifier();\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * Get fee_private function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair | Error> {\n        return this.functionKeys(OfflineSearchParams.feePrivateKeyParams());\n    };\n\n    /**\n     * Get fee_public function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair | Error> {\n        return this.functionKeys(OfflineSearchParams.feePublicKeyParams());\n    };\n\n    /**\n     * Get join function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair | Error> {\n        return this.functionKeys(OfflineSearchParams.joinKeyParams());\n    };\n\n    /**\n     * Get split function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair | Error> {\n        return this.functionKeys(OfflineSearchParams.splitKeyParams());\n    };\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program.\n     *\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new OfflineKeyProvider\n     * const offlineKeyProvider = new OfflineKeyProvider();\n     *\n     * // Cache the keys for future use with the official locator\n     * const transferPublicProvingKeyBytes = await readBinaryFile('./resources/transfer_public.prover.a74565e');\n     * const transferPublicProvingKey = ProvingKey.fromBytes(transferPublicProvingKeyBytes);\n     *\n     * // Cache the transfer_public keys for future use with the OfflinKeyProvider's convenience method for\n     * // transfer_public (the verifying key will be cached automatically)\n     * offlineKeyProvider.insertTransferPublicKeys(transferPublicProvingKey);\n     *\n     * /// When they're needed, retrieve the keys from the cache\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair | Error> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPrivateKeyParams());\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPrivateToPublicKeyParams());\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPublicKeyParams());\n        } else if (PUBLIC_TRANSFER_AS_SIGNER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPublicAsSignerKeyParams());\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPublicToPrivateKeyParams());\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    };\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    async unBondPublicKeys(): Promise<FunctionKeyPair | Error> {\n        return this.functionKeys(OfflineSearchParams.unbondPublicKeyParams());\n    };\n\n    /**\n     * Insert the proving and verifying keys for the bond_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for bond_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertBondPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isBondPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.bond_public.locator, [provingKey.toBytes(), VerifyingKey.bondPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for bond_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the claim_unbond_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for claim_unbond_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertClaimUnbondPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isClaimUnbondPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.claim_unbond_public.locator, [provingKey.toBytes(), VerifyingKey.claimUnbondPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for claim_unbond_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the fee_private function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for fee_private before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertFeePrivateKeys(provingKey: ProvingKey) {\n        if (provingKey.isFeePrivateProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.fee_private.locator, [provingKey.toBytes(), VerifyingKey.feePrivateVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for fee_private\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the fee_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for fee_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertFeePublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isFeePublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.fee_public.locator, [provingKey.toBytes(), VerifyingKey.feePublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for fee_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the join function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for join before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertJoinKeys(provingKey: ProvingKey) {\n        if (provingKey.isJoinProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.join.locator, [provingKey.toBytes(), VerifyingKey.joinVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for join\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the set_validator_state function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for set_validator_state before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertSetValidatorStateKeys(provingKey: ProvingKey) {\n        if (provingKey.isSetValidatorStateProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.set_validator_state.locator, [provingKey.toBytes(), VerifyingKey.setValidatorStateVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for set_validator_state\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the split function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for split before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertSplitKeys(provingKey: ProvingKey) {\n        if (provingKey.isSplitProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.split.locator, [provingKey.toBytes(), VerifyingKey.splitVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for split\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the transfer_private function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_private before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPrivateKeys(provingKey: ProvingKey) {\n        if (provingKey.isTransferPrivateProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.transfer_private.locator, [provingKey.toBytes(), VerifyingKey.transferPrivateVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_private\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the transfer_private_to_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_private_to_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPrivateToPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isTransferPrivateToPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.transfer_private_to_public.locator, [provingKey.toBytes(), VerifyingKey.transferPrivateToPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_private_to_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the transfer_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isTransferPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.transfer_public.locator, [provingKey.toBytes(), VerifyingKey.transferPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the transfer_public_to_private function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_public_to_private before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPublicToPrivateKeys(provingKey: ProvingKey) {\n        if (provingKey.isTransferPublicToPrivateProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.transfer_public_to_private.locator, [provingKey.toBytes(), VerifyingKey.transferPublicToPrivateVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_public_to_private\");\n        }\n    }\n\n    insertUnbondPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isUnbondPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.unbond_public.locator, [provingKey.toBytes(), VerifyingKey.unbondPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for unbond_public\");\n        }\n    }\n}\n\n\nexport {OfflineKeyProvider, OfflineSearchParams}\n","import { logAndThrow, RecordPlaintext } from \"./index\";\nimport { Account } from \"./account\";\nimport { AleoNetworkClient } from \"./network-client\";\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface RecordSearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * Interface for a record provider. A record provider is used to find records for use in deployment and execution\n * transactions on the Aleo Network. A default implementation is provided by the NetworkRecordProvider class. However,\n * a custom implementation can be provided (say if records are synced locally to a database from the network) by\n * implementing this interface.\n */\ninterface RecordProvider {\n    account: Account\n\n    /**\n     * Find a credits.aleo record with a given number of microcredits from the chosen provider\n     *\n     * @param {number} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // A class implementing record provider can be used to find a record with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, its nonce should be added to the nonces array so that it is not\n     * // found again if a subsequent search is performed\n     * const record2 = await recordProvider.findCreditsRecord(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    findCreditsRecord(microcredits: number, unspent: boolean,  nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error>;\n\n    /**\n     * Find a list of credit.aleo records with a given number of microcredits from the chosen provider\n     *\n     * @param {number} microcreditAmounts A list of separate microcredit amounts to search for (e.g. [5000, 100000])\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext[] | Error>} A list of records with a value greater or equal to the amounts specified if such records exist, otherwise an error\n     *\n     * @example\n     * // A class implementing record provider can be used to find a record with a given number of microcredits\n     * const records = await recordProvider.findCreditsRecords([5000, 5000], true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces array so that it is not\n     * // found again if a subsequent search is performed\n     * const nonces = [];\n     * records.forEach(record => { nonces.push(record.nonce()) });\n     * const records2 = await recordProvider.findCreditsRecord(5000, true, nonces);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    findCreditsRecords(microcreditAmounts: number[], unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error>;\n\n    /**\n     * Find an arbitrary record\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // The RecordSearchParams interface can be used to create parameters for custom record searches which can then\n     * // be passed to the record provider. An example of how this would be done for the credits.aleo program is shown\n     * // below.\n     *\n     * class CustomRecordSearch implements RecordSearchParams {\n     *     startHeight: number;\n     *     endHeight: number;\n     *     amount: number;\n     *     program: string;\n     *     recordName: string;\n     *     constructor(startHeight: number, endHeight: number, credits: number, maxRecords: number, programName: string, recordName: string) {\n     *         this.startHeight = startHeight;\n     *         this.endHeight = endHeight;\n     *         this.amount = amount;\n     *         this.program = programName;\n     *         this.recordName = recordName;\n     *     }\n     * }\n     *\n     * const params = new CustomRecordSearch(0, 100, 5000, \"credits.aleo\", \"credits\");\n     *\n     * const record = await recordProvider.findRecord(true, [], params);\n     */\n    findRecord(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error>;\n\n    /**\n     * Find multiple records from arbitrary programs\n     *\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * // The RecordSearchParams interface can be used to create parameters for custom record searches which can then\n     * // be passed to the record provider. An example of how this would be done for the credits.aleo program is shown\n     * // below.\n     *\n     * class CustomRecordSearch implements RecordSearchParams {\n     *     startHeight: number;\n     *     endHeight: number;\n     *     amount: number;\n     *     maxRecords: number;\n     *     programName: string;\n     *     recordName: string;\n     *     constructor(startHeight: number, endHeight: number, credits: number, maxRecords: number, programName: string, recordName: string) {\n     *         this.startHeight = startHeight;\n     *         this.endHeight = endHeight;\n     *         this.amount = amount;\n     *         this.maxRecords = maxRecords;\n     *         this.programName = programName;\n     *         this.recordName = recordName;\n     *     }\n     * }\n     *\n     * const params = new CustomRecordSearch(0, 100, 5000, 2, \"credits.aleo\", \"credits\");\n     * const records = await recordProvider.findRecord(true, [], params);\n     */\n    findRecords(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error>;\n}\n\n/**\n * A record provider implementation that uses the official Aleo API to find records for usage in program execution and\n * deployment, wallet functionality, and other use cases.\n */\nclass NetworkRecordProvider implements RecordProvider {\n    account: Account;\n    networkClient: AleoNetworkClient;\n    constructor(account: Account, networkClient: AleoNetworkClient) {\n        this.account = account;\n        this.networkClient = networkClient;\n    }\n\n    /**\n     * Set the account used to search for records\n     *\n     * @param {Account} account The account to use for searching for records\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Find a list of credit records with a given number of microcredits by via the official Aleo API\n     *\n     * @param {number[]} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // Create a new NetworkRecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // The record provider can be used to find records with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not\n     * // found again if a subsequent search is performed\n     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * */\n    async findCreditsRecords(microcredits: number[], unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error> {\n        let startHeight = 0;\n        let endHeight = 0;\n\n        if (searchParameters) {\n            if (\"startHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                startHeight = searchParameters[\"startHeight\"];\n            }\n\n            if (\"endHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                endHeight = searchParameters[\"endHeight\"];\n            }\n        }\n\n        // If the end height is not specified, use the current block height\n        if (endHeight == 0) {\n            const end = await this.networkClient.getLatestHeight();\n            if (end instanceof Error) {\n                throw logAndThrow(\"Unable to get current block height from the network\")\n            }\n            endHeight = end;\n        }\n\n        // If the start height is greater than the end height, throw an error\n        if (startHeight >= endHeight) {\n            throw logAndThrow(\"Start height must be less than end height\");\n        }\n\n        return await this.networkClient.findUnspentRecords(startHeight, endHeight, this.account.privateKey(), microcredits, undefined, nonces);\n    }\n\n    /**\n     * Find a credit record with a given number of microcredits by via the official Aleo API\n     *\n     * @param {number} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // Create a new NetworkRecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // The record provider can be used to find records with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not\n     * // found again if a subsequent search is performed\n     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    async findCreditsRecord(microcredits: number, unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        const records = await this.findCreditsRecords([microcredits], unspent, nonces, searchParameters);\n        if (!(records instanceof Error) && records.length > 0) {\n            return records[0];\n        }\n        console.error(\"Record not found with error:\", records);\n        return new Error(\"Record not found\");\n    }\n\n    /**\n     * Find an arbitrary record. WARNING: This function is not implemented yet and will throw an error.\n     */\n    async findRecord(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Find multiple arbitrary records. WARNING: This function is not implemented yet and will throw an error.\n     */\n    async findRecords(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n}\n\n/**\n * BlockHeightSearch is a RecordSearchParams implementation that allows for searching for records within a given\n * block height range.\n *\n * @example\n * // Create a new BlockHeightSearch\n * const params = new BlockHeightSearch(89995, 99995);\n *\n * // Create a new NetworkRecordProvider\n * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n * const keyProvider = new AleoKeyProvider();\n * const recordProvider = new NetworkRecordProvider(account, networkClient);\n *\n * // The record provider can be used to find records with a given number of microcredits and the block height search\n * // can be used to find records within a given block height range\n * const record = await recordProvider.findCreditsRecord(5000, true, [], params);\n *\n */\nclass BlockHeightSearch implements RecordSearchParams {\n    startHeight: number;\n    endHeight: number;\n    constructor(startHeight: number, endHeight: number) {\n        this.startHeight = startHeight;\n        this.endHeight = endHeight;\n    }\n}\n\nexport { BlockHeightSearch, NetworkRecordProvider, RecordProvider, RecordSearchParams};\n","// Experimental example where SDK manages worker\n\nimport { wrap } from \"comlink\";\nimport { WorkerAPI } from './worker';\n\nlet singletonWorker: WorkerAPI | null = null;\n\nconst createAleoWorker = (): WorkerAPI => {\n    if (!singletonWorker) {\n        const worker = new Worker(new URL(\"worker.js\", import.meta.url), {\n            type: \"module\",\n        });\n        singletonWorker = wrap<WorkerAPI>(worker);\n    }\n    return singletonWorker;\n};\n\nexport { createAleoWorker };","import {\n    Account,\n    AleoKeyProvider,\n    AleoNetworkClient,\n    ExecutionResponse,\n    FunctionKeyProvider,\n    FunctionKeyPair,\n    OfflineQuery,\n    KeySearchParams,\n    RecordPlaintext,\n    RecordProvider,\n    RecordSearchParams,\n    PrivateKey,\n    Program,\n    ProgramImports,\n    ProvingKey,\n    VerifyingKey,\n    Transaction,\n    PRIVATE_TRANSFER_TYPES,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n    ProgramManagerBase as WasmProgramManager, verifyFunctionExecution, AleoKeyProviderParams, CREDITS_PROGRAM_KEYS,\n} from \"./index\";\nimport {Execution} from \"@provablehq/wasm/dist/crates/aleo_wasm\";\n\n/**\n * Represents the options for executing a transaction in the Aleo network.\n * This interface is used to specify the parameters required for building and submitting an execution transaction.\n *\n * @property {string} programName - The name of the program containing the function to be executed.\n * @property {string} functionName - The name of the function to execute within the program.\n * @property {number} fee - The fee to be paid for the transaction.\n * @property {boolean} privateFee - If true, uses a private record to pay the fee; otherwise, uses the account's public credit balance.\n * @property {string[]} inputs - The inputs to the function being executed.\n * @property {RecordSearchParams} [recordSearchParams] - Optional parameters for searching for a record to pay the execution transaction fee.\n * @property {KeySearchParams} [keySearchParams] - Optional parameters for finding the matching proving & verifying keys for the function.\n * @property {string | RecordPlaintext} [feeRecord] - Optional fee record to use for the transaction.\n * @property {ProvingKey} [provingKey] - Optional proving key to use for the transaction.\n * @property {VerifyingKey} [verifyingKey] - Optional verifying key to use for the transaction.\n * @property {PrivateKey} [privateKey] - Optional private key to use for the transaction.\n * @property {OfflineQuery} [offlineQuery] - Optional offline query if creating transactions in an offline environment.\n * @property {string | Program} [program] - Optional program source code to use for the transaction.\n * @property {ProgramImports} [imports] - Optional programs that the program being executed imports.\n */\ninterface ExecuteOptions {\n    programName: string;\n    functionName: string;\n    fee: number;\n    privateFee: boolean;\n    inputs: string[];\n    recordSearchParams?: RecordSearchParams;\n    keySearchParams?: KeySearchParams;\n    feeRecord?: string | RecordPlaintext;\n    provingKey?: ProvingKey;\n    verifyingKey?: VerifyingKey;\n    privateKey?: PrivateKey;\n    offlineQuery?: OfflineQuery;\n    program?: string | Program;\n    imports?: ProgramImports;\n}\n\n/**\n * The ProgramManager class is used to execute and deploy programs on the Aleo network and create value transfers.\n */\nclass ProgramManager {\n    account: Account | undefined;\n    keyProvider: FunctionKeyProvider;\n    host: string;\n    networkClient: AleoNetworkClient;\n    recordProvider: RecordProvider | undefined;\n\n    /** Create a new instance of the ProgramManager\n     *\n     * @param { string | undefined } host A host uri running the official Aleo API\n     * @param { FunctionKeyProvider | undefined } keyProvider A key provider that implements {@link FunctionKeyProvider} interface\n     * @param { RecordProvider | undefined } recordProvider A record provider that implements {@link RecordProvider} interface\n     */\n    constructor(host?: string | undefined, keyProvider?: FunctionKeyProvider | undefined, recordProvider?: RecordProvider | undefined) {\n        this.host = host ? host : 'https://api.explorer.aleo.org/v1';\n        this.networkClient = new AleoNetworkClient(this.host);\n        \n        this.keyProvider = keyProvider ? keyProvider : new AleoKeyProvider();\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Set the account to use for transaction submission to the Aleo network\n     *\n     * @param {Account} account Account to use for transaction submission\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Set the key provider that provides the proving and verifying keys for programs\n     *\n     * @param {FunctionKeyProvider} keyProvider\n     */\n    setKeyProvider(keyProvider: FunctionKeyProvider) {\n        this.keyProvider = keyProvider;\n    }\n\n    /**\n     * Set the host peer to use for transaction submission to the Aleo network\n     *\n     * @param host {string} Peer url to use for transaction submission\n     */\n    setHost(host: string) {\n        this.host = host;\n        this.networkClient.setHost(host);\n    }\n\n    /**\n     * Set the record provider that provides records for transactions\n     *\n     * @param {RecordProvider} recordProvider\n     */\n    setRecordProvider(recordProvider: RecordProvider) {\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Deploy an Aleo program to the Aleo network\n     *\n     * @param {string} program Program source code\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for searching for a record to use\n     * pay the deployment fee\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {string | Error} The transaction id of the deployed program or a failure message from the network\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for deployments\n     * const program = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     *\n     * // Define a fee in credits\n     * const fee = 1.2;\n     *\n     * // Deploy the program\n     * const tx_id = await programManager.deploy(program, fee);\n     *\n     * // Verify the transaction was successful\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async deploy(\n        program: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        feeRecord?: string | RecordPlaintext,\n        privateKey?: PrivateKey,\n    ): Promise<string | Error> {\n        // Ensure the program is valid and does not exist on the network\n        try {\n            const programObject = Program.fromString(program);\n            let programSource;\n            try {\n                programSource = await this.networkClient.getProgram(programObject.id());\n            } catch (e) {\n                // Program does not exist on the network, deployment can proceed\n                console.log(`Program ${programObject.id()} does not exist on the network, deploying...`);\n            }\n            if (typeof programSource == \"string\") {\n                throw (`Program ${programObject.id()} already exists on the network, please rename your program`);\n            }\n        } catch (e) {\n            throw logAndThrow(`Error validating program: ${e}`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let deploymentPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            deploymentPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof deploymentPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n        } catch (e) {\n            throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build a deployment transaction and submit it to the network\n        const tx = await WasmProgramManager.buildDeploymentTransaction(deploymentPrivateKey, program, fee, feeRecord, this.host, imports, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<Transaction | Error>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const transaction = await programManager.buildExecutionTransaction({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   fee: 0.020,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async buildExecutionTransaction(options: ExecuteOptions): Promise<Transaction | Error> {\n        // Destructure the options object to access the parameters\n        const {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            recordSearchParams,\n            keySearchParams,\n            privateKey,\n            offlineQuery\n        } = options;\n\n        let feeRecord = options.feeRecord;\n        let provingKey = options.provingKey;\n        let verifyingKey = options.verifyingKey;\n        let program = options.program;\n        let imports = options.imports;\n\n        // Ensure the function exists on the network\n        if (program === undefined) {\n            try {\n                program = <string>(await this.networkClient.getProgram(programName));\n            } catch (e) {\n                throw logAndThrow(`Error finding ${programName}. Network response: '${e}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`);\n            }\n        } else if (program instanceof Program) {\n            program = program.toString();\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the fee proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Resolve the program imports if they exist\n        const numberOfImports = Program.fromString(program).getImports().length;\n        if (numberOfImports > 0 && !imports) {\n            try {\n                imports = <ProgramImports>await this.networkClient.getProgramImports(programName);\n            } catch (e) {\n                throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n            }\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildExecutionTransaction(executionPrivateKey, program, functionName, inputs, fee, feeRecord, this.host, imports, provingKey, verifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<Transaction | Error>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const transaction = await programManager.execute({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   fee: 0.020,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async execute(options: ExecuteOptions): Promise<string | Error> {\n        const tx = <Transaction>await this.buildExecutionTransaction(options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Run an Aleo program in offline mode\n     *\n     * @param {string} program Program source code containing the function to be executed\n     * @param {string} function_name Function name to execute\n     * @param {string[]} inputs Inputs to the function\n     * @param {number} proveExecution Whether to prove the execution of the function and return an execution transcript\n     * that contains the proof.\n     * @param {string[] | undefined} imports Optional imports to the program\n     * @param {KeySearchParams | undefined} keySearchParams Optional parameters for finding the matching proving &\n     * verifying keys for the function\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * import { Account, Program } from '@provablehq/sdk';\n     *\n     * /// Create the source for the \"helloworld\" program\n     * const program = \"program helloworld.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager();\n     *\n     * /// Create a temporary account for the execution of the program\n     * const account = new Account();\n     * programManager.setAccount(account);\n     *\n     * /// Get the response and ensure that the program executed correctly\n     * const executionResponse = await programManager.executeOffline(program, \"hello\", [\"5u32\", \"5u32\"]);\n     * const result = executionResponse.getOutputs();\n     * assert(result === [\"10u32\"]);\n     */\n    async run(\n        program: string,\n        function_name: string,\n        inputs: string[],\n        proveExecution: boolean,\n        imports?: ProgramImports,\n        keySearchParams?: KeySearchParams,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<ExecutionResponse> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Run the program offline and return the result\n        console.log(\"Running program offline\")\n        console.log(\"Proving key: \", provingKey);\n        console.log(\"Verifying key: \", verifyingKey);\n        return WasmProgramManager.executeFunctionOffline(executionPrivateKey, program, function_name, inputs, proveExecution, false, imports, provingKey, verifyingKey, this.host, offlineQuery);\n    }\n\n    /**\n     * Join two credits records into a single credits record\n     *\n     * @param {RecordPlaintext | string} recordOne First credits record to join\n     * @param {RecordPlaintext | string} recordTwo Second credits record to join\n     * @param {number} fee Fee in credits pay for the join transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the fee record to use\n     * to pay the fee for the join transaction\n     * @param {RecordPlaintext | string | undefined} feeRecord Fee record to use for the join transaction\n     * @param {PrivateKey | undefined} privateKey Private key to use for the join transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     */\n    async join(\n        recordOne: RecordPlaintext | string,\n        recordTwo: RecordPlaintext | string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams | undefined,\n        feeRecord?: RecordPlaintext | string | undefined,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let joinKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            joinKeys = <FunctionKeyPair>await this.keyProvider.joinKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [joinProvingKey, joinVerifyingKey] = joinKeys;\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Validate the records provided are valid plaintext records\n        try {\n            recordOne = recordOne instanceof RecordPlaintext ? recordOne : RecordPlaintext.fromString(recordOne);\n            recordTwo = recordTwo instanceof RecordPlaintext ? recordTwo : RecordPlaintext.fromString(recordTwo);\n        } catch (e) {\n            throw logAndThrow('Records provided are not valid. Please ensure they are valid plaintext records.')\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildJoinTransaction(executionPrivateKey, recordOne, recordTwo, fee, feeRecord, this.host, joinProvingKey, joinVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Split credits into two new credits records\n     *\n     * @param {number} splitAmount Amount in microcredits to split from the original credits record\n     * @param {RecordPlaintext | string} amountRecord Amount record to use for the split transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the split transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * const record = \"{  owner: aleo184vuwr5u7u0ha5f5k44067dd2uaqewxx6pe5ltha5pv99wvhfqxqv339h4.private,  microcredits: 45000000u64.private,  _nonce: 4106205762862305308495708971985748592380064201230396559307556388725936304984group.public}\"\n     * const tx_id = await programManager.split(25000000, record);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async split(splitAmount: number, amountRecord: RecordPlaintext | string, privateKey?: PrivateKey, offlineQuery?: OfflineQuery): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the split keys from the key provider\n        let splitKeys;\n        try {\n            splitKeys = <FunctionKeyPair>await this.keyProvider.splitKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [splitProvingKey, splitVerifyingKey] = splitKeys;\n\n        // Validate the record to be split\n        try {\n            amountRecord = amountRecord instanceof RecordPlaintext ? amountRecord : RecordPlaintext.fromString(amountRecord);\n        } catch (e) {\n            throw logAndThrow(\"Record provided is not valid. Please ensure it is a valid plaintext record.\");\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildSplitTransaction(executionPrivateKey, splitAmount, amountRecord, this.host, splitProvingKey, splitVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Pre-synthesize proving and verifying keys for a program\n     *\n     * @param program {string} The program source code to synthesize keys for\n     * @param function_id {string} The function id to synthesize keys for\n     * @param inputs {Array<string>}  Sample inputs to the function\n     * @param privateKey {PrivateKey | undefined} Optional private key to use for the key synthesis\n     *\n     * @returns {Promise<FunctionKeyPair | Error>}\n     */\n    async synthesizeKeys(\n        program: string,\n        function_id: string,\n        inputs: Array<string>,\n        privateKey?: PrivateKey,\n    ): Promise<FunctionKeyPair | Error> {\n        // Resolve the program imports if they exist\n        let imports;\n\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\") {\n            if (typeof this.account !== \"undefined\") {\n                executionPrivateKey = this.account.privateKey();\n            } else {\n                executionPrivateKey = new PrivateKey();\n            }\n        }\n\n        // Attempt to run an offline execution of the program and extract the proving and verifying keys\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n            const keyPair = await WasmProgramManager.synthesizeKeyPair(\n                executionPrivateKey,\n                program,\n                function_id,\n                inputs,\n                imports\n            );\n            return [<ProvingKey>keyPair.provingKey(), <VerifyingKey>keyPair.verifyingKey()];\n        } catch (e) {\n            throw logAndThrow(`Could not synthesize keys - error ${e}. Please ensure the program is valid and the inputs are correct.`);\n        }\n    }\n\n    /**\n     * Build a transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {string | undefined} caller The caller of the function (if calling transfer_public)\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async buildTransferTransaction(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        caller?: string,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction | Error> {\n        // Validate the transfer type\n        transferType = <string>validateTransferType(transferType);\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let transferKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            transferKeys = <FunctionKeyPair>await this.keyProvider.transferKeys(transferType);\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [transferProvingKey, transferVerifyingKey] = transferKeys;\n\n        // Get the amount and fee record from the account if it is not provided in the parameters\n        try {\n            // Track the nonces of the records found so no duplicate records are used\n            const nonces: string[] = [];\n            if (requiresAmountRecord(transferType)) {\n                // If the transfer type is private and requires an amount record, get it from the record provider\n                amountRecord = <RecordPlaintext>await this.getCreditsRecord(fee, [], amountRecord, recordSearchParams);\n                nonces.push(amountRecord.nonce());\n            } else {\n                amountRecord = undefined;\n            }\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, nonces, feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildTransferTransaction(executionPrivateKey, amount, recipient, transferType, caller, amountRecord, fee, feeRecord, this.host, transferProvingKey, transferVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Build a transfer_public transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} caller The caller of the transfer (may be different from the signer)\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     */\n    async buildTransferPublicTransaction(\n        amount: number,\n        caller: string,\n        recipient: string,\n        fee: number,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction | Error> {\n        return this.buildTransferTransaction(amount, recipient, \"public\", fee, false, caller, undefined, undefined, undefined, privateKey, offlineQuery);\n    }\n\n    /**\n     * Build a transfer_public_as_signer transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     */\n    async buildTransferPublicAsSignerTransaction(\n        amount: number,\n        recipient: string,\n        fee: number,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction | Error> {\n        return this.buildTransferTransaction(amount, recipient, \"public\", fee, false, undefined, undefined, undefined, undefined, privateKey, offlineQuery);\n    }\n\n    /**\n     * Transfer credits to another account\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {string | undefined} caller The caller of the function (if calling transfer_public)\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async transfer(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        caller?: string,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<string | Error> {\n        const tx = <Transaction>await this.buildTransferTransaction(amount, recipient, transferType, fee, privateFee, caller, recordSearchParams, amountRecord, feeRecord, privateKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build transaction to bond credits to a validator for later submission to the Aleo Network\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction object for later submission\n     * const tx = await programManager.buildBondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can be later submitted to the network using the network client.\n     * const result = await programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is bonding the credits\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async buildBondPublicTransaction(staker_address: string, validator_address: string, withdrawal_address: string, amount: number, options: Partial<ExecuteOptions> = {}) {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"bond_public\",\n            fee = options.fee || 0.86,\n            privateFee = false,\n            inputs = [staker_address, validator_address, withdrawal_address, `${scaledAmount.toString()}u64`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.bond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.bond_public.verifier,\n                cacheKey: \"credits.aleo/bond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Bond credits to validator.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is bonding the credits\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the signer (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 1,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {Options} options Options for the execution\n     */\n    async bondPublic(staker_address: string, validator_address: string, withdrawal_address:string, amount: number, options: Partial<ExecuteOptions> = {}) {\n        const tx = <Transaction>await this.buildBondPublicTransaction(staker_address, validator_address, withdrawal_address, amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a bond_validator transaction for later submission to the Aleo Network.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bond validator transaction object for later use.\n     * const tx = await programManager.buildBondValidatorTransaction(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can later be submitted to the network using the network client.\n     * const tx_id = await programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {number} commission The commission rate for the validator (must be between 0 and 100 - an error will be thrown if it is not)\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async buildBondValidatorTransaction(validator_address: string, withdrawal_address: string, amount: number, commission: number, options: Partial<ExecuteOptions> = {}) {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const adjustedCommission = Math.trunc(commission)\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"bond_validator\",\n            fee = options.fee || 0.86,\n            privateFee = false,\n            inputs = [validator_address, withdrawal_address, `${scaledAmount.toString()}u64`, `${adjustedCommission.toString()}u8`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.bond_validator.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.bond_validator.verifier,\n                cacheKey: \"credits.aleo/bond_validator\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Build transaction to bond a validator.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondValidator(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     *\n     * @returns string\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {number} commission The commission rate for the validator (must be between 0 and 100 - an error will be thrown if it is not)\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async bondValidator(validator_address: string, withdrawal_address: string, amount: number, commission: number, options: Partial<ExecuteOptions> = {}) {\n        const tx = <Transaction>await this.buildBondValidatorTransaction(validator_address, withdrawal_address, amount, commission, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to unbond public credits from a validator in the Aleo network.\n     *\n     * @param {string} staker_address - The address of the staker who is unbonding the credits.\n     * @param {number} amount - The amount of credits to unbond (scaled by 1,000,000).\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction | Error>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * // Create a keyProvider to handle key management.\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to unbond credits.\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * const tx = await programManager.buildUnbondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     */\n    async buildUnbondPublicTransaction(staker_address: string, amount: number, options: Partial<ExecuteOptions> = {}): Promise<Transaction | Error> {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"unbond_public\",\n            fee = options.fee || 1.3,\n            privateFee = false,\n            inputs = [staker_address, `${scaledAmount.toString()}u64`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.unbond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.unbond_public.verifier,\n                cacheKey: \"credits.aleo/unbond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Unbond a specified amount of staked credits.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction and send it to the network\n     * const tx_id = await programManager.unbondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", 10);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is unbonding the credits\n     * @param {number} amount Amount of credits to unbond. If the address of the executor of this function is an\n     * existing validator, it will subtract this amount of credits from the validator's staked credits. If there are\n     * less than 1,000,000 credits staked pool after the unbond, the validator will be removed from the validator set.\n     * If the address of the executor of this function is not a validator and has credits bonded as a delegator, it will\n     * subtract this amount of credits from the delegator's staked credits. If there are less than 10 credits bonded\n     * after the unbond operation, the delegator will be removed from the validator's staking pool.\n     * @param {ExecuteOptions} options Options for the execution\n     */\n    async unbondPublic(staker_address: string, amount: number, options: Partial<ExecuteOptions> = {}): Promise<string | Error> {\n        const tx = <Transaction>await this.buildUnbondPublicTransaction(staker_address, amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to claim unbonded public credits in the Aleo network.\n     *\n     * @param {string} staker_address - The address of the staker who is claiming the credits.\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction | Error>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to claim unbonded credits.\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     *\n     * // Create the claim unbonded transaction object for later use.\n     * const tx = await programManager.buildClaimUnbondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\");\n     * console.log(tx);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     */\n    async buildClaimUnbondPublicTransaction(staker_address: string, options: Partial<ExecuteOptions> = {}): Promise<Transaction | Error> {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"claim_unbond_public\",\n            fee = options.fee || 2,\n            privateFee = false,\n            inputs = [staker_address],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier,\n                cacheKey: \"credits.aleo/claim_unbond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Claim unbonded credits. If credits have been unbonded by the account executing this function, this method will\n     * claim them and add them to the public balance of the account.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.claimUnbondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\");\n     *\n     * @param {string} staker_address Address of the staker who is claiming the credits\n     * @param {ExecuteOptions} options\n     * @returns string\n     */\n    async claimUnbondPublic(staker_address: string, options: Partial<ExecuteOptions> = {}): Promise<string | Error> {\n        const tx = <Transaction>await this.buildClaimUnbondPublicTransaction(staker_address, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a set_validator_state transaction for later usage.\n     *\n     * This function allows a validator to set their state to be either opened or closed to new stakers.\n     * When the validator is open to new stakers, any staker (including the validator) can bond or unbond from the validator.\n     * When the validator is closed to new stakers, existing stakers can still bond or unbond from the validator, but new stakers cannot bond.\n     *\n     * This function serves two primary purposes:\n     * 1. Allow a validator to leave the committee, by closing themselves to stakers and then unbonding all of their stakers.\n     * 2. Allow a validator to maintain their % of stake, by closing themselves to allowing more stakers to bond to them.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"ValidatorPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx = await programManager.buildSetValidatorStateTransaction(true);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {boolean} validator_state\n     * @param {Partial<ExecuteOptions>} options - Override default execution options\n     */\n    async buildSetValidatorStateTransaction(validator_state: boolean, options: Partial<ExecuteOptions> = {}) {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"set_validator_state\",\n            fee = 1,\n            privateFee = false,\n            inputs = [validator_state.toString()],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.set_validator_state.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.set_validator_state.verifier,\n                cacheKey: \"credits.aleo/set_validator_state\"\n            }),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.execute(executeOptions);\n    }\n\n    /**\n     * Submit a set_validator_state transaction to the Aleo Network.\n     *\n     * This function allows a validator to set their state to be either opened or closed to new stakers.\n     * When the validator is open to new stakers, any staker (including the validator) can bond or unbond from the validator.\n     * When the validator is closed to new stakers, existing stakers can still bond or unbond from the validator, but new stakers cannot bond.\n     *\n     * This function serves two primary purposes:\n     * 1. Allow a validator to leave the committee, by closing themselves to stakers and then unbonding all of their stakers.\n     * 2. Allow a validator to maintain their % of stake, by closing themselves to allowing more stakers to bond to them.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"ValidatorPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.setValidatorState(true);\n     *\n     * @returns string\n     * @param {boolean} validator_state\n     * @param {Partial<ExecuteOptions>} options - Override default execution options\n     */\n    async setValidatorState(validator_state: boolean, options: Partial<ExecuteOptions> = {}) {\n        const tx = <string>await this.buildSetValidatorStateTransaction(validator_state, options);\n        return this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Verify a proof of execution from an offline execution\n     *\n     * @param {executionResponse} executionResponse\n     * @returns {boolean} True if the proof is valid, false otherwise\n     */\n    verifyExecution(executionResponse: ExecutionResponse): boolean {\n        try {\n            const execution = <Execution>executionResponse.getExecution();\n            const function_id = executionResponse.getFunctionId();\n            const program = executionResponse.getProgram();\n            const verifyingKey = executionResponse.getVerifyingKey();\n            return verifyFunctionExecution(execution, verifyingKey, program, function_id);\n        } catch(e) {\n            console.warn(\"The execution was not found in the response, cannot verify the execution\");\n            return false;\n        }\n    }\n\n    /**\n     * Create a program object from a program's source code\n     *\n     * @param {string} program Program source code\n     * @returns {Program | Error} The program object\n     */\n    createProgramFromSource(program: string): Program | Error {\n        return Program.fromString(program);\n    }\n\n    /**\n     * Get the credits program object\n     *\n     * @returns {Program} The credits program object\n     */\n    creditsProgram(): Program {\n        return Program.getCreditsProgram();\n    }\n\n    /**\n     * Verify a program is valid\n     *\n     * @param {string} program The program source code\n     */\n    verifyProgram(program: string): boolean {\n        try {\n            <Program>Program.fromString(program);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    // Internal utility function for getting a credits.aleo record\n    async getCreditsRecord(amount: number, nonces: string[], record?: RecordPlaintext | string, params?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        try {\n            return record instanceof RecordPlaintext ? record : RecordPlaintext.fromString(<string>record);\n        } catch (e) {\n            try {\n                const recordProvider = <RecordProvider>this.recordProvider;\n                return <RecordPlaintext>(await recordProvider.findCreditsRecord(amount, true, nonces, params))\n            } catch (e) {\n                throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n            }\n        }\n    }\n}\n\n// Ensure the transfer type requires an amount record\nfunction requiresAmountRecord(transferType: string): boolean {\n    return PRIVATE_TRANSFER_TYPES.has(transferType);\n}\n\n// Validate the transfer type\nfunction validateTransferType(transferType: string): string | Error {\n    return VALID_TRANSFER_TYPES.has(transferType) ? transferType :\n        logAndThrow(`Invalid transfer type '${transferType}'. Valid transfer types are 'private', 'privateToPublic', 'public', and 'publicToPrivate'.`);\n}\n\nexport { ProgramManager }\n","import {VerifyingKey, Metadata} from \"@provablehq/wasm\";\n\nconst KEY_STORE = Metadata.baseUrl();\n\ninterface Key {\n    locator: string,\n    prover: string,\n    verifier: string,\n    verifyingKey: () => VerifyingKey,\n}\n\nfunction convert(metadata: Metadata): Key {\n    // This looks up the method name in VerifyingKey\n    const verifyingKey = (VerifyingKey as any)[metadata.verifyingKey];\n\n    if (!verifyingKey) {\n        throw new Error(\"Invalid method name: \" + metadata.verifyingKey);\n    }\n\n    return {\n        locator: metadata.locator,\n        prover: metadata.prover,\n        verifier: metadata.verifier,\n        verifyingKey,\n    };\n}\n\nconst CREDITS_PROGRAM_KEYS = {\n    bond_public: convert(Metadata.bond_public()),\n    bond_validator: convert(Metadata.bond_validator()),\n    claim_unbond_public: convert(Metadata.claim_unbond_public()),\n    fee_private: convert(Metadata.fee_private()),\n    fee_public: convert(Metadata.fee_public()),\n    inclusion: convert(Metadata.inclusion()),\n    join: convert(Metadata.join()),\n    set_validator_state: convert(Metadata.set_validator_state()),\n    split: convert(Metadata.split()),\n    transfer_private: convert(Metadata.transfer_private()),\n    transfer_private_to_public: convert(Metadata.transfer_private_to_public()),\n    transfer_public: convert(Metadata.transfer_public()),\n    transfer_public_as_signer: convert(Metadata.transfer_public_as_signer()),\n    transfer_public_to_private: convert(Metadata.transfer_public_to_private()),\n    unbond_public: convert(Metadata.unbond_public()),\n};\n\nconst PRIVATE_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n]);\nconst VALID_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n    \"transfer_public\",\n    \"transfer_public_as_signer\",\n    \"public\",\n    \"public_as_signer\",\n    \"transferPublic\",\n    \"transferPublicAsSigner\",\n    \"transfer_public_to_private\",\n    \"publicToPrivate\",\n    \"publicAsSigner\",\n    \"transferPublicToPrivate\",\n]);\nconst PRIVATE_TRANSFER = new Set([\n    \"private\",\n    \"transfer_private\",\n    \"transferPrivate\",\n]);\nconst PRIVATE_TO_PUBLIC_TRANSFER = new Set([\n    \"private_to_public\",\n    \"privateToPublic\",\n    \"transfer_private_to_public\",\n    \"transferPrivateToPublic\",\n]);\nconst PUBLIC_TRANSFER = new Set([\n    \"public\",\n    \"transfer_public\",\n    \"transferPublic\",\n]);\nconst PUBLIC_TRANSFER_AS_SIGNER = new Set([\n    \"public_as_signer\",\n    \"transfer_public_as_signer\",\n    \"transferPublicAsSigner\",\n]);\nconst PUBLIC_TO_PRIVATE_TRANSFER = new Set([\n    \"public_to_private\",\n    \"publicToPrivate\",\n    \"transfer_public_to_private\",\n    \"transferPublicToPrivate\",\n]);\n\nfunction logAndThrow(message: string): Error {\n    console.error(message);\n    throw message;\n}\n\nimport { Account } from \"./account\";\nimport { AleoNetworkClient, ProgramImports } from \"./network-client\";\nimport { Block } from \"./models/block\";\nimport { Execution } from \"./models/execution\";\nimport { Input } from \"./models/input\";\nimport { Output } from \"./models/output\";\nimport { TransactionModel } from \"./models/transactionModel\";\nimport { Transition } from \"./models/transition\";\nimport {\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    CachedKeyPair,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    KeySearchParams,\n} from \"./function-key-provider\";\nimport {\n    OfflineKeyProvider,\n    OfflineSearchParams\n} from \"./offline-key-provider\";\nimport {\n    BlockHeightSearch,\n    NetworkRecordProvider,\n    RecordProvider,\n    RecordSearchParams,\n} from \"./record-provider\";\n\n// @TODO: This function is no longer needed, remove it.\nasync function initializeWasm() {\n    console.warn(\"initializeWasm is deprecated, you no longer need to use it\");\n}\n\nexport { createAleoWorker } from \"./managed-worker\";\n\nexport { ProgramManager } from \"./program-manager\";\n\nexport {\n    Address,\n    Execution as FunctionExecution,\n    ExecutionResponse,\n    Field,\n    OfflineQuery,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProgramManager as ProgramManagerBase,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    Signature,\n    Transaction,\n    VerifyingKey,\n    ViewKey,\n    initThreadPool,\n    verifyFunctionExecution,\n} from \"@provablehq/wasm\";\n\nexport { initializeWasm };\n\nexport {\n    Account,\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    AleoNetworkClient,\n    Block,\n    BlockHeightSearch,\n    CachedKeyPair,\n    Execution,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    Input,\n    KeySearchParams,\n    NetworkRecordProvider,\n    ProgramImports,\n    OfflineKeyProvider,\n    OfflineSearchParams,\n    Output,\n    RecordProvider,\n    RecordSearchParams,\n    TransactionModel,\n    Transition,\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PRIVATE_TRANSFER_TYPES,\n    PUBLIC_TRANSFER,\n    PUBLIC_TRANSFER_AS_SIGNER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n};\n","function spawnWorker(url, module, memory, address) {\n        return new Promise((resolve) => {\n            const worker = new Worker(url, {\n                type: \"module\",\n            });\n\n            worker.addEventListener(\"message\", (event) => {\n                // This is needed in Node to wait one extra tick, so that way\n                // the Worker can fully initialize before we return.\n                setTimeout(() => {\n                    resolve(worker);\n\n                    // When running in Node, this allows the process to exit\n                    // even though the Worker is still running.\n                    if (worker.unref) {\n                        worker.unref();\n                    }\n                }, 0);\n            }, {\n                capture: true,\n                once: true,\n            });\n\n            worker.postMessage({\n                module,\n                memory,\n                address,\n            });\n        });\n    }\n\nlet wasm;\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); }\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().slice(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_3.get(state.dtor)(state.a, state.b);\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_3.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\nfunction __wbg_adapter_34(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h442b5e922f6f9710(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* Verify an execution with a single function and a single transition. Executions with multiple\n* transitions or functions will fail to verify. Also, this does not verify that the state root of\n* the execution is included in the Aleo Network ledger.\n*\n* @param {Execution} execution The function execution to verify\n* @param {VerifyingKey} verifying_key The verifying key for the function\n* @param {Program} program The program that the function execution belongs to\n* @param {String} function_id The name of the function that was executed\n* @returns {boolean} True if the execution is valid, false otherwise\n* @param {Execution} execution\n* @param {VerifyingKey} verifying_key\n* @param {Program} program\n* @param {string} function_id\n* @returns {boolean}\n*/\nfunction verifyFunctionExecution(execution, verifying_key, program, function_id) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(execution, Execution);\n        _assertClass(verifying_key, VerifyingKey);\n        _assertClass(program, Program);\n        const ptr0 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.verifyFunctionExecution(retptr, execution.__wbg_ptr, verifying_key.__wbg_ptr, program.__wbg_ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return r0 !== 0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nlet cachedBigInt64Memory0 = null;\n\nfunction getBigInt64Memory0() {\n    if (cachedBigInt64Memory0 === null || cachedBigInt64Memory0.buffer !== wasm.memory.buffer) {\n        cachedBigInt64Memory0 = new BigInt64Array(wasm.memory.buffer);\n    }\n    return cachedBigInt64Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {number} receiver\n*/\nfunction runRayonThread(receiver) {\n    wasm.runRayonThread(receiver);\n}\n\n/**\n* @param {URL} url\n* @param {number} num_threads\n* @returns {Promise<void>}\n*/\nfunction initThreadPool(url, num_threads) {\n    const ret = wasm.initThreadPool(addHeapObject(url), num_threads);\n    return takeObject(ret);\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_279(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__h5ab12ffe4b82d47a(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\nconst AddressFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_address_free(ptr >>> 0));\n/**\n* Public address of an Aleo account\n*/\nclass Address {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Address.prototype);\n        obj.__wbg_ptr = ptr;\n        AddressFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AddressFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n    * Derive an Aleo address from a private key\n    *\n    * @param {PrivateKey} private_key The private key to derive the address from\n    * @returns {Address} Address corresponding to the private key\n    * @param {PrivateKey} private_key\n    * @returns {Address}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.address_from_private_key(private_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Derive an Aleo address from a view key\n    *\n    * @param {ViewKey} view_key The view key to derive the address from\n    * @returns {Address} Address corresponding to the view key\n    * @param {ViewKey} view_key\n    * @returns {Address}\n    */\n    static from_view_key(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.address_from_view_key(view_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Create an aleo address object from a string representation of an address\n    *\n    * @param {string} address String representation of an addressm\n    * @returns {Address} Address\n    * @param {string} address\n    * @returns {Address}\n    */\n    static from_string(address) {\n        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.address_from_string(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Get a string representation of an Aleo address object\n    *\n    * @param {Address} Address\n    * @returns {string} String representation of the address\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Verify a signature for a message signed by the address\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {boolean} Boolean representing whether or not the signature is valid\n    * @param {Uint8Array} message\n    * @param {Signature} signature\n    * @returns {boolean}\n    */\n    verify(message, signature) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Signature);\n        const ret = wasm.address_verify(this.__wbg_ptr, ptr0, len0, signature.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst ExecutionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_execution_free(ptr >>> 0));\n/**\n* Execution of an Aleo program.\n*/\nclass Execution {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Execution.prototype);\n        obj.__wbg_ptr = ptr;\n        ExecutionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ExecutionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_execution_free(ptr);\n    }\n    /**\n    * Returns the string representation of the execution.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.execution_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates an execution object from a string representation of an execution.\n    * @param {string} execution\n    * @returns {Execution}\n    */\n    static fromString(execution) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(execution, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.execution_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Execution.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ExecutionResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_executionresponse_free(ptr >>> 0));\n/**\n* Webassembly Representation of an Aleo function execution response\n*\n* This object is returned by the execution of an Aleo function off-chain. It provides methods for\n* retrieving the outputs of the function execution.\n*/\nclass ExecutionResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ExecutionResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        ExecutionResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ExecutionResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_executionresponse_free(ptr);\n    }\n    /**\n    * Get the outputs of the executed function\n    *\n    * @returns {Array} Array of strings representing the outputs of the function\n    * @returns {Array<any>}\n    */\n    getOutputs() {\n        const ret = wasm.executionresponse_getOutputs(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns the execution object if present, null if otherwise.\n    *\n    * @returns {Execution | undefined} The execution object if present, null if otherwise\n    * @returns {Execution | undefined}\n    */\n    getExecution() {\n        const ret = wasm.executionresponse_getExecution(this.__wbg_ptr);\n        return ret === 0 ? undefined : Execution.__wrap(ret);\n    }\n    /**\n    * Returns the program keys if present\n    * @returns {KeyPair}\n    */\n    getKeys() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.executionresponse_getKeys(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the proving_key if the proving key was cached in the Execution response.\n    * Note the proving key is removed from the response object after the first call to this\n    * function. Subsequent calls will return null.\n    *\n    * @returns {ProvingKey | undefined} The proving key\n    * @returns {ProvingKey | undefined}\n    */\n    getProvingKey() {\n        const ret = wasm.executionresponse_getProvingKey(this.__wbg_ptr);\n        return ret === 0 ? undefined : ProvingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying_key associated with the program\n    *\n    * @returns {VerifyingKey} The verifying key\n    * @returns {VerifyingKey}\n    */\n    getVerifyingKey() {\n        const ret = wasm.executionresponse_getVerifyingKey(this.__wbg_ptr);\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the function identifier\n    * @returns {string}\n    */\n    getFunctionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.executionresponse_getFunctionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the program\n    * @returns {Program}\n    */\n    getProgram() {\n        const ret = wasm.executionresponse_getProgram(this.__wbg_ptr);\n        return Program.__wrap(ret);\n    }\n}\n\nconst FieldFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_field_free(ptr >>> 0));\n/**\n*/\nclass Field {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Field.prototype);\n        obj.__wbg_ptr = ptr;\n        FieldFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FieldFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_field_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.field_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} field\n    * @returns {Field}\n    */\n    static fromString(field) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(field, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.field_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Field.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst KeyPairFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keypair_free(ptr >>> 0));\n/**\n* Key pair object containing both the function proving and verifying keys\n*/\nclass KeyPair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeyPair.prototype);\n        obj.__wbg_ptr = ptr;\n        KeyPairFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeyPairFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keypair_free(ptr);\n    }\n    /**\n    * Create new key pair from proving and verifying keys\n    *\n    * @param {ProvingKey} proving_key Proving key corresponding to a function in an Aleo program\n    * @param {VerifyingKey} verifying_key Verifying key corresponding to a function in an Aleo program\n    * @returns {KeyPair} Key pair object containing both the function proving and verifying keys\n    * @param {ProvingKey} proving_key\n    * @param {VerifyingKey} verifying_key\n    */\n    constructor(proving_key, verifying_key) {\n        _assertClass(proving_key, ProvingKey);\n        var ptr0 = proving_key.__destroy_into_raw();\n        _assertClass(verifying_key, VerifyingKey);\n        var ptr1 = verifying_key.__destroy_into_raw();\n        const ret = wasm.keypair_new(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        return this;\n    }\n    /**\n    * Get the proving key. This method will remove the proving key from the key pair\n    *\n    * @returns {ProvingKey | Error}\n    * @returns {ProvingKey}\n    */\n    provingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_provingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the verifying key. This method will remove the verifying key from the key pair\n    *\n    * @returns {VerifyingKey | Error}\n    * @returns {VerifyingKey}\n    */\n    verifyingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_verifyingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst MetadataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_metadata_free(ptr >>> 0));\n/**\n*/\nclass Metadata {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Metadata.prototype);\n        obj.__wbg_ptr = ptr;\n        MetadataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MetadataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_metadata_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    get locator() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_locator(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set locator(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_locator(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    get prover() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_prover(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set prover(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_prover(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    get verifier() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_verifier(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set verifier(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_verifier(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    get verifyingKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_verifyingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set verifyingKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_verifyingKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    static baseUrl() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.metadata_baseUrl(retptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static bond_public() {\n        const ret = wasm.metadata_bond_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static bond_validator() {\n        const ret = wasm.metadata_bond_validator();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static claim_unbond_public() {\n        const ret = wasm.metadata_claim_unbond_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static fee_private() {\n        const ret = wasm.metadata_fee_private();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static fee_public() {\n        const ret = wasm.metadata_fee_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static inclusion() {\n        const ret = wasm.metadata_inclusion();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static join() {\n        const ret = wasm.metadata_join();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static set_validator_state() {\n        const ret = wasm.metadata_set_validator_state();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static split() {\n        const ret = wasm.metadata_split();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_private() {\n        const ret = wasm.metadata_transfer_private();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_private_to_public() {\n        const ret = wasm.metadata_transfer_private_to_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_public() {\n        const ret = wasm.metadata_transfer_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_public_as_signer() {\n        const ret = wasm.metadata_transfer_public_as_signer();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_public_to_private() {\n        const ret = wasm.metadata_transfer_public_to_private();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static unbond_public() {\n        const ret = wasm.metadata_unbond_public();\n        return Metadata.__wrap(ret);\n    }\n}\n\nconst OfflineQueryFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_offlinequery_free(ptr >>> 0));\n/**\n* An offline query object used to insert the global state root and state paths needed to create\n* a valid inclusion proof offline.\n*/\nclass OfflineQuery {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OfflineQuery.prototype);\n        obj.__wbg_ptr = ptr;\n        OfflineQueryFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OfflineQueryFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_offlinequery_free(ptr);\n    }\n    /**\n    * Creates a new offline query object. The state root is required to be passed in as a string\n    * @param {string} state_root\n    */\n    constructor(state_root) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(state_root, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.offlinequery_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Add a new state path to the offline query object.\n    *\n    * @param {string} commitment: The commitment corresponding to a record inpout\n    * @param {string} state_path: The state path corresponding to the commitment\n    * @param {string} commitment\n    * @param {string} state_path\n    */\n    addStatePath(commitment, state_path) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(commitment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(state_path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.offlinequery_addStatePath(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a json string representation of the offline query object\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.offlinequery_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create an offline query object from a json string representation\n    * @param {string} s\n    * @returns {OfflineQuery}\n    */\n    static fromString(s) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.offlinequery_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return OfflineQuery.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst PrivateKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_privatekey_free(ptr >>> 0));\n/**\n* Private key of an Aleo account\n*/\nclass PrivateKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKey.prototype);\n        obj.__wbg_ptr = ptr;\n        PrivateKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PrivateKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n    * Generate a new private key using a cryptographically secure random number generator\n    *\n    * @returns {PrivateKey}\n    */\n    constructor() {\n        const ret = wasm.privatekey_new();\n        this.__wbg_ptr = ret >>> 0;\n        return this;\n    }\n    /**\n    * Get a private key from a series of unchecked bytes\n    *\n    * @param {Uint8Array} seed Unchecked 32 byte long Uint8Array acting as the seed for the private key\n    * @returns {PrivateKey}\n    * @param {Uint8Array} seed\n    * @returns {PrivateKey}\n    */\n    static from_seed_unchecked(seed) {\n        const ptr0 = passArray8ToWasm0(seed, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_from_seed_unchecked(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a string representation of a private key\n    *\n    * @param {string} seed String representation of a private key\n    * @returns {PrivateKey}\n    * @param {string} private_key\n    * @returns {PrivateKey}\n    */\n    static from_string(private_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(private_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_string(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the private key. This function should be used very carefully\n    * as it exposes the private key plaintext\n    *\n    * @returns {string} String representation of a private key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the view key corresponding to the private key\n    *\n    * @returns {ViewKey}\n    * @returns {ViewKey}\n    */\n    to_view_key() {\n        const ret = wasm.privatekey_to_view_key(this.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get the address corresponding to the private key\n    *\n    * @returns {Address}\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.privatekey_to_address(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Sign a message with the private key\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {Signature} Signature generated by signing the message with the address\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    sign(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(this.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a new randomly generated private key ciphertext using a secret. The secret is sensitive\n    * and will be needed to decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext | Error} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static newEncrypted(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_newEncrypted(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt an existing private key with a secret. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext | Error} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    toCiphertext(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get private key from a private key ciphertext and secret originally used to encrypt it\n    *\n    * @param {PrivateKeyCiphertext} ciphertext Ciphertext representation of the private key\n    * @param {string} secret Secret originally used to encrypt the private key\n    * @returns {PrivateKey | Error} Private key\n    * @param {PrivateKeyCiphertext} ciphertext\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    static fromPrivateKeyCiphertext(ciphertext, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(ciphertext, PrivateKeyCiphertext);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_fromPrivateKeyCiphertext(retptr, ciphertext.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst PrivateKeyCiphertextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_privatekeyciphertext_free(ptr >>> 0));\n/**\n* Private Key in ciphertext form\n*/\nclass PrivateKeyCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKeyCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n        PrivateKeyCiphertextFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PrivateKeyCiphertextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekeyciphertext_free(ptr);\n    }\n    /**\n    * Encrypt a private key using a secret string. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {PrivateKey} private_key Private key to encrypt\n    * @param {string} secret Secret to encrypt the private key with\n    * @returns {PrivateKeyCiphertext | Error} Private key ciphertext\n    * @param {PrivateKey} private_key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static encryptPrivateKey(private_key, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, private_key.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Decrypts a private ciphertext using a secret string. This must be the same secret used to\n    * encrypt the private key\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKey | Error} Private key\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    decryptToPrivateKey(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_decryptToPrivateKey(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the ciphertext string\n    *\n    * @returns {string} Ciphertext string\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekeyciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates a PrivateKeyCiphertext from a string\n    *\n    * @param {string} ciphertext Ciphertext string\n    * @returns {PrivateKeyCiphertext | Error} Private key ciphertext\n    * @param {string} ciphertext\n    * @returns {PrivateKeyCiphertext}\n    */\n    static fromString(ciphertext) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ProgramFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_program_free(ptr >>> 0));\n/**\n* Webassembly Representation of an Aleo program\n*/\nclass Program {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Program.prototype);\n        obj.__wbg_ptr = ptr;\n        ProgramFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ProgramFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_program_free(ptr);\n    }\n    /**\n    * Create a program from a program string\n    *\n    * @param {string} program Aleo program source code\n    * @returns {Program | Error} Program object\n    * @param {string} program\n    * @returns {Program}\n    */\n    static fromString(program) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the program\n    *\n    * @returns {string} String containing the program source code\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Determine if a function is present in the program\n    *\n    * @param {string} functionName Name of the function to check for\n    * @returns {boolean} True if the program is valid, false otherwise\n    * @param {string} function_name\n    * @returns {boolean}\n    */\n    hasFunction(function_name) {\n        const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.program_hasFunction(this.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get javascript array of functions names in the program\n    *\n    * @returns {Array} Array of all function names present in the program\n    *\n    * @example\n    * const expected_functions = [\n    *   \"mint\",\n    *   \"transfer_private\",\n    *   \"transfer_private_to_public\",\n    *   \"transfer_public\",\n    *   \"transfer_public_to_private\",\n    *   \"join\",\n    *   \"split\",\n    *   \"fee\"\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_functions = credits_program.getFunctions();\n    * console.log(credits_functions === expected_functions); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getFunctions() {\n        const ret = wasm.program_getFunctions(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get a javascript object representation of the function inputs and types. This can be used\n    * to generate a web form to capture user inputs for an execution of a function.\n    *\n    * @param {string} function_name Name of the function to get inputs for\n    * @returns {Array | Error} Array of function inputs\n    *\n    * @example\n    * const expected_inputs = [\n    *     {\n    *       type:\"record\",\n    *       visibility:\"private\",\n    *       record:\"credits\",\n    *       members:[\n    *         {\n    *           name:\"microcredits\",\n    *           type:\"u64\",\n    *           visibility:\"private\"\n    *         }\n    *       ],\n    *       register:\"r0\"\n    *     },\n    *     {\n    *       type:\"address\",\n    *       visibility:\"private\",\n    *       register:\"r1\"\n    *     },\n    *     {\n    *       type:\"u64\",\n    *       visibility:\"private\",\n    *       register:\"r2\"\n    *     }\n    * ];\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const transfer_function_inputs = credits_program.getFunctionInputs(\"transfer_private\");\n    * console.log(transfer_function_inputs === expected_inputs); // Output should be \"true\"\n    * @param {string} function_name\n    * @returns {Array<any>}\n    */\n    getFunctionInputs(function_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getFunctionInputs(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a the list of a program's mappings and the names/types of their keys and values.\n    *\n    * @returns {Array | Error} - An array of objects representing the mappings in the program\n    * @example\n    * const expected_mappings = [\n    *    {\n    *       name: \"account\",\n    *       key_name: \"owner\",\n    *       key_type: \"address\",\n    *       value_name: \"microcredits\",\n    *       value_type: \"u64\"\n    *    }\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_mappings = credits_program.getMappings();\n    * console.log(credits_mappings === expected_mappings); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getMappings() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_getMappings(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program record and its types\n    *\n    * @param {string} record_name Name of the record to get members for\n    * @returns {Object | Error} Object containing the record name, type, and members\n    *\n    * @example\n    *\n    * const expected_record = {\n    *     type: \"record\",\n    *     record: \"Credits\",\n    *     members: [\n    *       {\n    *         name: \"owner\",\n    *         type: \"address\",\n    *         visibility: \"private\"\n    *       },\n    *       {\n    *         name: \"microcredits\",\n    *         type: \"u64\",\n    *         visibility: \"private\"\n    *       }\n    *     ];\n    *  };\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_record = credits_program.getRecordMembers(\"Credits\");\n    * console.log(credits_record === expected_record); // Output should be \"true\"\n    * @param {string} record_name\n    * @returns {object}\n    */\n    getRecordMembers(record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getRecordMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program struct and its types\n    *\n    * @param {string} struct_name Name of the struct to get members for\n    * @returns {Array | Error} Array containing the struct members\n    *\n    * @example\n    *\n    * const STRUCT_PROGRAM = \"program token_issue.aleo;\n    *\n    * struct token_metadata:\n    *     network as u32;\n    *     version as u32;\n    *\n    * struct token:\n    *     token_id as u32;\n    *     metadata as token_metadata;\n    *\n    * function no_op:\n    *    input r0 as u64;\n    *    output r0 as u64;\"\n    *\n    * const expected_struct_members = [\n    *    {\n    *      name: \"token_id\",\n    *      type: \"u32\",\n    *    },\n    *    {\n    *      name: \"metadata\",\n    *      type: \"struct\",\n    *      struct_id: \"token_metadata\",\n    *      members: [\n    *       {\n    *         name: \"network\",\n    *         type: \"u32\",\n    *       }\n    *       {\n    *         name: \"version\",\n    *         type: \"u32\",\n    *       }\n    *     ]\n    *   }\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(STRUCT_PROGRAM);\n    * const struct_members = program.getStructMembers(\"token\");\n    * console.log(struct_members === expected_struct_members); // Output should be \"true\"\n    * @param {string} struct_name\n    * @returns {Array<any>}\n    */\n    getStructMembers(struct_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(struct_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getStructMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the credits.aleo program\n    *\n    * @returns {Program} The credits.aleo program\n    * @returns {Program}\n    */\n    static getCreditsProgram() {\n        const ret = wasm.program_getCreditsProgram();\n        return Program.__wrap(ret);\n    }\n    /**\n    * Get the id of the program\n    *\n    * @returns {string} The id of the program\n    * @returns {string}\n    */\n    id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_id(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get a unique address of the program\n    *\n    * @returns {Address} The address of the program\n    * @returns {Address}\n    */\n    address() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_address(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Address.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Determine equality with another program\n    *\n    * @param {Program} other The other program to compare\n    * @returns {boolean} True if the programs are equal, false otherwise\n    * @param {Program} other\n    * @returns {boolean}\n    */\n    isEqual(other) {\n        _assertClass(other, Program);\n        const ret = wasm.program_isEqual(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get program_imports\n    *\n    * @returns {Array} The program imports\n    *\n    * @example\n    *\n    * const DOUBLE_TEST = \"import multiply_test.aleo;\n    *\n    * program double_test.aleo;\n    *\n    * function double_it:\n    *     input r0 as u32.private;\n    *     call multiply_test.aleo/multiply 2u32 r0 into r1;\n    *     output r1 as u32.private;\";\n    *\n    * const expected_imports = [\n    *    \"multiply_test.aleo\"\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(DOUBLE_TEST_PROGRAM);\n    * const imports = program.getImports();\n    * console.log(imports === expected_imports); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getImports() {\n        const ret = wasm.program_getImports(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst ProgramManagerFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_programmanager_free(ptr >>> 0));\n/**\n*/\nclass ProgramManager {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ProgramManagerFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_programmanager_free(ptr);\n    }\n    /**\n    * Deploy an Aleo program\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being deployed\n    * @param imports A javascript object holding the source code of any imported programs in the\n    * form \\{\"program_name1\": \"program_source_code\", \"program_name2\": \"program_source_code\", ..\\}.\n    * Note that all imported programs must be deployed on chain before the main program in order\n    * for the deployment to succeed\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the program deployment in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildDeploymentTransaction(private_key, program, fee_credits, fee_record, url, imports, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        let ptr1 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr1 = fee_record.__destroy_into_raw();\n        }\n        var ptr2 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr3 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr4 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildDeploymentTransaction(private_key.__wbg_ptr, ptr0, len0, fee_credits, ptr1, ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the fee for a program deployment\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The source code of the program being deployed\n    * @param imports (optional) Provide a list of imports to use for the deployment fee estimation\n    * in the form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @returns {u64 | Error}\n    * @param {string} program\n    * @param {object | undefined} [imports]\n    * @returns {Promise<bigint>}\n    */\n    static estimateDeploymentFee(program, imports) {\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_estimateDeploymentFee(ptr0, len0, isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the component of the deployment cost which comes from the fee for the program name.\n    * Note that this cost does not represent the entire cost of deployment. It is additional to\n    * the cost of the size (in bytes) of the deployment.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param name The name of the program to be deployed\n    * @returns {u64 | Error}\n    * @param {string} name\n    * @returns {bigint}\n    */\n    static estimateProgramNameCost(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateProgramNameCost(retptr, ptr0, len0);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Execute an arbitrary function locally\n    *\n    * @param {PrivateKey} private_key The private key of the sender\n    * @param {string} program The source code of the program being executed\n    * @param {string} function The name of the function to execute\n    * @param {Array} inputs A javascript array of inputs to the function\n    * @param {boolean} prove_execution If true, the execution will be proven and an execution object\n    * containing the proof and the encrypted inputs and outputs needed to verify the proof offline\n    * will be returned.\n    * @param {boolean} cache Cache the proving and verifying keys in the Execution response.\n    * If this is set to 'true' the keys synthesized will be stored in the Execution Response\n    * and the `ProvingKey` and `VerifyingKey` can be retrieved from the response via the `.getKeys()`\n    * method.\n    * @param {Object | undefined} imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param {ProvingKey | undefined} proving_key (optional) Provide a verifying key to use for the function execution\n    * @param {VerifyingKey | undefined} verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {boolean} prove_execution\n    * @param {boolean} cache\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [proving_key]\n    * @param {VerifyingKey | undefined} [verifying_key]\n    * @param {string | undefined} [url]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<ExecutionResponse>}\n    */\n    static executeFunctionOffline(private_key, program, _function, inputs, prove_execution, cache, imports, proving_key, verifying_key, url, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr2 = proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr3 = verifying_key.__destroy_into_raw();\n        }\n        var ptr4 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_executeFunctionOffline(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), prove_execution, cache, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr2, ptr3, ptr4, len4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Execute Aleo function and create an Aleo execution transaction\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being executed\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * If this is set to 'true' the keys synthesized (or passed in as optional parameters via the\n    * `proving_key` and `verifying_key` arguments) will be stored in the ProgramManager's memory\n    * and used for subsequent transactions. If this is set to 'false' the proving and verifying\n    * keys will be deallocated from memory after the transaction is executed.\n    * @param imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the function execution\n    * @param verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [proving_key]\n    * @param {VerifyingKey | undefined} [verifying_key]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildExecutionTransaction(private_key, program, _function, inputs, fee_credits, fee_record, url, imports, proving_key, verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        var ptr3 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr4 = proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr5 = verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr8 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildExecutionTransaction(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), fee_credits, ptr2, ptr3, len3, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr4, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate Fee for Aleo function execution. Note if \"cache\" is set to true, the proving and\n    * verifying keys will be stored in the ProgramManager's memory and used for subsequent\n    * program executions.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program to estimate the execution fee for\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the fee estimation in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the fee estimation\n    * @param verifying_key (optional) Provide a verifying key to use for the fee estimation\n    * @returns {u64 | Error} Fee in microcredits\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {string | undefined} [url]\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [proving_key]\n    * @param {VerifyingKey | undefined} [verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<bigint>}\n    */\n    static estimateExecutionFee(private_key, program, _function, inputs, url, imports, proving_key, verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr3 = proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr4 = verifying_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_estimateExecutionFee(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the finalize fee component for executing a function. This fee is additional to the\n    * size of the execution of the program in bytes. If the function does not have a finalize\n    * step, then the finalize fee is 0.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The program containing the function to estimate the finalize fee for\n    * @param function The function to estimate the finalize fee for\n    * @returns {u64 | Error} Fee in microcredits\n    * @param {string} program\n    * @param {string} _function\n    * @returns {bigint}\n    */\n    static estimateFinalizeFee(program, _function) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateFinalizeFee(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Join two records together to create a new record with an amount of credits equal to the sum\n    * of the credits of the two original records\n    *\n    * @param private_key The private key of the sender\n    * @param record_1 The first record to combine\n    * @param record_2 The second record to combine\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param join_proving_key (optional) Provide a proving key to use for the join function\n    * @param join_verifying_key (optional) Provide a verifying key to use for the join function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {RecordPlaintext} record_1\n    * @param {RecordPlaintext} record_2\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {ProvingKey | undefined} [join_proving_key]\n    * @param {VerifyingKey | undefined} [join_verifying_key]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildJoinTransaction(private_key, record_1, record_2, fee_credits, fee_record, url, join_proving_key, join_verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(record_1, RecordPlaintext);\n        var ptr0 = record_1.__destroy_into_raw();\n        _assertClass(record_2, RecordPlaintext);\n        var ptr1 = record_2.__destroy_into_raw();\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        var ptr3 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(join_proving_key)) {\n            _assertClass(join_proving_key, ProvingKey);\n            ptr4 = join_proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(join_verifying_key)) {\n            _assertClass(join_verifying_key, VerifyingKey);\n            ptr5 = join_verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr8 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildJoinTransaction(private_key.__wbg_ptr, ptr0, ptr1, fee_credits, ptr2, ptr3, len3, ptr4, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Split an Aleo credits record into two separate records. This function does not require a fee.\n    *\n    * @param private_key The private key of the sender\n    * @param split_amount The amount of the credit split. This amount will be subtracted from the\n    * value of the record and two new records will be created with the split amount and the remainder\n    * @param amount_record The record to split\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param split_proving_key (optional) Provide a proving key to use for the split function\n    * @param split_verifying_key (optional) Provide a verifying key to use for the split function\n    * @returns {Transaction | Error} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {number} split_amount\n    * @param {RecordPlaintext} amount_record\n    * @param {string | undefined} [url]\n    * @param {ProvingKey | undefined} [split_proving_key]\n    * @param {VerifyingKey | undefined} [split_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildSplitTransaction(private_key, split_amount, amount_record, url, split_proving_key, split_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(amount_record, RecordPlaintext);\n        var ptr0 = amount_record.__destroy_into_raw();\n        var ptr1 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(split_proving_key)) {\n            _assertClass(split_proving_key, ProvingKey);\n            ptr2 = split_proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(split_verifying_key)) {\n            _assertClass(split_verifying_key, VerifyingKey);\n            ptr3 = split_verifying_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr4 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildSplitTransaction(private_key.__wbg_ptr, split_amount, ptr0, ptr1, len1, ptr2, ptr3, ptr4);\n        return takeObject(ret);\n    }\n    /**\n    * Send credits from one Aleo account to another\n    *\n    * @param private_key The private key of the sender\n    * @param amount_credits The amount of credits to send\n    * @param recipient The recipient of the transaction\n    * @param transfer_type The type of the transfer (options: \"private\", \"public\", \"private_to_public\", \"public_to_private\")\n    * @param amount_record The record to fund the amount from\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param transfer_verifying_key (optional) Provide a verifying key to use for the transfer\n    * function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {number} amount_credits\n    * @param {string} recipient\n    * @param {string} transfer_type\n    * @param {string | undefined} caller\n    * @param {RecordPlaintext | undefined} amount_record\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {ProvingKey | undefined} [transfer_proving_key]\n    * @param {VerifyingKey | undefined} [transfer_verifying_key]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildTransferTransaction(private_key, amount_credits, recipient, transfer_type, caller, amount_record, fee_credits, fee_record, url, transfer_proving_key, transfer_verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(recipient, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(transfer_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(caller) ? 0 : passStringToWasm0(caller, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(amount_record)) {\n            _assertClass(amount_record, RecordPlaintext);\n            ptr3 = amount_record.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr4 = fee_record.__destroy_into_raw();\n        }\n        var ptr5 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len5 = WASM_VECTOR_LEN;\n        let ptr6 = 0;\n        if (!isLikeNone(transfer_proving_key)) {\n            _assertClass(transfer_proving_key, ProvingKey);\n            ptr6 = transfer_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(transfer_verifying_key)) {\n            _assertClass(transfer_verifying_key, VerifyingKey);\n            ptr7 = transfer_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr8 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr9 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr9 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr10 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr10 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildTransferTransaction(private_key.__wbg_ptr, amount_credits, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, fee_credits, ptr4, ptr5, len5, ptr6, ptr7, ptr8, ptr9, ptr10);\n        return takeObject(ret);\n    }\n    /**\n    * Synthesize proving and verifying keys for a program\n    *\n    * @param program {string} The program source code of the program to synthesize keys for\n    * @param function_id {string} The function to synthesize keys for\n    * @param inputs {Array} The inputs to the function\n    * @param imports {Object | undefined} The imports for the program\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} function_id\n    * @param {Array<any>} inputs\n    * @param {object | undefined} [imports]\n    * @returns {Promise<KeyPair>}\n    */\n    static synthesizeKeyPair(private_key, program, function_id, inputs, imports) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_synthesizeKeyPair(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n}\n\nconst ProvingKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_provingkey_free(ptr >>> 0));\n/**\n* Proving key for a function within an Aleo program\n*/\nclass ProvingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ProvingKey.prototype);\n        obj.__wbg_ptr = ptr;\n        ProvingKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ProvingKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_provingkey_free(ptr);\n    }\n    /**\n    * Verify if the proving key is for the bond_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"bond_public_proving_key.bin\");\n    * provingKey.isBondPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the bond_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isBondPublicProver() {\n        const ret = wasm.provingkey_isBondPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the bond_validator function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"bond_validator_proving_key.bin\");\n    * provingKey.isBondPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the bond_validator function, false if otherwise\n    * @returns {boolean}\n    */\n    isBondValidatorProver() {\n        const ret = wasm.provingkey_isBondValidatorProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the claim_unbond function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"claim_unbond_proving_key.bin\");\n    * provingKey.isClaimUnbondProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the claim_unbond function, false if otherwise\n    * @returns {boolean}\n    */\n    isClaimUnbondPublicProver() {\n        const ret = wasm.provingkey_isClaimUnbondPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the fee_private function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"fee_private_proving_key.bin\");\n    * provingKey.isFeePrivateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the fee_private function, false if otherwise\n    * @returns {boolean}\n    */\n    isFeePrivateProver() {\n        const ret = wasm.provingkey_isFeePrivateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the fee_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"fee_public_proving_key.bin\");\n    * provingKey.isFeePublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the fee_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isFeePublicProver() {\n        const ret = wasm.provingkey_isFeePublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the inclusion function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"inclusion_proving_key.bin\");\n    * provingKey.isInclusionProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the inclusion function, false if otherwise\n    * @returns {boolean}\n    */\n    isInclusionProver() {\n        const ret = wasm.provingkey_isInclusionProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the join function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"join_proving_key.bin\");\n    * provingKey.isJoinProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the join function, false if otherwise\n    * @returns {boolean}\n    */\n    isJoinProver() {\n        const ret = wasm.provingkey_isJoinProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the set_validator_state function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"set_validator_set_proving_key.bin\");\n    * provingKey.isSetValidatorStateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the set_validator_state function, false if otherwise\n    * @returns {boolean}\n    */\n    isSetValidatorStateProver() {\n        const ret = wasm.provingkey_isSetValidatorStateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the split function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"split_proving_key.bin\");\n    * provingKey.isSplitProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the split function, false if otherwise\n    * @returns {boolean}\n    */\n    isSplitProver() {\n        const ret = wasm.provingkey_isSplitProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_private function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_private_proving_key.bin\");\n    * provingKey.isTransferPrivateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_private function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPrivateProver() {\n        const ret = wasm.provingkey_isTransferPrivateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_private_to_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_private_to_public_proving_key.bin\");\n    * provingKey.isTransferPrivateToPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_private_to_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPrivateToPublicProver() {\n        const ret = wasm.provingkey_isTransferPrivateToPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_public_proving_key.bin\");\n    * provingKey.isTransferPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPublicProver() {\n        const ret = wasm.provingkey_isTransferPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_public_as_signer function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_public_as_signer_proving_key.bin\");\n    * provingKey.isTransferPublicAsSignerProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPublicAsSignerProver() {\n        const ret = wasm.provingkey_isTransferPublicAsSignerProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_public_to_private function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_public_to_private_proving_key.bin\");\n    * provingKey.isTransferPublicToPrivateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_public_to_private function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPublicToPrivateProver() {\n        const ret = wasm.provingkey_isTransferPublicToPrivateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the unbond_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"unbond_public.bin\");\n    * provingKey.isUnbondPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the unbond_public_prover function, false if otherwise\n    * @returns {boolean}\n    */\n    isUnbondPublicProver() {\n        const ret = wasm.provingkey_isUnbondPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Return the checksum of the proving key\n    *\n    * @returns {string} Checksum of the proving key\n    * @returns {string}\n    */\n    checksum() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_checksum(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a copy of the proving key\n    *\n    * @returns {ProvingKey} A copy of the proving key\n    * @returns {ProvingKey}\n    */\n    copy() {\n        const ret = wasm.provingkey_copy(this.__wbg_ptr);\n        return ProvingKey.__wrap(ret);\n    }\n    /**\n    * Construct a new proving key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte array representation of a proving key\n    * @returns {ProvingKey | Error}\n    * @param {Uint8Array} bytes\n    * @returns {ProvingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a proving key from string\n    *\n    * @param {string | Error} String representation of the proving key\n    * @param {string} string\n    * @returns {ProvingKey}\n    */\n    static fromString(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the byte representation of a proving key\n    *\n    * @returns {Uint8Array | Error} Byte array representation of a proving key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the proving key\n    *\n    * @returns {string} String representation of the proving key\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RecordCiphertextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_recordciphertext_free(ptr >>> 0));\n/**\n* Encrypted Aleo record\n*/\nclass RecordCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n        RecordCiphertextFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RecordCiphertextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordciphertext_free(ptr);\n    }\n    /**\n    * Create a record ciphertext from a string\n    *\n    * @param {string} record String representation of a record ciphertext\n    * @returns {RecordCiphertext | Error} Record ciphertext\n    * @param {string} record\n    * @returns {RecordCiphertext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the string reprensentation of the record ciphertext\n    *\n    * @returns {string} String representation of the record ciphertext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Decrypt the record ciphertext into plaintext using the view key. The record will only\n    * decrypt if the record was encrypted by the account corresponding to the view key\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {RecordPlaintext | Error} Record plaintext object\n    * @param {ViewKey} view_key\n    * @returns {RecordPlaintext}\n    */\n    decrypt(view_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(view_key, ViewKey);\n            wasm.recordciphertext_decrypt(retptr, this.__wbg_ptr, view_key.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Determines if the account corresponding to the view key is the owner of the record\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {boolean}\n    * @param {ViewKey} view_key\n    * @returns {boolean}\n    */\n    isOwner(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.recordciphertext_isOwner(this.__wbg_ptr, view_key.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst RecordPlaintextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_recordplaintext_free(ptr >>> 0));\n/**\n* Plaintext representation of an Aleo record\n*/\nclass RecordPlaintext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordPlaintext.prototype);\n        obj.__wbg_ptr = ptr;\n        RecordPlaintextFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RecordPlaintextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordplaintext_free(ptr);\n    }\n    /**\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {Field}\n    */\n    commitment(program_id, record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_commitment(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Field.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return a record plaintext from a string.\n    *\n    * @param {string} record String representation of a plaintext representation of an Aleo record\n    * @returns {RecordPlaintext | Error} Record plaintext\n    * @param {string} record\n    * @returns {RecordPlaintext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the record plaintext string\n    *\n    * @returns {string} String representation of the record plaintext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the amount of microcredits in the record\n    *\n    * @returns {u64} Amount of microcredits in the record\n    * @returns {bigint}\n    */\n    microcredits() {\n        const ret = wasm.recordplaintext_microcredits(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * Returns the nonce of the record. This can be used to uniquely identify a record.\n    *\n    * @returns {string} Nonce of the record\n    * @returns {string}\n    */\n    nonce() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_nonce(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Attempt to get the serial number of a record to determine whether or not is has been spent\n    *\n    * @param {PrivateKey} private_key Private key of the account that owns the record\n    * @param {string} program_id Program ID of the program that the record is associated with\n    * @param {string} record_name Name of the record\n    * @returns {string | Error} Serial number of the record\n    * @param {PrivateKey} private_key\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {string}\n    */\n    serialNumberString(private_key, program_id, record_name) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_serialNumberString(retptr, this.__wbg_ptr, private_key.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr3 = r0;\n            var len3 = r1;\n            if (r3) {\n                ptr3 = 0; len3 = 0;\n                throw takeObject(r2);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n}\n\nconst SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signature_free(ptr >>> 0));\n/**\n* Cryptographic signature of a message signed by an Aleo account\n*/\nclass Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr);\n    }\n    /**\n    * Sign a message with a private key\n    *\n    * @param {PrivateKey} private_key The private key to sign the message with\n    * @param {Uint8Array} message Byte representation of the message to sign\n    * @returns {Signature} Signature of the message\n    * @param {PrivateKey} private_key\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    static sign(private_key, message) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(private_key.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Verify a signature of a message with an address\n    *\n    * @param {Address} address The address to verify the signature with\n    * @param {Uint8Array} message Byte representation of the message to verify\n    * @returns {boolean} True if the signature is valid, false otherwise\n    * @param {Address} address\n    * @param {Uint8Array} message\n    * @returns {boolean}\n    */\n    verify(address, message) {\n        _assertClass(address, Address);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_verify(this.__wbg_ptr, address.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get a signature from a string representation of a signature\n    *\n    * @param {string} signature String representation of a signature\n    * @returns {Signature} Signature\n    * @param {string} signature\n    * @returns {Signature}\n    */\n    static from_string(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_from_string(ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a signature\n    *\n    * @returns {string} String representation of a signature\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst TransactionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_transaction_free(ptr >>> 0));\n/**\n* Webassembly Representation of an Aleo transaction\n*\n* This object is created when generating an on-chain function deployment or execution and is the\n* object that should be submitted to the Aleo Network in order to deploy or execute a function.\n*/\nclass Transaction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Transaction.prototype);\n        obj.__wbg_ptr = ptr;\n        TransactionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TransactionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n    * Create a transaction from a string\n    *\n    * @param {string} transaction String representation of a transaction\n    * @returns {Transaction | Error}\n    * @param {string} transaction\n    * @returns {Transaction}\n    */\n    static fromString(transaction) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(transaction, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transaction_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the transaction as a string. If you want to submit this transaction to the Aleo Network\n    * this function will create the string that should be submitted in the `POST` data.\n    *\n    * @returns {string} String representation of the transaction\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the id of the transaction. This is the merkle root of the transaction's inclusion proof.\n    *\n    * This value can be used to query the status of the transaction on the Aleo Network to see\n    * if it was successful. If successful, the transaction will be included in a block and this\n    * value can be used to lookup the transaction data on-chain.\n    *\n    * @returns {string} Transaction id\n    * @returns {string}\n    */\n    transactionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the type of the transaction (will return \"deploy\" or \"execute\")\n    *\n    * @returns {string} Transaction type\n    * @returns {string}\n    */\n    transactionType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionType(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst VerifyingKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_verifyingkey_free(ptr >>> 0));\n/**\n* Verifying key for a function within an Aleo program\n*/\nclass VerifyingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerifyingKey.prototype);\n        obj.__wbg_ptr = ptr;\n        VerifyingKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VerifyingKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verifyingkey_free(ptr);\n    }\n    /**\n    * Returns the verifying key for the bond_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_public function\n    * @returns {VerifyingKey}\n    */\n    static bondPublicVerifier() {\n        const ret = wasm.verifyingkey_bondPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the bond_validator function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_validator function\n    * @returns {VerifyingKey}\n    */\n    static bondValidatorVerifier() {\n        const ret = wasm.verifyingkey_bondValidatorVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the claim_delegator function\n    *\n    * @returns {VerifyingKey} Verifying key for the claim_unbond_public function\n    * @returns {VerifyingKey}\n    */\n    static claimUnbondPublicVerifier() {\n        const ret = wasm.verifyingkey_claimUnbondPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the fee_private function\n    *\n    * @returns {VerifyingKey} Verifying key for the fee_private function\n    * @returns {VerifyingKey}\n    */\n    static feePrivateVerifier() {\n        const ret = wasm.verifyingkey_feePrivateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the fee_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the fee_public function\n    * @returns {VerifyingKey}\n    */\n    static feePublicVerifier() {\n        const ret = wasm.verifyingkey_feePublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the inclusion function\n    *\n    * @returns {VerifyingKey} Verifying key for the inclusion function\n    * @returns {VerifyingKey}\n    */\n    static inclusionVerifier() {\n        const ret = wasm.verifyingkey_inclusionVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the join function\n    *\n    * @returns {VerifyingKey} Verifying key for the join function\n    * @returns {VerifyingKey}\n    */\n    static joinVerifier() {\n        const ret = wasm.verifyingkey_joinVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the set_validator_state function\n    *\n    * @returns {VerifyingKey} Verifying key for the set_validator_state function\n    * @returns {VerifyingKey}\n    */\n    static setValidatorStateVerifier() {\n        const ret = wasm.verifyingkey_setValidatorStateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the split function\n    *\n    * @returns {VerifyingKey} Verifying key for the split function\n    * @returns {VerifyingKey}\n    */\n    static splitVerifier() {\n        const ret = wasm.verifyingkey_splitVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_private function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_private function\n    * @returns {VerifyingKey}\n    */\n    static transferPrivateVerifier() {\n        const ret = wasm.verifyingkey_transferPrivateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_private_to_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_private_to_public function\n    * @returns {VerifyingKey}\n    */\n    static transferPrivateToPublicVerifier() {\n        const ret = wasm.verifyingkey_transferPrivateToPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_public function\n    * @returns {VerifyingKey}\n    */\n    static transferPublicVerifier() {\n        const ret = wasm.verifyingkey_transferPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_public_as_signer function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_public_as_signer function\n    * @returns {VerifyingKey}\n    */\n    static transferPublicAsSignerVerifier() {\n        const ret = wasm.verifyingkey_transferPublicAsSignerVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_public_to_private function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_public_to_private function\n    * @returns {VerifyingKey}\n    */\n    static transferPublicToPrivateVerifier() {\n        const ret = wasm.verifyingkey_transferPublicToPrivateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the unbond_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the unbond_public function\n    * @returns {VerifyingKey}\n    */\n    static unbondPublicVerifier() {\n        const ret = wasm.verifyingkey_unbondPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the bond_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_public function\n    * @returns {boolean}\n    */\n    isBondPublicVerifier() {\n        const ret = wasm.verifyingkey_isBondPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Returns the verifying key for the bond_validator function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_validator function\n    * @returns {boolean}\n    */\n    isBondValidatorVerifier() {\n        const ret = wasm.verifyingkey_isBondValidatorVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the claim_delegator function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isClaimUnbondPublicVerifier() {\n        const ret = wasm.verifyingkey_isClaimUnbondPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the fee_private function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isFeePrivateVerifier() {\n        const ret = wasm.verifyingkey_isFeePrivateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the fee_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isFeePublicVerifier() {\n        const ret = wasm.verifyingkey_isFeePublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the inclusion function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isInclusionVerifier() {\n        const ret = wasm.verifyingkey_isInclusionVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the join function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isJoinVerifier() {\n        const ret = wasm.verifyingkey_isJoinVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the set_validator_state function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isSetValidatorStateVerifier() {\n        const ret = wasm.verifyingkey_isSetValidatorStateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the split function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isSplitVerifier() {\n        const ret = wasm.verifyingkey_isSplitVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_private function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPrivateVerifier() {\n        const ret = wasm.verifyingkey_isTransferPrivateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_private_to_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPrivateToPublicVerifier() {\n        const ret = wasm.verifyingkey_isTransferPrivateToPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPublicVerifier() {\n        const ret = wasm.verifyingkey_isTransferPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_public_as_signer function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPublicAsSignerVerifier() {\n        const ret = wasm.verifyingkey_isTransferPublicAsSignerVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_public_to_private function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPublicToPrivateVerifier() {\n        const ret = wasm.verifyingkey_isTransferPublicToPrivateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the unbond_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isUnbondPublicVerifier() {\n        const ret = wasm.verifyingkey_isUnbondPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get the checksum of the verifying key\n    *\n    * @returns {string} Checksum of the verifying key\n    * @returns {string}\n    */\n    checksum() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_checksum(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a copy of the verifying key\n    *\n    * @returns {VerifyingKey} A copy of the verifying key\n    * @returns {VerifyingKey}\n    */\n    copy() {\n        const ret = wasm.verifyingkey_copy(this.__wbg_ptr);\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Construct a new verifying key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte representation of a verifying key\n    * @returns {VerifyingKey | Error}\n    * @param {Uint8Array} bytes\n    * @returns {VerifyingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a verifying key from string\n    *\n    * @param {String} string String representation of a verifying key\n    * @returns {VerifyingKey | Error}\n    * @param {string} string\n    * @returns {VerifyingKey}\n    */\n    static fromString(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a byte array from a verifying key\n    *\n    * @returns {Uint8Array | Error} Byte representation of a verifying key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the verifying key\n    *\n    * @returns {String} String representation of the verifying key\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst ViewKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_viewkey_free(ptr >>> 0));\n/**\n*/\nclass ViewKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ViewKey.prototype);\n        obj.__wbg_ptr = ptr;\n        ViewKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ViewKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_viewkey_free(ptr);\n    }\n    /**\n    * Create a new view key from a private key\n    *\n    * @param {PrivateKey} private_key Private key\n    * @returns {ViewKey} View key\n    * @param {PrivateKey} private_key\n    * @returns {ViewKey}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.privatekey_to_view_key(private_key.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Create a new view key from a string representation of a view key\n    *\n    * @param {string} view_key String representation of a view key\n    * @returns {ViewKey} View key\n    * @param {string} view_key\n    * @returns {ViewKey}\n    */\n    static from_string(view_key) {\n        const ptr0 = passStringToWasm0(view_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.viewkey_from_string(ptr0, len0);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a view key\n    *\n    * @returns {string} String representation of a view key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.viewkey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the address corresponding to a view key\n    *\n    * @returns {Address} Address\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.address_from_view_key(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Decrypt a record ciphertext with a view key\n    *\n    * @param {string} ciphertext String representation of a record ciphertext\n    * @returns {string} String representation of a record plaintext\n    * @param {string} ciphertext\n    * @returns {string}\n    */\n    decrypt(ciphertext) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.viewkey_decrypt(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_new_71801a555ad9f2aa = function() { return handleError(function () {\n        const ret = new XMLHttpRequest();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_overrideMimeType_ee9c51919ceb418b = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).overrideMimeType(getStringFromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_open_c9eb0cf2c9d95679 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4, arg5) {\n        getObject(arg0).open(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4), arg5 !== 0);\n    }, arguments) };\n    imports.wbg.__wbg_send_80d29985093c1ec5 = function() { return handleError(function (arg0) {\n        getObject(arg0).send();\n    }, arguments) };\n    imports.wbg.__wbg_response_7c2e2759084f7279 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).response;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_status_d485fb5a478426fb = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_new_72fb9a18b5ae2624 = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_1f9b04f170055d33 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_new_ab6fd82b10560829 = function() { return handleError(function () {\n        const ret = new Headers();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_0d76b0581eca6298 = function() { return handleError(function () {\n        const ret = new AbortController();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_signal_a61f78a3478fd9bc = function(arg0) {\n        const ret = getObject(arg0).signal;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_append_7bfcb4937d1d5e29 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_Response_849eb93e75734b6e = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Response;\n        } catch (_) {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_status_61a01141acd3cf74 = function(arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    };\n    imports.wbg.__wbg_url_5f6dc4009ac5f99d = function(arg0, arg1) {\n        const ret = getObject(arg1).url;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_headers_9620bfada380764a = function(arg0) {\n        const ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_iterator_2cee6dadfd956dfa = function() {\n        const ret = Symbol.iterator;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_get_e3c254076557e348 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(getObject(arg0), getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbg_call_27c0f87801dedf93 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_next_40fc327bfc8770e6 = function(arg0) {\n        const ret = getObject(arg0).next;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_next_196c84450b364254 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).next();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_done_298b57d23c0fc80c = function(arg0) {\n        const ret = getObject(arg0).done;\n        return ret;\n    };\n    imports.wbg.__wbg_value_d93c65011f51a456 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_abort_2aa7521d5690750e = function(arg0) {\n        getObject(arg0).abort();\n    };\n    imports.wbg.__wbg_stringify_8887fe74e1c50d81 = function() { return handleError(function (arg0) {\n        const ret = JSON.stringify(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_log_0159ca40cddf5b15 = function(arg0, arg1) {\n        console.log(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_bigint_from_u64 = function(arg0) {\n        const ret = BigInt.asUintN(64, arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_b3ca7c6051f9bec1 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_keypair_new = function(arg0) {\n        const ret = KeyPair.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_module = function() {\n        const ret = __wbg_init.__wbindgen_wasm_module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_spawnWorker_f6acaddb2e29dc4a = function(arg0, arg1, arg2, arg3) {\n        const ret = spawnWorker(getObject(arg0), getObject(arg1), getObject(arg2), arg3 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_executionresponse_new = function(arg0) {\n        const ret = ExecutionResponse.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_transaction_new = function(arg0) {\n        const ret = Transaction.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_66ae46612e7f0234 = function(arg0) {\n        const ret = new Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_d4638f722068f043 = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_new_16b304a2cfa7ff4a = function() {\n        const ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_push_a5b05aedc7234f9f = function(arg0, arg1) {\n        const ret = getObject(arg0).push(getObject(arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_arrayBuffer_29931d52c7206b02 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).arrayBuffer();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_63b92bc8671ed464 = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_c20a40f15020d68a = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_new_81740750da40724f = function(arg0, arg1) {\n        try {\n            var state0 = {a: arg0, b: arg1};\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_279(a, state0.b, arg0, arg1);\n                } finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return addHeapObject(ret);\n        } finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_abda76e883ba8a5f = function() {\n        const ret = new Error();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stack_658279fe44541cf6 = function(arg0, arg1) {\n        const ret = getObject(arg1).stack;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_error_f851667af71bcfc6 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_buffer_12d079cc21e14bdb = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_randomFillSync_5c9c955aa56b6049 = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).randomFillSync(takeObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_subarray_a1f73cd4b5b42fe1 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_3aa56aa6edec874c = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_set_a47bac70306a19a7 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_crypto_1d1f22824a6a080c = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_process_4a72847cc503995b = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_f686565e586dd935 = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_104a2ff8d6ea03a2 = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbg_require_cca90b1a94a0255b = function() { return handleError(function () {\n        const ret = module.require;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_msCrypto_eb05e62b530a1508 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_e9b4878cebadb3d3 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_cd7af8117672b8b8 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_get_bd8e338fbd5f5cc8 = function(arg0, arg1) {\n        const ret = getObject(arg0)[arg1 >>> 0];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_self_ce0dbfc45cf2f5be = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_c6fb939a7f436783 = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_d1e6af4856ba331b = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_207b558942527489 = function() { return handleError(function () {\n        const ret = global.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_e258087cd0daa0ea = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_has_0af94d20077affa2 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.has(getObject(arg0), getObject(arg1));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_fetch_bc7c8e27076a5c84 = function(arg0) {\n        const ret = fetch(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_fetch_921fad6ef9e883dd = function(arg0, arg1) {\n        const ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_rethrow = function(arg0) {\n        throw takeObject(arg0);\n    };\n    imports.wbg.__wbg_then_a73caa9a87991566 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_0c86a60e8fcfe9f6 = function(arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_queueMicrotask_481971b0d87f3dd4 = function(arg0) {\n        queueMicrotask(getObject(arg0));\n    };\n    imports.wbg.__wbg_queueMicrotask_3cbae2ec6b6cd3d6 = function(arg0) {\n        const ret = getObject(arg0).queueMicrotask;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_resolve_b0083a7967828ec8 = function(arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_5d743fc9058ba01a = function() {\n        const ret = Atomics.waitAsync;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_8cccba86b0f574cb = function(arg0) {\n        const ret = new Int32Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_46d5c36955b71a79 = function(arg0, arg1, arg2) {\n        const ret = Atomics.waitAsync(getObject(arg0), arg1, arg2);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_async_19c0400d97cc72fe = function(arg0) {\n        const ret = getObject(arg0).async;\n        return ret;\n    };\n    imports.wbg.__wbg_value_571d60108110e917 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_link_fc1eedd35dc7e0a6 = function(arg0) {\n        const ret = \"data:application/javascript,\" + encodeURIComponent(`onmessage = function (ev) {\n            let [ia, index, value] = ev.data;\n            ia = new Int32Array(ia.buffer);\n            let result = Atomics.wait(ia, index, value);\n            postMessage(result);\n        };\n        `);\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_new_d1187ae36d662ef9 = function() { return handleError(function (arg0, arg1) {\n        const ret = new Worker(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setonmessage_503809e5bb51bd33 = function(arg0, arg1) {\n        getObject(arg0).onmessage = getObject(arg1);\n    };\n    imports.wbg.__wbg_of_6a70eed8d41f469c = function(arg0, arg1, arg2) {\n        const ret = Array.of(getObject(arg0), getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_postMessage_7380d10e8b8269df = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).postMessage(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_data_3ce7c145ca4fbcdc = function(arg0) {\n        const ret = getObject(arg0).data;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithstrandinit_3fd6fba4083ff2d0 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_responseText_c67ed2d48db10769 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg1).responseText;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    }, arguments) };\n    imports.wbg.__wbindgen_closure_wrapper5763 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 538, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper5788 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 538, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, maybe_memory) {\n    imports.wbg.memory = maybe_memory || new WebAssembly.Memory({initial:25,maximum:65536,shared:true});\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedBigInt64Memory0 = null;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n\n    const imports = __wbg_get_imports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nvar exports = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Address: Address,\n    Execution: Execution,\n    ExecutionResponse: ExecutionResponse,\n    Field: Field,\n    KeyPair: KeyPair,\n    Metadata: Metadata,\n    OfflineQuery: OfflineQuery,\n    PrivateKey: PrivateKey,\n    PrivateKeyCiphertext: PrivateKeyCiphertext,\n    Program: Program,\n    ProgramManager: ProgramManager,\n    ProvingKey: ProvingKey,\n    RecordCiphertext: RecordCiphertext,\n    RecordPlaintext: RecordPlaintext,\n    Signature: Signature,\n    Transaction: Transaction,\n    VerifyingKey: VerifyingKey,\n    ViewKey: ViewKey,\n    default: __wbg_init,\n    initSync: initSync,\n    initThreadPool: initThreadPool,\n    runRayonThread: runRayonThread,\n    verifyFunctionExecution: verifyFunctionExecution\n});\n\nconst wasm_path = \"assets/aleo_wasm.wasm\";\n\n            \n            var Cargo = async (opt = {}) => {\n                let {importHook, serverPath, initializeHook} = opt;\n\n                let final_path = wasm_path;\n\n                if (serverPath != null) {\n                    final_path = serverPath + /[^\\/\\\\]*$/.exec(final_path)[0];\n                }\n\n                if (importHook != null) {\n                    final_path = importHook(final_path);\n                }\n\n                if (initializeHook != null) {\n                    await initializeHook(__wbg_init, final_path);\n\n                } else {\n                    await __wbg_init(final_path);\n                }\n\n                return exports;\n            };\n\nexport { Cargo as default };\n//# sourceMappingURL=wasm.js.map\n","import wasm from \"../dist/wasm.js\";\n\nconst {\n    initThreadPool: wasmInitThreadPool,\n    Address,\n    Execution,\n    ExecutionResponse,\n    Field,\n    Metadata,\n    OfflineQuery,\n    Private,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    ProgramManager,\n    Signature,\n    Transaction,\n    ViewKey,\n    VerifyingKey,\n    verifyFunctionExecution,\n} = await wasm({\n    importHook: () => {\n        return new URL(\"assets/aleo_wasm.wasm\", import.meta.url);\n    },\n});\n\nasync function initThreadPool(threads) {\n    if (threads == null) {\n        threads = navigator.hardwareConcurrency;\n    }\n\n    console.info(`Spawning ${threads} threads`);\n\n    await wasmInitThreadPool(new URL(\"worker.js\", import.meta.url), threads);\n}\n\nexport {\n    initThreadPool,\n    Address,\n    Execution,\n    ExecutionResponse,\n    Field,\n    Metadata,\n    OfflineQuery,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    ProgramManager,\n    Signature,\n    Transaction,\n    ViewKey,\n    VerifyingKey,\n    verifyFunctionExecution,\n};\n"],"names":["proxyMarker","Symbol","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","val","transferHandlers","Map","canHandle","serialize","obj","port1","port2","MessageChannel","expose","deserialize","port","start","wrap","value","serialized","Error","isError","message","name","stack","Object","assign","ep","globalThis","allowedOrigins","addEventListener","callback","ev","data","origin","allowedOrigin","RegExp","test","isAllowedOrigin","console","warn","id","type","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","apply","proxy","transfers","transferCache","set","transfer","undefined","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","error","TypeError","endpoint","constructor","isMessagePort","close","target","createProxy","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","WeakMap","proxyFinalizers","FinalizationRegistry","newCount","get","isProxyReleased","Proxy","_target","unregister","unregisterProxy","length","r","p","toString","bind","_thisArg","rawArgumentList","last","processArguments","construct","register","registerProxy","processed","v","arr","Array","prototype","concat","handler","serializedValue","msg","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","l","Account","_privateKey","_viewKey","_address","params","this","privateKeyFromParams","e","ViewKey","from_private_key","Address","fromCiphertext","ciphertext","password","PrivateKeyCiphertext","fromString","PrivateKey","fromPrivateKeyCiphertext","privateKey","to_string","seed","from_seed_unchecked","from_string","viewKey","address","encryptAccount","toCiphertext","decryptRecord","decrypt","decryptRecords","ciphertexts","ownsRecordCiphertext","isOwner","RecordCiphertext","sign","verify","signature","async","url","options","response","fetch","ok","status","post","method","AleoNetworkClient","host","headers","account","setAccount","getAccount","setHost","fetchData","json","findUnspentRecords","startHeight","endHeight","amounts","maxMicrocredits","nonces","records","end","resolvedPrivateKey","latestHeight","failures","totalRecordValue","BigInt","to_view_key","blockHeight","getLatestHeight","blocks","getBlockRange","i","transactions","j","confirmedTransaction","transaction","execution","transitions","k","transition","program","outputs","output","record","recordPlaintext","nonce","includes","serialNumber","serialNumberString","getTransitionId","push","microcredits","amounts_found","getBlock","height","getDeploymentTransactionIDForProgram","Program","replace","getDeploymentTransactionForProgram","transaction_id","getTransaction","getLatestBlock","getLatestCommittee","getProgram","programId","getProgramObject","inputProgram","getProgramImports","imports","importList","getImports","import_id","hasOwnProperty","programSource","nestedImports","key","logAndThrow","getProgramImportNames","getProgramMappingNames","getProgramMappingValue","mappingName","getStateRoot","getTransactions","getTransactionsInMempool","inputOrOutputID","submitTransaction","transaction_string","Transaction","body","AleoKeyProviderParams","proverUri","verifierUri","cacheKey","AleoKeyProvider","cache","cacheOption","keyUris","fetchBytes","arrayBuffer","Uint8Array","KEY_STORE","useCache","clearCache","clear","cacheKeys","keyId","keys","provingKey","verifyingKey","toBytes","containsKeys","has","deleteKeys","delete","getKeys","debug","provingKeyBytes","verifyingKeyBytes","ProvingKey","fromBytes","VerifyingKey","functionKeys","proverUrl","verifierUrl","fetchKeys","getVerifyingKey","bondPublicKeys","CREDITS_PROGRAM_KEYS","bond_public","prover","verifier","locator","bondValidatorKeys","bond_validator","claimUnbondPublicKeys","claim_unbond_public","transferKeys","visibility","PRIVATE_TRANSFER","transfer_private","PRIVATE_TO_PUBLIC_TRANSFER","transfer_private_to_public","PUBLIC_TRANSFER","transfer_public","PUBLIC_TRANSFER_AS_SIGNER","transfer_public_as_signer","PUBLIC_TO_PRIVATE_TRANSFER","transfer_public_to_private","joinKeys","splitKeys","split","feePrivateKeys","fee_private","feePublicKeys","fee_public","inclusion","set_validator_state","unbond_public","text","inner","unBondPublicKeys","OfflineSearchParams","verifyCreditsKeys","bondPublicKeyParams","bondValidatorKeyParams","claimUnbondPublicKeyParams","feePrivateKeyParams","feePublicKeyParams","inclusionKeyParams","joinKeyParams","setValidatorStateKeyParams","splitKeyParams","transferPrivateKeyParams","transferPrivateToPublicKeyParams","transferPublicKeyParams","transferPublicAsSignerKeyParams","transferPublicToPrivateKeyParams","unbondPublicKeyParams","OfflineKeyProvider","reject","isBondPublicProver","isBondPublicVerifier","isClaimUnbondPublicProver","isClaimUnbondPublicVerifier","isFeePrivateProver","isFeePrivateVerifier","isFeePublicProver","isFeePublicVerifier","isInclusionProver","isInclusionVerifier","isJoinProver","isJoinVerifier","isSetValidatorStateProver","isSetValidatorStateVerifier","isSplitProver","isSplitVerifier","isTransferPrivateProver","isTransferPrivateVerifier","isTransferPrivateToPublicProver","isTransferPrivateToPublicVerifier","isTransferPublicProver","isTransferPublicVerifier","isTransferPublicToPrivateProver","isTransferPublicToPrivateVerifier","isUnbondPublicProver","isUnbondPublicVerifier","insertBondPublicKeys","bondPublicVerifier","insertClaimUnbondPublicKeys","claimUnbondPublicVerifier","insertFeePrivateKeys","feePrivateVerifier","insertFeePublicKeys","feePublicVerifier","insertJoinKeys","joinVerifier","insertSetValidatorStateKeys","setValidatorStateVerifier","insertSplitKeys","splitVerifier","insertTransferPrivateKeys","transferPrivateVerifier","insertTransferPrivateToPublicKeys","transferPrivateToPublicVerifier","insertTransferPublicKeys","transferPublicVerifier","insertTransferPublicToPrivateKeys","transferPublicToPrivateVerifier","insertUnbondPublicKeys","unbondPublicVerifier","NetworkRecordProvider","networkClient","findCreditsRecords","unspent","searchParameters","findCreditsRecord","findRecord","findRecords","BlockHeightSearch","singletonWorker","createAleoWorker","worker","Worker","URL","ProgramManager","keyProvider","recordProvider","setKeyProvider","setRecordProvider","deploy","fee","privateFee","recordSearchParams","feeRecord","programObject","log","feeKeys","deploymentPrivateKey","getCreditsRecord","feeProvingKey","feeVerifyingKey","tx","ProgramManager$1","buildDeploymentTransaction","buildExecutionTransaction","programName","functionName","inputs","keySearchParams","offlineQuery","executionPrivateKey","execute","run","function_name","proveExecution","executeFunctionOffline","recordOne","recordTwo","joinProvingKey","joinVerifyingKey","RecordPlaintext","buildJoinTransaction","splitAmount","amountRecord","splitProvingKey","splitVerifyingKey","buildSplitTransaction","synthesizeKeys","function_id","keyPair","synthesizeKeyPair","buildTransferTransaction","amount","recipient","transferType","caller","validateTransferType","transferProvingKey","transferVerifyingKey","requiresAmountRecord","buildTransferPublicTransaction","buildTransferPublicAsSignerTransaction","buildBondPublicTransaction","staker_address","validator_address","withdrawal_address","scaledAmount","trunc","creditsProgram","additionalOptions","executeOptions","bondPublic","buildBondValidatorTransaction","commission","adjustedCommission","bondValidator","buildUnbondPublicTransaction","unbondPublic","buildClaimUnbondPublicTransaction","claimUnbondPublic","buildSetValidatorStateTransaction","validator_state","setValidatorState","verifyExecution","executionResponse","getExecution","getFunctionId","verifyFunctionExecution","createProgramFromSource","getCreditsProgram","verifyProgram","PRIVATE_TRANSFER_TYPES","VALID_TRANSFER_TYPES","Metadata","baseUrl","convert","metadata","Set","initializeWasm","spawnWorker","module","memory","event","setTimeout","unref","capture","once","wasm","heap","getObject","idx","heap_next","dropObject","takeObject","ret","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachedUint8Memory0","getUint8Memory0","buffer","getStringFromWasm0","ptr","len","addHeapObject","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encode","encodeString","arg","view","buf","read","written","passStringToWasm0","malloc","realloc","subarray","mem","offset","code","charCodeAt","isLikeNone","x","cachedInt32Memory0","getInt32Memory0","Int32Array","debugString","description","isArray","builtInMatches","exec","call","className","JSON","stringify","_","CLOSURE_DTORS","state","__wbindgen_export_3","dtor","a","b","makeMutClosure","arg0","arg1","f","cnt","real","args","original","__wbg_adapter_34","arg2","_dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h442b5e922f6f9710","_assertClass","instance","klass","passArray8ToWasm0","verifyFunctionExecution$1","verifying_key","retptr","__wbindgen_add_to_stack_pointer","Execution$1","VerifyingKey$1","Program$1","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","__wbg_ptr","r0","r1","cachedBigInt64Memory0","getBigInt64Memory0","BigInt64Array","getArrayU8FromWasm0","runRayonThread","receiver","initThreadPool$1","num_threads","initThreadPool","handleError","__wbindgen_exn_store","__wbg_adapter_279","arg3","wasm_bindgen__convert__closures__invoke2_mut__h5ab12ffe4b82d47a","AddressFinalization","__wbg_address_free","__wrap","create","__destroy_into_raw","free","private_key","PrivateKey$1","address_from_private_key","from_view_key","view_key","ViewKey$1","address_from_view_key","address_from_string","deferred1_0","deferred1_1","address_to_string","__wbindgen_free","Signature$1","address_verify","ExecutionFinalization","__wbg_execution_free","Execution","execution_toString","execution_fromString","ExecutionResponseFinalization","__wbg_executionresponse_free","ExecutionResponse","getOutputs","executionresponse_getOutputs","executionresponse_getExecution","executionresponse_getKeys","KeyPair","getProvingKey","executionresponse_getProvingKey","ProvingKey$1","executionresponse_getVerifyingKey","executionresponse_getFunctionId","executionresponse_getProgram","FieldFinalization","__wbg_field_free","Field","field_toString","field","field_fromString","KeyPairFinalization","__wbg_keypair_free","proving_key","ptr1","keypair_new","keypair_provingKey","keypair_verifyingKey","MetadataFinalization","__wbg_metadata_free","__wbg_get_metadata_locator","__wbg_set_metadata_locator","__wbg_get_metadata_prover","__wbg_set_metadata_prover","__wbg_get_metadata_verifier","__wbg_set_metadata_verifier","__wbg_get_metadata_verifyingKey","__wbg_set_metadata_verifyingKey","metadata_baseUrl","metadata_bond_public","metadata_bond_validator","metadata_claim_unbond_public","metadata_fee_private","metadata_fee_public","metadata_inclusion","metadata_join","metadata_set_validator_state","metadata_split","metadata_transfer_private","metadata_transfer_private_to_public","metadata_transfer_public","metadata_transfer_public_as_signer","metadata_transfer_public_to_private","metadata_unbond_public","OfflineQueryFinalization","__wbg_offlinequery_free","OfflineQuery","state_root","offlinequery_new","addStatePath","commitment","state_path","len1","offlinequery_addStatePath","offlinequery_toString","s","offlinequery_fromString","PrivateKeyFinalization","__wbg_privatekey_free","privatekey_new","privatekey_from_seed_unchecked","privatekey_from_string","privatekey_to_string","privatekey_to_view_key","to_address","privatekey_to_address","Address$1","privatekey_sign","newEncrypted","secret","privatekey_newEncrypted","PrivateKeyCiphertext$1","privatekey_toCiphertext","privatekey_fromPrivateKeyCiphertext","PrivateKeyCiphertextFinalization","__wbg_privatekeyciphertext_free","encryptPrivateKey","decryptToPrivateKey","privatekeyciphertext_decryptToPrivateKey","privatekeyciphertext_toString","privatekeyciphertext_fromString","ProgramFinalization","__wbg_program_free","program_fromString","program_toString","hasFunction","program_hasFunction","getFunctions","program_getFunctions","getFunctionInputs","program_getFunctionInputs","getMappings","program_getMappings","getRecordMembers","record_name","program_getRecordMembers","getStructMembers","struct_name","program_getStructMembers","program_getCreditsProgram","program_id","program_address","isEqual","other","program_isEqual","program_getImports","ProgramManagerFinalization","__wbg_programmanager_free","fee_credits","fee_record","fee_proving_key","fee_verifying_key","offline_query","RecordPlaintext$1","ptr2","len2","ptr3","ptr4","ptr5","OfflineQuery$1","programmanager_buildDeploymentTransaction","estimateDeploymentFee","programmanager_estimateDeploymentFee","estimateProgramNameCost","programmanager_estimateProgramNameCost","r2","asUintN","_function","prove_execution","len4","programmanager_executeFunctionOffline","len3","ptr6","ptr7","ptr8","programmanager_buildExecutionTransaction","estimateExecutionFee","programmanager_estimateExecutionFee","estimateFinalizeFee","programmanager_estimateFinalizeFee","record_1","record_2","join_proving_key","join_verifying_key","programmanager_buildJoinTransaction","split_amount","amount_record","split_proving_key","split_verifying_key","programmanager_buildSplitTransaction","amount_credits","transfer_type","transfer_proving_key","transfer_verifying_key","len5","ptr9","ptr10","programmanager_buildTransferTransaction","programmanager_synthesizeKeyPair","ProvingKeyFinalization","__wbg_provingkey_free","provingkey_isBondPublicProver","isBondValidatorProver","provingkey_isBondValidatorProver","provingkey_isClaimUnbondPublicProver","provingkey_isFeePrivateProver","provingkey_isFeePublicProver","provingkey_isInclusionProver","provingkey_isJoinProver","provingkey_isSetValidatorStateProver","provingkey_isSplitProver","provingkey_isTransferPrivateProver","provingkey_isTransferPrivateToPublicProver","provingkey_isTransferPublicProver","isTransferPublicAsSignerProver","provingkey_isTransferPublicAsSignerProver","provingkey_isTransferPublicToPrivateProver","provingkey_isUnbondPublicProver","checksum","provingkey_checksum","copy","provingkey_copy","bytes","provingkey_fromBytes","string","provingkey_fromString","provingkey_toBytes","v1","provingkey_toString","RecordCiphertextFinalization","__wbg_recordciphertext_free","recordciphertext_fromString","recordciphertext_toString","recordciphertext_decrypt","recordciphertext_isOwner","RecordPlaintextFinalization","__wbg_recordplaintext_free","recordplaintext_commitment","Field$1","recordplaintext_fromString","recordplaintext_toString","recordplaintext_microcredits","recordplaintext_nonce","deferred4_0","deferred4_1","recordplaintext_serialNumberString","r3","SignatureFinalization","__wbg_signature_free","Signature","signature_verify","signature_from_string","signature_to_string","TransactionFinalization","__wbg_transaction_free","transaction_fromString","transaction_toString","transactionId","transaction_transactionId","transactionType","transaction_transactionType","VerifyingKeyFinalization","__wbg_verifyingkey_free","verifyingkey_bondPublicVerifier","bondValidatorVerifier","verifyingkey_bondValidatorVerifier","verifyingkey_claimUnbondPublicVerifier","verifyingkey_feePrivateVerifier","verifyingkey_feePublicVerifier","inclusionVerifier","verifyingkey_inclusionVerifier","verifyingkey_joinVerifier","verifyingkey_setValidatorStateVerifier","verifyingkey_splitVerifier","verifyingkey_transferPrivateVerifier","verifyingkey_transferPrivateToPublicVerifier","verifyingkey_transferPublicVerifier","transferPublicAsSignerVerifier","verifyingkey_transferPublicAsSignerVerifier","verifyingkey_transferPublicToPrivateVerifier","verifyingkey_unbondPublicVerifier","verifyingkey_isBondPublicVerifier","isBondValidatorVerifier","verifyingkey_isBondValidatorVerifier","verifyingkey_isClaimUnbondPublicVerifier","verifyingkey_isFeePrivateVerifier","verifyingkey_isFeePublicVerifier","verifyingkey_isInclusionVerifier","verifyingkey_isJoinVerifier","verifyingkey_isSetValidatorStateVerifier","verifyingkey_isSplitVerifier","verifyingkey_isTransferPrivateVerifier","verifyingkey_isTransferPrivateToPublicVerifier","verifyingkey_isTransferPublicVerifier","isTransferPublicAsSignerVerifier","verifyingkey_isTransferPublicAsSignerVerifier","verifyingkey_isTransferPublicToPrivateVerifier","verifyingkey_isUnbondPublicVerifier","verifyingkey_checksum","verifyingkey_copy","verifyingkey_fromBytes","verifyingkey_fromString","verifyingkey_toBytes","verifyingkey_toString","ViewKeyFinalization","__wbg_viewkey_free","viewkey_from_string","viewkey_to_string","deferred3_0","deferred3_1","viewkey_decrypt","__wbg_load","Response","WebAssembly","instantiateStreaming","instantiate","Instance","__wbg_get_imports","wbg","__wbindgen_object_drop_ref","__wbg_new_71801a555ad9f2aa","XMLHttpRequest","arguments","__wbg_overrideMimeType_ee9c51919ceb418b","overrideMimeType","__wbg_open_c9eb0cf2c9d95679","arg4","arg5","open","__wbg_send_80d29985093c1ec5","send","__wbg_response_7c2e2759084f7279","__wbg_status_d485fb5a478426fb","__wbg_new_72fb9a18b5ae2624","__wbindgen_string_new","__wbg_set_1f9b04f170055d33","Reflect","__wbg_new_ab6fd82b10560829","Headers","__wbindgen_object_clone_ref","__wbg_new_0d76b0581eca6298","AbortController","__wbg_signal_a61f78a3478fd9bc","signal","__wbg_append_7bfcb4937d1d5e29","append","__wbg_instanceof_Response_849eb93e75734b6e","result","__wbg_status_61a01141acd3cf74","__wbg_url_5f6dc4009ac5f99d","__wbg_headers_9620bfada380764a","__wbg_iterator_2cee6dadfd956dfa","iterator","__wbg_get_e3c254076557e348","__wbindgen_is_function","__wbg_call_27c0f87801dedf93","__wbindgen_is_object","__wbg_next_40fc327bfc8770e6","next","__wbg_next_196c84450b364254","__wbg_done_298b57d23c0fc80c","done","__wbg_value_d93c65011f51a456","__wbg_abort_2aa7521d5690750e","abort","__wbg_stringify_8887fe74e1c50d81","__wbindgen_string_get","__wbg_log_0159ca40cddf5b15","__wbindgen_bigint_from_u64","__wbg_call_b3ca7c6051f9bec1","__wbg_keypair_new","__wbindgen_module","__wbg_init","__wbindgen_wasm_module","__wbindgen_memory","__wbg_spawnWorker_f6acaddb2e29dc4a","__wbg_executionresponse_new","ExecutionResponse$1","__wbg_transaction_new","Transaction$1","__wbg_newwithlength_66ae46612e7f0234","__wbg_set_d4638f722068f043","__wbindgen_cb_drop","__wbg_new_16b304a2cfa7ff4a","__wbg_push_a5b05aedc7234f9f","__wbg_arrayBuffer_29931d52c7206b02","__wbg_new_63b92bc8671ed464","__wbg_length_c20a40f15020d68a","__wbg_new_81740750da40724f","state0","cb0","__wbindgen_number_new","__wbg_new_abda76e883ba8a5f","__wbg_stack_658279fe44541cf6","__wbg_error_f851667af71bcfc6","deferred0_0","deferred0_1","__wbg_buffer_12d079cc21e14bdb","__wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb","__wbg_randomFillSync_5c9c955aa56b6049","randomFillSync","__wbg_subarray_a1f73cd4b5b42fe1","__wbg_getRandomValues_3aa56aa6edec874c","getRandomValues","__wbg_set_a47bac70306a19a7","__wbg_crypto_1d1f22824a6a080c","crypto","__wbg_process_4a72847cc503995b","process","__wbg_versions_f686565e586dd935","versions","__wbg_node_104a2ff8d6ea03a2","node","__wbindgen_is_string","__wbg_require_cca90b1a94a0255b","require","__wbg_msCrypto_eb05e62b530a1508","msCrypto","__wbg_newwithlength_e9b4878cebadb3d3","__wbg_length_cd7af8117672b8b8","__wbg_get_bd8e338fbd5f5cc8","__wbg_self_ce0dbfc45cf2f5be","self","__wbg_window_c6fb939a7f436783","window","__wbg_globalThis_d1e6af4856ba331b","__wbg_global_207b558942527489","global","__wbindgen_is_undefined","__wbg_newnoargs_e258087cd0daa0ea","Function","__wbg_has_0af94d20077affa2","__wbg_fetch_bc7c8e27076a5c84","__wbg_fetch_921fad6ef9e883dd","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","__wbg_then_a73caa9a87991566","__wbg_then_0c86a60e8fcfe9f6","__wbg_queueMicrotask_481971b0d87f3dd4","queueMicrotask","__wbg_queueMicrotask_3cbae2ec6b6cd3d6","__wbg_resolve_b0083a7967828ec8","__wbg_waitAsync_5d743fc9058ba01a","Atomics","waitAsync","__wbg_new_8cccba86b0f574cb","__wbg_waitAsync_46d5c36955b71a79","__wbg_async_19c0400d97cc72fe","__wbg_value_571d60108110e917","__wbindgen_link_fc1eedd35dc7e0a6","encodeURIComponent","__wbg_new_d1187ae36d662ef9","__wbg_setonmessage_503809e5bb51bd33","onmessage","__wbg_of_6a70eed8d41f469c","of","__wbg_postMessage_7380d10e8b8269df","__wbg_data_3ce7c145ca4fbcdc","__wbg_newwithstrandinit_3fd6fba4083ff2d0","Request","__wbg_responseText_c67ed2d48db10769","responseText","__wbindgen_closure_wrapper5763","__wbindgen_closure_wrapper5788","__wbg_init_memory","maybe_memory","Memory","initial","maximum","shared","__wbg_finalize_init","exports","__wbindgen_start","initSync","Module","input","freeze","__proto__","Metadata$1","RecordCiphertext$1","default","wasm_path","wasmInitThreadPool","Private","opt","importHook","serverPath","initializeHook","final_path","Cargo","threads","navigator","hardwareConcurrency","info"],"sourceRoot":""}