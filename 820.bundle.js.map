{"version":3,"file":"820.bundle.js","mappings":"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","sources":["webpack://aleo-website/wasm.js","webpack://aleo-website/../js/index.js","webpack://aleo-website/../node_modules/comlink/dist/esm/comlink.mjs"],"sourcesContent":["function spawnWorker(url, module, memory, address) {\n        return new Promise((resolve) => {\n            const worker = new Worker(url, {\n                type: \"module\",\n            });\n\n            worker.addEventListener(\"message\", (event) => {\n                // This is needed in Node to wait one extra tick, so that way\n                // the Worker can fully initialize before we return.\n                setTimeout(() => {\n                    resolve(worker);\n\n                    // When running in Node, this allows the process to exit\n                    // even though the Worker is still running.\n                    if (worker.unref) {\n                        worker.unref();\n                    }\n                }, 0);\n            }, {\n                capture: true,\n                once: true,\n            });\n\n            worker.postMessage({\n                module,\n                memory,\n                address,\n            });\n        });\n    }\n\nlet wasm;\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); }\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().slice(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_3.get(state.dtor)(state.a, state.b);\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_3.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\nfunction __wbg_adapter_34(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h442b5e922f6f9710(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* Verify an execution with a single function and a single transition. Executions with multiple\n* transitions or functions will fail to verify. Also, this does not verify that the state root of\n* the execution is included in the Aleo Network ledger.\n*\n* @param {Execution} execution The function execution to verify\n* @param {VerifyingKey} verifying_key The verifying key for the function\n* @param {Program} program The program that the function execution belongs to\n* @param {String} function_id The name of the function that was executed\n* @returns {boolean} True if the execution is valid, false otherwise\n* @param {Execution} execution\n* @param {VerifyingKey} verifying_key\n* @param {Program} program\n* @param {string} function_id\n* @returns {boolean}\n*/\nfunction verifyFunctionExecution(execution, verifying_key, program, function_id) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(execution, Execution);\n        _assertClass(verifying_key, VerifyingKey);\n        _assertClass(program, Program);\n        const ptr0 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.verifyFunctionExecution(retptr, execution.__wbg_ptr, verifying_key.__wbg_ptr, program.__wbg_ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return r0 !== 0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nlet cachedBigInt64Memory0 = null;\n\nfunction getBigInt64Memory0() {\n    if (cachedBigInt64Memory0 === null || cachedBigInt64Memory0.buffer !== wasm.memory.buffer) {\n        cachedBigInt64Memory0 = new BigInt64Array(wasm.memory.buffer);\n    }\n    return cachedBigInt64Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {number} receiver\n*/\nfunction runRayonThread(receiver) {\n    wasm.runRayonThread(receiver);\n}\n\n/**\n* @param {URL} url\n* @param {number} num_threads\n* @returns {Promise<void>}\n*/\nfunction initThreadPool(url, num_threads) {\n    const ret = wasm.initThreadPool(addHeapObject(url), num_threads);\n    return takeObject(ret);\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_279(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__h5ab12ffe4b82d47a(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\nconst AddressFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_address_free(ptr >>> 0));\n/**\n* Public address of an Aleo account\n*/\nclass Address {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Address.prototype);\n        obj.__wbg_ptr = ptr;\n        AddressFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AddressFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n    * Derive an Aleo address from a private key\n    *\n    * @param {PrivateKey} private_key The private key to derive the address from\n    * @returns {Address} Address corresponding to the private key\n    * @param {PrivateKey} private_key\n    * @returns {Address}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.address_from_private_key(private_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Derive an Aleo address from a view key\n    *\n    * @param {ViewKey} view_key The view key to derive the address from\n    * @returns {Address} Address corresponding to the view key\n    * @param {ViewKey} view_key\n    * @returns {Address}\n    */\n    static from_view_key(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.address_from_view_key(view_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Create an aleo address object from a string representation of an address\n    *\n    * @param {string} address String representation of an addressm\n    * @returns {Address} Address\n    * @param {string} address\n    * @returns {Address}\n    */\n    static from_string(address) {\n        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.address_from_string(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Get a string representation of an Aleo address object\n    *\n    * @param {Address} Address\n    * @returns {string} String representation of the address\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Verify a signature for a message signed by the address\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {boolean} Boolean representing whether or not the signature is valid\n    * @param {Uint8Array} message\n    * @param {Signature} signature\n    * @returns {boolean}\n    */\n    verify(message, signature) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Signature);\n        const ret = wasm.address_verify(this.__wbg_ptr, ptr0, len0, signature.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst ExecutionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_execution_free(ptr >>> 0));\n/**\n* Execution of an Aleo program.\n*/\nclass Execution {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Execution.prototype);\n        obj.__wbg_ptr = ptr;\n        ExecutionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ExecutionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_execution_free(ptr);\n    }\n    /**\n    * Returns the string representation of the execution.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.execution_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates an execution object from a string representation of an execution.\n    * @param {string} execution\n    * @returns {Execution}\n    */\n    static fromString(execution) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(execution, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.execution_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Execution.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ExecutionResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_executionresponse_free(ptr >>> 0));\n/**\n* Webassembly Representation of an Aleo function execution response\n*\n* This object is returned by the execution of an Aleo function off-chain. It provides methods for\n* retrieving the outputs of the function execution.\n*/\nclass ExecutionResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ExecutionResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        ExecutionResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ExecutionResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_executionresponse_free(ptr);\n    }\n    /**\n    * Get the outputs of the executed function\n    *\n    * @returns {Array} Array of strings representing the outputs of the function\n    * @returns {Array<any>}\n    */\n    getOutputs() {\n        const ret = wasm.executionresponse_getOutputs(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns the execution object if present, null if otherwise.\n    *\n    * @returns {Execution | undefined} The execution object if present, null if otherwise\n    * @returns {Execution | undefined}\n    */\n    getExecution() {\n        const ret = wasm.executionresponse_getExecution(this.__wbg_ptr);\n        return ret === 0 ? undefined : Execution.__wrap(ret);\n    }\n    /**\n    * Returns the program keys if present\n    * @returns {KeyPair}\n    */\n    getKeys() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.executionresponse_getKeys(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the proving_key if the proving key was cached in the Execution response.\n    * Note the proving key is removed from the response object after the first call to this\n    * function. Subsequent calls will return null.\n    *\n    * @returns {ProvingKey | undefined} The proving key\n    * @returns {ProvingKey | undefined}\n    */\n    getProvingKey() {\n        const ret = wasm.executionresponse_getProvingKey(this.__wbg_ptr);\n        return ret === 0 ? undefined : ProvingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying_key associated with the program\n    *\n    * @returns {VerifyingKey} The verifying key\n    * @returns {VerifyingKey}\n    */\n    getVerifyingKey() {\n        const ret = wasm.executionresponse_getVerifyingKey(this.__wbg_ptr);\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the function identifier\n    * @returns {string}\n    */\n    getFunctionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.executionresponse_getFunctionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the program\n    * @returns {Program}\n    */\n    getProgram() {\n        const ret = wasm.executionresponse_getProgram(this.__wbg_ptr);\n        return Program.__wrap(ret);\n    }\n}\n\nconst FieldFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_field_free(ptr >>> 0));\n/**\n*/\nclass Field {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Field.prototype);\n        obj.__wbg_ptr = ptr;\n        FieldFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FieldFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_field_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.field_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} field\n    * @returns {Field}\n    */\n    static fromString(field) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(field, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.field_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Field.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst KeyPairFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keypair_free(ptr >>> 0));\n/**\n* Key pair object containing both the function proving and verifying keys\n*/\nclass KeyPair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeyPair.prototype);\n        obj.__wbg_ptr = ptr;\n        KeyPairFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeyPairFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keypair_free(ptr);\n    }\n    /**\n    * Create new key pair from proving and verifying keys\n    *\n    * @param {ProvingKey} proving_key Proving key corresponding to a function in an Aleo program\n    * @param {VerifyingKey} verifying_key Verifying key corresponding to a function in an Aleo program\n    * @returns {KeyPair} Key pair object containing both the function proving and verifying keys\n    * @param {ProvingKey} proving_key\n    * @param {VerifyingKey} verifying_key\n    */\n    constructor(proving_key, verifying_key) {\n        _assertClass(proving_key, ProvingKey);\n        var ptr0 = proving_key.__destroy_into_raw();\n        _assertClass(verifying_key, VerifyingKey);\n        var ptr1 = verifying_key.__destroy_into_raw();\n        const ret = wasm.keypair_new(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        return this;\n    }\n    /**\n    * Get the proving key. This method will remove the proving key from the key pair\n    *\n    * @returns {ProvingKey | Error}\n    * @returns {ProvingKey}\n    */\n    provingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_provingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the verifying key. This method will remove the verifying key from the key pair\n    *\n    * @returns {VerifyingKey | Error}\n    * @returns {VerifyingKey}\n    */\n    verifyingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_verifyingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst MetadataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_metadata_free(ptr >>> 0));\n/**\n*/\nclass Metadata {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Metadata.prototype);\n        obj.__wbg_ptr = ptr;\n        MetadataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MetadataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_metadata_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    get locator() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_locator(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set locator(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_locator(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    get prover() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_prover(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set prover(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_prover(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    get verifier() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_verifier(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set verifier(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_verifier(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    get verifyingKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_verifyingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set verifyingKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_verifyingKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    static baseUrl() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.metadata_baseUrl(retptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static bond_public() {\n        const ret = wasm.metadata_bond_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static bond_validator() {\n        const ret = wasm.metadata_bond_validator();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static claim_unbond_public() {\n        const ret = wasm.metadata_claim_unbond_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static fee_private() {\n        const ret = wasm.metadata_fee_private();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static fee_public() {\n        const ret = wasm.metadata_fee_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static inclusion() {\n        const ret = wasm.metadata_inclusion();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static join() {\n        const ret = wasm.metadata_join();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static set_validator_state() {\n        const ret = wasm.metadata_set_validator_state();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static split() {\n        const ret = wasm.metadata_split();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_private() {\n        const ret = wasm.metadata_transfer_private();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_private_to_public() {\n        const ret = wasm.metadata_transfer_private_to_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_public() {\n        const ret = wasm.metadata_transfer_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_public_as_signer() {\n        const ret = wasm.metadata_transfer_public_as_signer();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_public_to_private() {\n        const ret = wasm.metadata_transfer_public_to_private();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static unbond_public() {\n        const ret = wasm.metadata_unbond_public();\n        return Metadata.__wrap(ret);\n    }\n}\n\nconst OfflineQueryFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_offlinequery_free(ptr >>> 0));\n/**\n* An offline query object used to insert the global state root and state paths needed to create\n* a valid inclusion proof offline.\n*/\nclass OfflineQuery {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OfflineQuery.prototype);\n        obj.__wbg_ptr = ptr;\n        OfflineQueryFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OfflineQueryFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_offlinequery_free(ptr);\n    }\n    /**\n    * Creates a new offline query object. The state root is required to be passed in as a string\n    * @param {string} state_root\n    */\n    constructor(state_root) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(state_root, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.offlinequery_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Add a new state path to the offline query object.\n    *\n    * @param {string} commitment: The commitment corresponding to a record inpout\n    * @param {string} state_path: The state path corresponding to the commitment\n    * @param {string} commitment\n    * @param {string} state_path\n    */\n    addStatePath(commitment, state_path) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(commitment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(state_path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.offlinequery_addStatePath(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a json string representation of the offline query object\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.offlinequery_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create an offline query object from a json string representation\n    * @param {string} s\n    * @returns {OfflineQuery}\n    */\n    static fromString(s) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.offlinequery_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return OfflineQuery.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst PrivateKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_privatekey_free(ptr >>> 0));\n/**\n* Private key of an Aleo account\n*/\nclass PrivateKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKey.prototype);\n        obj.__wbg_ptr = ptr;\n        PrivateKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PrivateKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n    * Generate a new private key using a cryptographically secure random number generator\n    *\n    * @returns {PrivateKey}\n    */\n    constructor() {\n        const ret = wasm.privatekey_new();\n        this.__wbg_ptr = ret >>> 0;\n        return this;\n    }\n    /**\n    * Get a private key from a series of unchecked bytes\n    *\n    * @param {Uint8Array} seed Unchecked 32 byte long Uint8Array acting as the seed for the private key\n    * @returns {PrivateKey}\n    * @param {Uint8Array} seed\n    * @returns {PrivateKey}\n    */\n    static from_seed_unchecked(seed) {\n        const ptr0 = passArray8ToWasm0(seed, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_from_seed_unchecked(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a string representation of a private key\n    *\n    * @param {string} seed String representation of a private key\n    * @returns {PrivateKey}\n    * @param {string} private_key\n    * @returns {PrivateKey}\n    */\n    static from_string(private_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(private_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_string(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the private key. This function should be used very carefully\n    * as it exposes the private key plaintext\n    *\n    * @returns {string} String representation of a private key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the view key corresponding to the private key\n    *\n    * @returns {ViewKey}\n    * @returns {ViewKey}\n    */\n    to_view_key() {\n        const ret = wasm.privatekey_to_view_key(this.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get the address corresponding to the private key\n    *\n    * @returns {Address}\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.privatekey_to_address(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Sign a message with the private key\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {Signature} Signature generated by signing the message with the address\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    sign(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(this.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a new randomly generated private key ciphertext using a secret. The secret is sensitive\n    * and will be needed to decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext | Error} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static newEncrypted(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_newEncrypted(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt an existing private key with a secret. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext | Error} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    toCiphertext(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get private key from a private key ciphertext and secret originally used to encrypt it\n    *\n    * @param {PrivateKeyCiphertext} ciphertext Ciphertext representation of the private key\n    * @param {string} secret Secret originally used to encrypt the private key\n    * @returns {PrivateKey | Error} Private key\n    * @param {PrivateKeyCiphertext} ciphertext\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    static fromPrivateKeyCiphertext(ciphertext, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(ciphertext, PrivateKeyCiphertext);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_fromPrivateKeyCiphertext(retptr, ciphertext.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst PrivateKeyCiphertextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_privatekeyciphertext_free(ptr >>> 0));\n/**\n* Private Key in ciphertext form\n*/\nclass PrivateKeyCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKeyCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n        PrivateKeyCiphertextFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PrivateKeyCiphertextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekeyciphertext_free(ptr);\n    }\n    /**\n    * Encrypt a private key using a secret string. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {PrivateKey} private_key Private key to encrypt\n    * @param {string} secret Secret to encrypt the private key with\n    * @returns {PrivateKeyCiphertext | Error} Private key ciphertext\n    * @param {PrivateKey} private_key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static encryptPrivateKey(private_key, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, private_key.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Decrypts a private ciphertext using a secret string. This must be the same secret used to\n    * encrypt the private key\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKey | Error} Private key\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    decryptToPrivateKey(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_decryptToPrivateKey(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the ciphertext string\n    *\n    * @returns {string} Ciphertext string\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekeyciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates a PrivateKeyCiphertext from a string\n    *\n    * @param {string} ciphertext Ciphertext string\n    * @returns {PrivateKeyCiphertext | Error} Private key ciphertext\n    * @param {string} ciphertext\n    * @returns {PrivateKeyCiphertext}\n    */\n    static fromString(ciphertext) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ProgramFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_program_free(ptr >>> 0));\n/**\n* Webassembly Representation of an Aleo program\n*/\nclass Program {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Program.prototype);\n        obj.__wbg_ptr = ptr;\n        ProgramFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ProgramFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_program_free(ptr);\n    }\n    /**\n    * Create a program from a program string\n    *\n    * @param {string} program Aleo program source code\n    * @returns {Program | Error} Program object\n    * @param {string} program\n    * @returns {Program}\n    */\n    static fromString(program) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the program\n    *\n    * @returns {string} String containing the program source code\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Determine if a function is present in the program\n    *\n    * @param {string} functionName Name of the function to check for\n    * @returns {boolean} True if the program is valid, false otherwise\n    * @param {string} function_name\n    * @returns {boolean}\n    */\n    hasFunction(function_name) {\n        const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.program_hasFunction(this.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get javascript array of functions names in the program\n    *\n    * @returns {Array} Array of all function names present in the program\n    *\n    * @example\n    * const expected_functions = [\n    *   \"mint\",\n    *   \"transfer_private\",\n    *   \"transfer_private_to_public\",\n    *   \"transfer_public\",\n    *   \"transfer_public_to_private\",\n    *   \"join\",\n    *   \"split\",\n    *   \"fee\"\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_functions = credits_program.getFunctions();\n    * console.log(credits_functions === expected_functions); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getFunctions() {\n        const ret = wasm.program_getFunctions(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get a javascript object representation of the function inputs and types. This can be used\n    * to generate a web form to capture user inputs for an execution of a function.\n    *\n    * @param {string} function_name Name of the function to get inputs for\n    * @returns {Array | Error} Array of function inputs\n    *\n    * @example\n    * const expected_inputs = [\n    *     {\n    *       type:\"record\",\n    *       visibility:\"private\",\n    *       record:\"credits\",\n    *       members:[\n    *         {\n    *           name:\"microcredits\",\n    *           type:\"u64\",\n    *           visibility:\"private\"\n    *         }\n    *       ],\n    *       register:\"r0\"\n    *     },\n    *     {\n    *       type:\"address\",\n    *       visibility:\"private\",\n    *       register:\"r1\"\n    *     },\n    *     {\n    *       type:\"u64\",\n    *       visibility:\"private\",\n    *       register:\"r2\"\n    *     }\n    * ];\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const transfer_function_inputs = credits_program.getFunctionInputs(\"transfer_private\");\n    * console.log(transfer_function_inputs === expected_inputs); // Output should be \"true\"\n    * @param {string} function_name\n    * @returns {Array<any>}\n    */\n    getFunctionInputs(function_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getFunctionInputs(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a the list of a program's mappings and the names/types of their keys and values.\n    *\n    * @returns {Array | Error} - An array of objects representing the mappings in the program\n    * @example\n    * const expected_mappings = [\n    *    {\n    *       name: \"account\",\n    *       key_name: \"owner\",\n    *       key_type: \"address\",\n    *       value_name: \"microcredits\",\n    *       value_type: \"u64\"\n    *    }\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_mappings = credits_program.getMappings();\n    * console.log(credits_mappings === expected_mappings); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getMappings() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_getMappings(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program record and its types\n    *\n    * @param {string} record_name Name of the record to get members for\n    * @returns {Object | Error} Object containing the record name, type, and members\n    *\n    * @example\n    *\n    * const expected_record = {\n    *     type: \"record\",\n    *     record: \"Credits\",\n    *     members: [\n    *       {\n    *         name: \"owner\",\n    *         type: \"address\",\n    *         visibility: \"private\"\n    *       },\n    *       {\n    *         name: \"microcredits\",\n    *         type: \"u64\",\n    *         visibility: \"private\"\n    *       }\n    *     ];\n    *  };\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_record = credits_program.getRecordMembers(\"Credits\");\n    * console.log(credits_record === expected_record); // Output should be \"true\"\n    * @param {string} record_name\n    * @returns {object}\n    */\n    getRecordMembers(record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getRecordMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program struct and its types\n    *\n    * @param {string} struct_name Name of the struct to get members for\n    * @returns {Array | Error} Array containing the struct members\n    *\n    * @example\n    *\n    * const STRUCT_PROGRAM = \"program token_issue.aleo;\n    *\n    * struct token_metadata:\n    *     network as u32;\n    *     version as u32;\n    *\n    * struct token:\n    *     token_id as u32;\n    *     metadata as token_metadata;\n    *\n    * function no_op:\n    *    input r0 as u64;\n    *    output r0 as u64;\"\n    *\n    * const expected_struct_members = [\n    *    {\n    *      name: \"token_id\",\n    *      type: \"u32\",\n    *    },\n    *    {\n    *      name: \"metadata\",\n    *      type: \"struct\",\n    *      struct_id: \"token_metadata\",\n    *      members: [\n    *       {\n    *         name: \"network\",\n    *         type: \"u32\",\n    *       }\n    *       {\n    *         name: \"version\",\n    *         type: \"u32\",\n    *       }\n    *     ]\n    *   }\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(STRUCT_PROGRAM);\n    * const struct_members = program.getStructMembers(\"token\");\n    * console.log(struct_members === expected_struct_members); // Output should be \"true\"\n    * @param {string} struct_name\n    * @returns {Array<any>}\n    */\n    getStructMembers(struct_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(struct_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getStructMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the credits.aleo program\n    *\n    * @returns {Program} The credits.aleo program\n    * @returns {Program}\n    */\n    static getCreditsProgram() {\n        const ret = wasm.program_getCreditsProgram();\n        return Program.__wrap(ret);\n    }\n    /**\n    * Get the id of the program\n    *\n    * @returns {string} The id of the program\n    * @returns {string}\n    */\n    id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_id(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get a unique address of the program\n    *\n    * @returns {Address} The address of the program\n    * @returns {Address}\n    */\n    address() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_address(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Address.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Determine equality with another program\n    *\n    * @param {Program} other The other program to compare\n    * @returns {boolean} True if the programs are equal, false otherwise\n    * @param {Program} other\n    * @returns {boolean}\n    */\n    isEqual(other) {\n        _assertClass(other, Program);\n        const ret = wasm.program_isEqual(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get program_imports\n    *\n    * @returns {Array} The program imports\n    *\n    * @example\n    *\n    * const DOUBLE_TEST = \"import multiply_test.aleo;\n    *\n    * program double_test.aleo;\n    *\n    * function double_it:\n    *     input r0 as u32.private;\n    *     call multiply_test.aleo/multiply 2u32 r0 into r1;\n    *     output r1 as u32.private;\";\n    *\n    * const expected_imports = [\n    *    \"multiply_test.aleo\"\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(DOUBLE_TEST_PROGRAM);\n    * const imports = program.getImports();\n    * console.log(imports === expected_imports); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getImports() {\n        const ret = wasm.program_getImports(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst ProgramManagerFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_programmanager_free(ptr >>> 0));\n/**\n*/\nclass ProgramManager {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ProgramManagerFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_programmanager_free(ptr);\n    }\n    /**\n    * Deploy an Aleo program\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being deployed\n    * @param imports A javascript object holding the source code of any imported programs in the\n    * form \\{\"program_name1\": \"program_source_code\", \"program_name2\": \"program_source_code\", ..\\}.\n    * Note that all imported programs must be deployed on chain before the main program in order\n    * for the deployment to succeed\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the program deployment in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildDeploymentTransaction(private_key, program, fee_credits, fee_record, url, imports, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        let ptr1 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr1 = fee_record.__destroy_into_raw();\n        }\n        var ptr2 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr3 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr4 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildDeploymentTransaction(private_key.__wbg_ptr, ptr0, len0, fee_credits, ptr1, ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the fee for a program deployment\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The source code of the program being deployed\n    * @param imports (optional) Provide a list of imports to use for the deployment fee estimation\n    * in the form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @returns {u64 | Error}\n    * @param {string} program\n    * @param {object | undefined} [imports]\n    * @returns {Promise<bigint>}\n    */\n    static estimateDeploymentFee(program, imports) {\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_estimateDeploymentFee(ptr0, len0, isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the component of the deployment cost which comes from the fee for the program name.\n    * Note that this cost does not represent the entire cost of deployment. It is additional to\n    * the cost of the size (in bytes) of the deployment.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param name The name of the program to be deployed\n    * @returns {u64 | Error}\n    * @param {string} name\n    * @returns {bigint}\n    */\n    static estimateProgramNameCost(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateProgramNameCost(retptr, ptr0, len0);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Execute an arbitrary function locally\n    *\n    * @param {PrivateKey} private_key The private key of the sender\n    * @param {string} program The source code of the program being executed\n    * @param {string} function The name of the function to execute\n    * @param {Array} inputs A javascript array of inputs to the function\n    * @param {boolean} prove_execution If true, the execution will be proven and an execution object\n    * containing the proof and the encrypted inputs and outputs needed to verify the proof offline\n    * will be returned.\n    * @param {boolean} cache Cache the proving and verifying keys in the Execution response.\n    * If this is set to 'true' the keys synthesized will be stored in the Execution Response\n    * and the `ProvingKey` and `VerifyingKey` can be retrieved from the response via the `.getKeys()`\n    * method.\n    * @param {Object | undefined} imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param {ProvingKey | undefined} proving_key (optional) Provide a verifying key to use for the function execution\n    * @param {VerifyingKey | undefined} verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {boolean} prove_execution\n    * @param {boolean} cache\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [proving_key]\n    * @param {VerifyingKey | undefined} [verifying_key]\n    * @param {string | undefined} [url]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<ExecutionResponse>}\n    */\n    static executeFunctionOffline(private_key, program, _function, inputs, prove_execution, cache, imports, proving_key, verifying_key, url, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr2 = proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr3 = verifying_key.__destroy_into_raw();\n        }\n        var ptr4 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_executeFunctionOffline(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), prove_execution, cache, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr2, ptr3, ptr4, len4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Execute Aleo function and create an Aleo execution transaction\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being executed\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * If this is set to 'true' the keys synthesized (or passed in as optional parameters via the\n    * `proving_key` and `verifying_key` arguments) will be stored in the ProgramManager's memory\n    * and used for subsequent transactions. If this is set to 'false' the proving and verifying\n    * keys will be deallocated from memory after the transaction is executed.\n    * @param imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the function execution\n    * @param verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [proving_key]\n    * @param {VerifyingKey | undefined} [verifying_key]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildExecutionTransaction(private_key, program, _function, inputs, fee_credits, fee_record, url, imports, proving_key, verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        var ptr3 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr4 = proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr5 = verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr8 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildExecutionTransaction(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), fee_credits, ptr2, ptr3, len3, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr4, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate Fee for Aleo function execution. Note if \"cache\" is set to true, the proving and\n    * verifying keys will be stored in the ProgramManager's memory and used for subsequent\n    * program executions.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program to estimate the execution fee for\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the fee estimation in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the fee estimation\n    * @param verifying_key (optional) Provide a verifying key to use for the fee estimation\n    * @returns {u64 | Error} Fee in microcredits\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {string | undefined} [url]\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [proving_key]\n    * @param {VerifyingKey | undefined} [verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<bigint>}\n    */\n    static estimateExecutionFee(private_key, program, _function, inputs, url, imports, proving_key, verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr3 = proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr4 = verifying_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_estimateExecutionFee(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the finalize fee component for executing a function. This fee is additional to the\n    * size of the execution of the program in bytes. If the function does not have a finalize\n    * step, then the finalize fee is 0.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The program containing the function to estimate the finalize fee for\n    * @param function The function to estimate the finalize fee for\n    * @returns {u64 | Error} Fee in microcredits\n    * @param {string} program\n    * @param {string} _function\n    * @returns {bigint}\n    */\n    static estimateFinalizeFee(program, _function) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateFinalizeFee(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Join two records together to create a new record with an amount of credits equal to the sum\n    * of the credits of the two original records\n    *\n    * @param private_key The private key of the sender\n    * @param record_1 The first record to combine\n    * @param record_2 The second record to combine\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param join_proving_key (optional) Provide a proving key to use for the join function\n    * @param join_verifying_key (optional) Provide a verifying key to use for the join function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {RecordPlaintext} record_1\n    * @param {RecordPlaintext} record_2\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {ProvingKey | undefined} [join_proving_key]\n    * @param {VerifyingKey | undefined} [join_verifying_key]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildJoinTransaction(private_key, record_1, record_2, fee_credits, fee_record, url, join_proving_key, join_verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(record_1, RecordPlaintext);\n        var ptr0 = record_1.__destroy_into_raw();\n        _assertClass(record_2, RecordPlaintext);\n        var ptr1 = record_2.__destroy_into_raw();\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        var ptr3 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(join_proving_key)) {\n            _assertClass(join_proving_key, ProvingKey);\n            ptr4 = join_proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(join_verifying_key)) {\n            _assertClass(join_verifying_key, VerifyingKey);\n            ptr5 = join_verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr8 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildJoinTransaction(private_key.__wbg_ptr, ptr0, ptr1, fee_credits, ptr2, ptr3, len3, ptr4, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Split an Aleo credits record into two separate records. This function does not require a fee.\n    *\n    * @param private_key The private key of the sender\n    * @param split_amount The amount of the credit split. This amount will be subtracted from the\n    * value of the record and two new records will be created with the split amount and the remainder\n    * @param amount_record The record to split\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param split_proving_key (optional) Provide a proving key to use for the split function\n    * @param split_verifying_key (optional) Provide a verifying key to use for the split function\n    * @returns {Transaction | Error} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {number} split_amount\n    * @param {RecordPlaintext} amount_record\n    * @param {string | undefined} [url]\n    * @param {ProvingKey | undefined} [split_proving_key]\n    * @param {VerifyingKey | undefined} [split_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildSplitTransaction(private_key, split_amount, amount_record, url, split_proving_key, split_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(amount_record, RecordPlaintext);\n        var ptr0 = amount_record.__destroy_into_raw();\n        var ptr1 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(split_proving_key)) {\n            _assertClass(split_proving_key, ProvingKey);\n            ptr2 = split_proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(split_verifying_key)) {\n            _assertClass(split_verifying_key, VerifyingKey);\n            ptr3 = split_verifying_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr4 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildSplitTransaction(private_key.__wbg_ptr, split_amount, ptr0, ptr1, len1, ptr2, ptr3, ptr4);\n        return takeObject(ret);\n    }\n    /**\n    * Send credits from one Aleo account to another\n    *\n    * @param private_key The private key of the sender\n    * @param amount_credits The amount of credits to send\n    * @param recipient The recipient of the transaction\n    * @param transfer_type The type of the transfer (options: \"private\", \"public\", \"private_to_public\", \"public_to_private\")\n    * @param amount_record The record to fund the amount from\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param transfer_verifying_key (optional) Provide a verifying key to use for the transfer\n    * function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {number} amount_credits\n    * @param {string} recipient\n    * @param {string} transfer_type\n    * @param {string | undefined} caller\n    * @param {RecordPlaintext | undefined} amount_record\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {ProvingKey | undefined} [transfer_proving_key]\n    * @param {VerifyingKey | undefined} [transfer_verifying_key]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildTransferTransaction(private_key, amount_credits, recipient, transfer_type, caller, amount_record, fee_credits, fee_record, url, transfer_proving_key, transfer_verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(recipient, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(transfer_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(caller) ? 0 : passStringToWasm0(caller, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(amount_record)) {\n            _assertClass(amount_record, RecordPlaintext);\n            ptr3 = amount_record.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr4 = fee_record.__destroy_into_raw();\n        }\n        var ptr5 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len5 = WASM_VECTOR_LEN;\n        let ptr6 = 0;\n        if (!isLikeNone(transfer_proving_key)) {\n            _assertClass(transfer_proving_key, ProvingKey);\n            ptr6 = transfer_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(transfer_verifying_key)) {\n            _assertClass(transfer_verifying_key, VerifyingKey);\n            ptr7 = transfer_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr8 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr9 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr9 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr10 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr10 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildTransferTransaction(private_key.__wbg_ptr, amount_credits, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, fee_credits, ptr4, ptr5, len5, ptr6, ptr7, ptr8, ptr9, ptr10);\n        return takeObject(ret);\n    }\n    /**\n    * Synthesize proving and verifying keys for a program\n    *\n    * @param program {string} The program source code of the program to synthesize keys for\n    * @param function_id {string} The function to synthesize keys for\n    * @param inputs {Array} The inputs to the function\n    * @param imports {Object | undefined} The imports for the program\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} function_id\n    * @param {Array<any>} inputs\n    * @param {object | undefined} [imports]\n    * @returns {Promise<KeyPair>}\n    */\n    static synthesizeKeyPair(private_key, program, function_id, inputs, imports) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_synthesizeKeyPair(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n}\n\nconst ProvingKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_provingkey_free(ptr >>> 0));\n/**\n* Proving key for a function within an Aleo program\n*/\nclass ProvingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ProvingKey.prototype);\n        obj.__wbg_ptr = ptr;\n        ProvingKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ProvingKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_provingkey_free(ptr);\n    }\n    /**\n    * Verify if the proving key is for the bond_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"bond_public_proving_key.bin\");\n    * provingKey.isBondPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the bond_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isBondPublicProver() {\n        const ret = wasm.provingkey_isBondPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the bond_validator function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"bond_validator_proving_key.bin\");\n    * provingKey.isBondPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the bond_validator function, false if otherwise\n    * @returns {boolean}\n    */\n    isBondValidatorProver() {\n        const ret = wasm.provingkey_isBondValidatorProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the claim_unbond function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"claim_unbond_proving_key.bin\");\n    * provingKey.isClaimUnbondProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the claim_unbond function, false if otherwise\n    * @returns {boolean}\n    */\n    isClaimUnbondPublicProver() {\n        const ret = wasm.provingkey_isClaimUnbondPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the fee_private function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"fee_private_proving_key.bin\");\n    * provingKey.isFeePrivateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the fee_private function, false if otherwise\n    * @returns {boolean}\n    */\n    isFeePrivateProver() {\n        const ret = wasm.provingkey_isFeePrivateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the fee_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"fee_public_proving_key.bin\");\n    * provingKey.isFeePublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the fee_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isFeePublicProver() {\n        const ret = wasm.provingkey_isFeePublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the inclusion function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"inclusion_proving_key.bin\");\n    * provingKey.isInclusionProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the inclusion function, false if otherwise\n    * @returns {boolean}\n    */\n    isInclusionProver() {\n        const ret = wasm.provingkey_isInclusionProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the join function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"join_proving_key.bin\");\n    * provingKey.isJoinProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the join function, false if otherwise\n    * @returns {boolean}\n    */\n    isJoinProver() {\n        const ret = wasm.provingkey_isJoinProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the set_validator_state function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"set_validator_set_proving_key.bin\");\n    * provingKey.isSetValidatorStateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the set_validator_state function, false if otherwise\n    * @returns {boolean}\n    */\n    isSetValidatorStateProver() {\n        const ret = wasm.provingkey_isSetValidatorStateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the split function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"split_proving_key.bin\");\n    * provingKey.isSplitProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the split function, false if otherwise\n    * @returns {boolean}\n    */\n    isSplitProver() {\n        const ret = wasm.provingkey_isSplitProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_private function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_private_proving_key.bin\");\n    * provingKey.isTransferPrivateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_private function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPrivateProver() {\n        const ret = wasm.provingkey_isTransferPrivateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_private_to_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_private_to_public_proving_key.bin\");\n    * provingKey.isTransferPrivateToPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_private_to_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPrivateToPublicProver() {\n        const ret = wasm.provingkey_isTransferPrivateToPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_public_proving_key.bin\");\n    * provingKey.isTransferPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPublicProver() {\n        const ret = wasm.provingkey_isTransferPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_public_as_signer function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_public_as_signer_proving_key.bin\");\n    * provingKey.isTransferPublicAsSignerProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPublicAsSignerProver() {\n        const ret = wasm.provingkey_isTransferPublicAsSignerProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_public_to_private function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_public_to_private_proving_key.bin\");\n    * provingKey.isTransferPublicToPrivateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_public_to_private function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPublicToPrivateProver() {\n        const ret = wasm.provingkey_isTransferPublicToPrivateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the unbond_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"unbond_public.bin\");\n    * provingKey.isUnbondPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the unbond_public_prover function, false if otherwise\n    * @returns {boolean}\n    */\n    isUnbondPublicProver() {\n        const ret = wasm.provingkey_isUnbondPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Return the checksum of the proving key\n    *\n    * @returns {string} Checksum of the proving key\n    * @returns {string}\n    */\n    checksum() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_checksum(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a copy of the proving key\n    *\n    * @returns {ProvingKey} A copy of the proving key\n    * @returns {ProvingKey}\n    */\n    copy() {\n        const ret = wasm.provingkey_copy(this.__wbg_ptr);\n        return ProvingKey.__wrap(ret);\n    }\n    /**\n    * Construct a new proving key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte array representation of a proving key\n    * @returns {ProvingKey | Error}\n    * @param {Uint8Array} bytes\n    * @returns {ProvingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a proving key from string\n    *\n    * @param {string | Error} String representation of the proving key\n    * @param {string} string\n    * @returns {ProvingKey}\n    */\n    static fromString(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the byte representation of a proving key\n    *\n    * @returns {Uint8Array | Error} Byte array representation of a proving key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the proving key\n    *\n    * @returns {string} String representation of the proving key\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RecordCiphertextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_recordciphertext_free(ptr >>> 0));\n/**\n* Encrypted Aleo record\n*/\nclass RecordCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n        RecordCiphertextFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RecordCiphertextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordciphertext_free(ptr);\n    }\n    /**\n    * Create a record ciphertext from a string\n    *\n    * @param {string} record String representation of a record ciphertext\n    * @returns {RecordCiphertext | Error} Record ciphertext\n    * @param {string} record\n    * @returns {RecordCiphertext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the string reprensentation of the record ciphertext\n    *\n    * @returns {string} String representation of the record ciphertext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Decrypt the record ciphertext into plaintext using the view key. The record will only\n    * decrypt if the record was encrypted by the account corresponding to the view key\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {RecordPlaintext | Error} Record plaintext object\n    * @param {ViewKey} view_key\n    * @returns {RecordPlaintext}\n    */\n    decrypt(view_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(view_key, ViewKey);\n            wasm.recordciphertext_decrypt(retptr, this.__wbg_ptr, view_key.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Determines if the account corresponding to the view key is the owner of the record\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {boolean}\n    * @param {ViewKey} view_key\n    * @returns {boolean}\n    */\n    isOwner(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.recordciphertext_isOwner(this.__wbg_ptr, view_key.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst RecordPlaintextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_recordplaintext_free(ptr >>> 0));\n/**\n* Plaintext representation of an Aleo record\n*/\nclass RecordPlaintext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordPlaintext.prototype);\n        obj.__wbg_ptr = ptr;\n        RecordPlaintextFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RecordPlaintextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordplaintext_free(ptr);\n    }\n    /**\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {Field}\n    */\n    commitment(program_id, record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_commitment(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Field.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return a record plaintext from a string.\n    *\n    * @param {string} record String representation of a plaintext representation of an Aleo record\n    * @returns {RecordPlaintext | Error} Record plaintext\n    * @param {string} record\n    * @returns {RecordPlaintext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the record plaintext string\n    *\n    * @returns {string} String representation of the record plaintext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the amount of microcredits in the record\n    *\n    * @returns {u64} Amount of microcredits in the record\n    * @returns {bigint}\n    */\n    microcredits() {\n        const ret = wasm.recordplaintext_microcredits(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * Returns the nonce of the record. This can be used to uniquely identify a record.\n    *\n    * @returns {string} Nonce of the record\n    * @returns {string}\n    */\n    nonce() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_nonce(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Attempt to get the serial number of a record to determine whether or not is has been spent\n    *\n    * @param {PrivateKey} private_key Private key of the account that owns the record\n    * @param {string} program_id Program ID of the program that the record is associated with\n    * @param {string} record_name Name of the record\n    * @returns {string | Error} Serial number of the record\n    * @param {PrivateKey} private_key\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {string}\n    */\n    serialNumberString(private_key, program_id, record_name) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_serialNumberString(retptr, this.__wbg_ptr, private_key.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr3 = r0;\n            var len3 = r1;\n            if (r3) {\n                ptr3 = 0; len3 = 0;\n                throw takeObject(r2);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n}\n\nconst SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signature_free(ptr >>> 0));\n/**\n* Cryptographic signature of a message signed by an Aleo account\n*/\nclass Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr);\n    }\n    /**\n    * Sign a message with a private key\n    *\n    * @param {PrivateKey} private_key The private key to sign the message with\n    * @param {Uint8Array} message Byte representation of the message to sign\n    * @returns {Signature} Signature of the message\n    * @param {PrivateKey} private_key\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    static sign(private_key, message) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(private_key.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Verify a signature of a message with an address\n    *\n    * @param {Address} address The address to verify the signature with\n    * @param {Uint8Array} message Byte representation of the message to verify\n    * @returns {boolean} True if the signature is valid, false otherwise\n    * @param {Address} address\n    * @param {Uint8Array} message\n    * @returns {boolean}\n    */\n    verify(address, message) {\n        _assertClass(address, Address);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_verify(this.__wbg_ptr, address.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get a signature from a string representation of a signature\n    *\n    * @param {string} signature String representation of a signature\n    * @returns {Signature} Signature\n    * @param {string} signature\n    * @returns {Signature}\n    */\n    static from_string(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_from_string(ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a signature\n    *\n    * @returns {string} String representation of a signature\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst TransactionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_transaction_free(ptr >>> 0));\n/**\n* Webassembly Representation of an Aleo transaction\n*\n* This object is created when generating an on-chain function deployment or execution and is the\n* object that should be submitted to the Aleo Network in order to deploy or execute a function.\n*/\nclass Transaction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Transaction.prototype);\n        obj.__wbg_ptr = ptr;\n        TransactionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TransactionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n    * Create a transaction from a string\n    *\n    * @param {string} transaction String representation of a transaction\n    * @returns {Transaction | Error}\n    * @param {string} transaction\n    * @returns {Transaction}\n    */\n    static fromString(transaction) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(transaction, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transaction_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the transaction as a string. If you want to submit this transaction to the Aleo Network\n    * this function will create the string that should be submitted in the `POST` data.\n    *\n    * @returns {string} String representation of the transaction\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the id of the transaction. This is the merkle root of the transaction's inclusion proof.\n    *\n    * This value can be used to query the status of the transaction on the Aleo Network to see\n    * if it was successful. If successful, the transaction will be included in a block and this\n    * value can be used to lookup the transaction data on-chain.\n    *\n    * @returns {string} Transaction id\n    * @returns {string}\n    */\n    transactionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the type of the transaction (will return \"deploy\" or \"execute\")\n    *\n    * @returns {string} Transaction type\n    * @returns {string}\n    */\n    transactionType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionType(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst VerifyingKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_verifyingkey_free(ptr >>> 0));\n/**\n* Verifying key for a function within an Aleo program\n*/\nclass VerifyingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerifyingKey.prototype);\n        obj.__wbg_ptr = ptr;\n        VerifyingKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VerifyingKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verifyingkey_free(ptr);\n    }\n    /**\n    * Returns the verifying key for the bond_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_public function\n    * @returns {VerifyingKey}\n    */\n    static bondPublicVerifier() {\n        const ret = wasm.verifyingkey_bondPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the bond_validator function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_validator function\n    * @returns {VerifyingKey}\n    */\n    static bondValidatorVerifier() {\n        const ret = wasm.verifyingkey_bondValidatorVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the claim_delegator function\n    *\n    * @returns {VerifyingKey} Verifying key for the claim_unbond_public function\n    * @returns {VerifyingKey}\n    */\n    static claimUnbondPublicVerifier() {\n        const ret = wasm.verifyingkey_claimUnbondPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the fee_private function\n    *\n    * @returns {VerifyingKey} Verifying key for the fee_private function\n    * @returns {VerifyingKey}\n    */\n    static feePrivateVerifier() {\n        const ret = wasm.verifyingkey_feePrivateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the fee_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the fee_public function\n    * @returns {VerifyingKey}\n    */\n    static feePublicVerifier() {\n        const ret = wasm.verifyingkey_feePublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the inclusion function\n    *\n    * @returns {VerifyingKey} Verifying key for the inclusion function\n    * @returns {VerifyingKey}\n    */\n    static inclusionVerifier() {\n        const ret = wasm.verifyingkey_inclusionVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the join function\n    *\n    * @returns {VerifyingKey} Verifying key for the join function\n    * @returns {VerifyingKey}\n    */\n    static joinVerifier() {\n        const ret = wasm.verifyingkey_joinVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the set_validator_state function\n    *\n    * @returns {VerifyingKey} Verifying key for the set_validator_state function\n    * @returns {VerifyingKey}\n    */\n    static setValidatorStateVerifier() {\n        const ret = wasm.verifyingkey_setValidatorStateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the split function\n    *\n    * @returns {VerifyingKey} Verifying key for the split function\n    * @returns {VerifyingKey}\n    */\n    static splitVerifier() {\n        const ret = wasm.verifyingkey_splitVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_private function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_private function\n    * @returns {VerifyingKey}\n    */\n    static transferPrivateVerifier() {\n        const ret = wasm.verifyingkey_transferPrivateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_private_to_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_private_to_public function\n    * @returns {VerifyingKey}\n    */\n    static transferPrivateToPublicVerifier() {\n        const ret = wasm.verifyingkey_transferPrivateToPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_public function\n    * @returns {VerifyingKey}\n    */\n    static transferPublicVerifier() {\n        const ret = wasm.verifyingkey_transferPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_public_as_signer function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_public_as_signer function\n    * @returns {VerifyingKey}\n    */\n    static transferPublicAsSignerVerifier() {\n        const ret = wasm.verifyingkey_transferPublicAsSignerVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_public_to_private function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_public_to_private function\n    * @returns {VerifyingKey}\n    */\n    static transferPublicToPrivateVerifier() {\n        const ret = wasm.verifyingkey_transferPublicToPrivateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the unbond_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the unbond_public function\n    * @returns {VerifyingKey}\n    */\n    static unbondPublicVerifier() {\n        const ret = wasm.verifyingkey_unbondPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the bond_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_public function\n    * @returns {boolean}\n    */\n    isBondPublicVerifier() {\n        const ret = wasm.verifyingkey_isBondPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Returns the verifying key for the bond_validator function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_validator function\n    * @returns {boolean}\n    */\n    isBondValidatorVerifier() {\n        const ret = wasm.verifyingkey_isBondValidatorVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the claim_delegator function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isClaimUnbondPublicVerifier() {\n        const ret = wasm.verifyingkey_isClaimUnbondPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the fee_private function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isFeePrivateVerifier() {\n        const ret = wasm.verifyingkey_isFeePrivateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the fee_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isFeePublicVerifier() {\n        const ret = wasm.verifyingkey_isFeePublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the inclusion function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isInclusionVerifier() {\n        const ret = wasm.verifyingkey_isInclusionVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the join function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isJoinVerifier() {\n        const ret = wasm.verifyingkey_isJoinVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the set_validator_state function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isSetValidatorStateVerifier() {\n        const ret = wasm.verifyingkey_isSetValidatorStateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the split function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isSplitVerifier() {\n        const ret = wasm.verifyingkey_isSplitVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_private function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPrivateVerifier() {\n        const ret = wasm.verifyingkey_isTransferPrivateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_private_to_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPrivateToPublicVerifier() {\n        const ret = wasm.verifyingkey_isTransferPrivateToPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPublicVerifier() {\n        const ret = wasm.verifyingkey_isTransferPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_public_as_signer function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPublicAsSignerVerifier() {\n        const ret = wasm.verifyingkey_isTransferPublicAsSignerVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_public_to_private function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPublicToPrivateVerifier() {\n        const ret = wasm.verifyingkey_isTransferPublicToPrivateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the unbond_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isUnbondPublicVerifier() {\n        const ret = wasm.verifyingkey_isUnbondPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get the checksum of the verifying key\n    *\n    * @returns {string} Checksum of the verifying key\n    * @returns {string}\n    */\n    checksum() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_checksum(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a copy of the verifying key\n    *\n    * @returns {VerifyingKey} A copy of the verifying key\n    * @returns {VerifyingKey}\n    */\n    copy() {\n        const ret = wasm.verifyingkey_copy(this.__wbg_ptr);\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Construct a new verifying key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte representation of a verifying key\n    * @returns {VerifyingKey | Error}\n    * @param {Uint8Array} bytes\n    * @returns {VerifyingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a verifying key from string\n    *\n    * @param {String} string String representation of a verifying key\n    * @returns {VerifyingKey | Error}\n    * @param {string} string\n    * @returns {VerifyingKey}\n    */\n    static fromString(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a byte array from a verifying key\n    *\n    * @returns {Uint8Array | Error} Byte representation of a verifying key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the verifying key\n    *\n    * @returns {String} String representation of the verifying key\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst ViewKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_viewkey_free(ptr >>> 0));\n/**\n*/\nclass ViewKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ViewKey.prototype);\n        obj.__wbg_ptr = ptr;\n        ViewKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ViewKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_viewkey_free(ptr);\n    }\n    /**\n    * Create a new view key from a private key\n    *\n    * @param {PrivateKey} private_key Private key\n    * @returns {ViewKey} View key\n    * @param {PrivateKey} private_key\n    * @returns {ViewKey}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.privatekey_to_view_key(private_key.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Create a new view key from a string representation of a view key\n    *\n    * @param {string} view_key String representation of a view key\n    * @returns {ViewKey} View key\n    * @param {string} view_key\n    * @returns {ViewKey}\n    */\n    static from_string(view_key) {\n        const ptr0 = passStringToWasm0(view_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.viewkey_from_string(ptr0, len0);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a view key\n    *\n    * @returns {string} String representation of a view key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.viewkey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the address corresponding to a view key\n    *\n    * @returns {Address} Address\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.address_from_view_key(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Decrypt a record ciphertext with a view key\n    *\n    * @param {string} ciphertext String representation of a record ciphertext\n    * @returns {string} String representation of a record plaintext\n    * @param {string} ciphertext\n    * @returns {string}\n    */\n    decrypt(ciphertext) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.viewkey_decrypt(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_new_71801a555ad9f2aa = function() { return handleError(function () {\n        const ret = new XMLHttpRequest();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_overrideMimeType_ee9c51919ceb418b = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).overrideMimeType(getStringFromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_open_c9eb0cf2c9d95679 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4, arg5) {\n        getObject(arg0).open(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4), arg5 !== 0);\n    }, arguments) };\n    imports.wbg.__wbg_send_80d29985093c1ec5 = function() { return handleError(function (arg0) {\n        getObject(arg0).send();\n    }, arguments) };\n    imports.wbg.__wbg_response_7c2e2759084f7279 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).response;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_status_d485fb5a478426fb = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_new_72fb9a18b5ae2624 = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_1f9b04f170055d33 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_new_ab6fd82b10560829 = function() { return handleError(function () {\n        const ret = new Headers();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_0d76b0581eca6298 = function() { return handleError(function () {\n        const ret = new AbortController();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_signal_a61f78a3478fd9bc = function(arg0) {\n        const ret = getObject(arg0).signal;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_append_7bfcb4937d1d5e29 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_Response_849eb93e75734b6e = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Response;\n        } catch (_) {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_status_61a01141acd3cf74 = function(arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    };\n    imports.wbg.__wbg_url_5f6dc4009ac5f99d = function(arg0, arg1) {\n        const ret = getObject(arg1).url;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_headers_9620bfada380764a = function(arg0) {\n        const ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_iterator_2cee6dadfd956dfa = function() {\n        const ret = Symbol.iterator;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_get_e3c254076557e348 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(getObject(arg0), getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbg_call_27c0f87801dedf93 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_next_40fc327bfc8770e6 = function(arg0) {\n        const ret = getObject(arg0).next;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_next_196c84450b364254 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).next();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_done_298b57d23c0fc80c = function(arg0) {\n        const ret = getObject(arg0).done;\n        return ret;\n    };\n    imports.wbg.__wbg_value_d93c65011f51a456 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_abort_2aa7521d5690750e = function(arg0) {\n        getObject(arg0).abort();\n    };\n    imports.wbg.__wbg_stringify_8887fe74e1c50d81 = function() { return handleError(function (arg0) {\n        const ret = JSON.stringify(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_log_0159ca40cddf5b15 = function(arg0, arg1) {\n        console.log(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_bigint_from_u64 = function(arg0) {\n        const ret = BigInt.asUintN(64, arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_b3ca7c6051f9bec1 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_keypair_new = function(arg0) {\n        const ret = KeyPair.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_module = function() {\n        const ret = __wbg_init.__wbindgen_wasm_module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_spawnWorker_f6acaddb2e29dc4a = function(arg0, arg1, arg2, arg3) {\n        const ret = spawnWorker(getObject(arg0), getObject(arg1), getObject(arg2), arg3 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_executionresponse_new = function(arg0) {\n        const ret = ExecutionResponse.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_transaction_new = function(arg0) {\n        const ret = Transaction.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_66ae46612e7f0234 = function(arg0) {\n        const ret = new Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_d4638f722068f043 = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_new_16b304a2cfa7ff4a = function() {\n        const ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_push_a5b05aedc7234f9f = function(arg0, arg1) {\n        const ret = getObject(arg0).push(getObject(arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_arrayBuffer_29931d52c7206b02 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).arrayBuffer();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_63b92bc8671ed464 = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_c20a40f15020d68a = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_new_81740750da40724f = function(arg0, arg1) {\n        try {\n            var state0 = {a: arg0, b: arg1};\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_279(a, state0.b, arg0, arg1);\n                } finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return addHeapObject(ret);\n        } finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_abda76e883ba8a5f = function() {\n        const ret = new Error();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stack_658279fe44541cf6 = function(arg0, arg1) {\n        const ret = getObject(arg1).stack;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_error_f851667af71bcfc6 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_buffer_12d079cc21e14bdb = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_randomFillSync_5c9c955aa56b6049 = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).randomFillSync(takeObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_subarray_a1f73cd4b5b42fe1 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_3aa56aa6edec874c = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_set_a47bac70306a19a7 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_crypto_1d1f22824a6a080c = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_process_4a72847cc503995b = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_f686565e586dd935 = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_104a2ff8d6ea03a2 = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbg_require_cca90b1a94a0255b = function() { return handleError(function () {\n        const ret = module.require;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_msCrypto_eb05e62b530a1508 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_e9b4878cebadb3d3 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_cd7af8117672b8b8 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_get_bd8e338fbd5f5cc8 = function(arg0, arg1) {\n        const ret = getObject(arg0)[arg1 >>> 0];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_self_ce0dbfc45cf2f5be = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_c6fb939a7f436783 = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_d1e6af4856ba331b = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_207b558942527489 = function() { return handleError(function () {\n        const ret = global.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_e258087cd0daa0ea = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_has_0af94d20077affa2 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.has(getObject(arg0), getObject(arg1));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_fetch_bc7c8e27076a5c84 = function(arg0) {\n        const ret = fetch(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_fetch_921fad6ef9e883dd = function(arg0, arg1) {\n        const ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_rethrow = function(arg0) {\n        throw takeObject(arg0);\n    };\n    imports.wbg.__wbg_then_a73caa9a87991566 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_0c86a60e8fcfe9f6 = function(arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_queueMicrotask_481971b0d87f3dd4 = function(arg0) {\n        queueMicrotask(getObject(arg0));\n    };\n    imports.wbg.__wbg_queueMicrotask_3cbae2ec6b6cd3d6 = function(arg0) {\n        const ret = getObject(arg0).queueMicrotask;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_resolve_b0083a7967828ec8 = function(arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_5d743fc9058ba01a = function() {\n        const ret = Atomics.waitAsync;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_8cccba86b0f574cb = function(arg0) {\n        const ret = new Int32Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_46d5c36955b71a79 = function(arg0, arg1, arg2) {\n        const ret = Atomics.waitAsync(getObject(arg0), arg1, arg2);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_async_19c0400d97cc72fe = function(arg0) {\n        const ret = getObject(arg0).async;\n        return ret;\n    };\n    imports.wbg.__wbg_value_571d60108110e917 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_link_fc1eedd35dc7e0a6 = function(arg0) {\n        const ret = \"data:application/javascript,\" + encodeURIComponent(`onmessage = function (ev) {\n            let [ia, index, value] = ev.data;\n            ia = new Int32Array(ia.buffer);\n            let result = Atomics.wait(ia, index, value);\n            postMessage(result);\n        };\n        `);\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_new_d1187ae36d662ef9 = function() { return handleError(function (arg0, arg1) {\n        const ret = new Worker(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setonmessage_503809e5bb51bd33 = function(arg0, arg1) {\n        getObject(arg0).onmessage = getObject(arg1);\n    };\n    imports.wbg.__wbg_of_6a70eed8d41f469c = function(arg0, arg1, arg2) {\n        const ret = Array.of(getObject(arg0), getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_postMessage_7380d10e8b8269df = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).postMessage(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_data_3ce7c145ca4fbcdc = function(arg0) {\n        const ret = getObject(arg0).data;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithstrandinit_3fd6fba4083ff2d0 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_responseText_c67ed2d48db10769 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg1).responseText;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    }, arguments) };\n    imports.wbg.__wbindgen_closure_wrapper5763 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 538, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper5788 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 538, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, maybe_memory) {\n    imports.wbg.memory = maybe_memory || new WebAssembly.Memory({initial:25,maximum:65536,shared:true});\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedBigInt64Memory0 = null;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n\n    const imports = __wbg_get_imports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nvar exports = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Address: Address,\n    Execution: Execution,\n    ExecutionResponse: ExecutionResponse,\n    Field: Field,\n    KeyPair: KeyPair,\n    Metadata: Metadata,\n    OfflineQuery: OfflineQuery,\n    PrivateKey: PrivateKey,\n    PrivateKeyCiphertext: PrivateKeyCiphertext,\n    Program: Program,\n    ProgramManager: ProgramManager,\n    ProvingKey: ProvingKey,\n    RecordCiphertext: RecordCiphertext,\n    RecordPlaintext: RecordPlaintext,\n    Signature: Signature,\n    Transaction: Transaction,\n    VerifyingKey: VerifyingKey,\n    ViewKey: ViewKey,\n    default: __wbg_init,\n    initSync: initSync,\n    initThreadPool: initThreadPool,\n    runRayonThread: runRayonThread,\n    verifyFunctionExecution: verifyFunctionExecution\n});\n\nconst wasm_path = \"assets/aleo_wasm.wasm\";\n\n            \n            var Cargo = async (opt = {}) => {\n                let {importHook, serverPath, initializeHook} = opt;\n\n                let final_path = wasm_path;\n\n                if (serverPath != null) {\n                    final_path = serverPath + /[^\\/\\\\]*$/.exec(final_path)[0];\n                }\n\n                if (importHook != null) {\n                    final_path = importHook(final_path);\n                }\n\n                if (initializeHook != null) {\n                    await initializeHook(__wbg_init, final_path);\n\n                } else {\n                    await __wbg_init(final_path);\n                }\n\n                return exports;\n            };\n\nexport { Cargo as default };\n//# sourceMappingURL=wasm.js.map\n","import wasm from \"../dist/wasm.js\";\n\nconst {\n    initThreadPool: wasmInitThreadPool,\n    Address,\n    Execution,\n    ExecutionResponse,\n    Field,\n    Metadata,\n    OfflineQuery,\n    Private,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    ProgramManager,\n    Signature,\n    Transaction,\n    ViewKey,\n    VerifyingKey,\n    verifyFunctionExecution,\n} = await wasm({\n    importHook: () => {\n        return new URL(\"assets/aleo_wasm.wasm\", import.meta.url);\n    },\n});\n\nasync function initThreadPool(threads) {\n    if (threads == null) {\n        threads = navigator.hardwareConcurrency;\n    }\n\n    console.info(`Spawning ${threads} threads`);\n\n    await wasmInitThreadPool(new URL(\"worker.js\", import.meta.url), threads);\n}\n\nexport {\n    initThreadPool,\n    Address,\n    Execution,\n    ExecutionResponse,\n    Field,\n    Metadata,\n    OfflineQuery,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    ProgramManager,\n    Signature,\n    Transaction,\n    ViewKey,\n    VerifyingKey,\n    verifyFunctionExecution,\n};\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    return createProxy(ep, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        ep.addEventListener(\"message\", function l(ev) {\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\n                return;\n            }\n            ep.removeEventListener(\"message\", l);\n            resolve(ev.data);\n        });\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n"],"names":["spawnWorker","url","module","memory","address","Promise","resolve","worker","Worker","type","addEventListener","event","setTimeout","unref","capture","once","postMessage","wasm","heap","Array","fill","undefined","getObject","idx","push","heap_next","length","dropObject","takeObject","ret","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","Error","cachedUint8Memory0","getUint8Memory0","buffer","Uint8Array","getStringFromWasm0","ptr","len","slice","addHeapObject","obj","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encode","encodeString","arg","view","buf","set","read","written","passStringToWasm0","malloc","realloc","subarray","mem","offset","code","charCodeAt","isLikeNone","x","cachedInt32Memory0","getInt32Memory0","Int32Array","debugString","val","description","name","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","message","stack","CLOSURE_DTORS","FinalizationRegistry","register","unregister","state","__wbindgen_export_3","get","dtor","a","b","makeMutClosure","arg0","arg1","f","cnt","real","args","original","__wbg_adapter_34","arg2","_dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h442b5e922f6f9710","_assertClass","instance","klass","passArray8ToWasm0","verifyFunctionExecution$1","execution","verifying_key","program","function_id","retptr","__wbindgen_add_to_stack_pointer","Execution$1","VerifyingKey$1","Program$1","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","verifyFunctionExecution","__wbg_ptr","r0","r1","cachedBigInt64Memory0","getBigInt64Memory0","BigInt64Array","getArrayU8FromWasm0","runRayonThread","receiver","initThreadPool$1","num_threads","initThreadPool","handleError","apply","this","e","__wbindgen_exn_store","__wbg_adapter_279","arg3","wasm_bindgen__convert__closures__invoke2_mut__h5ab12ffe4b82d47a","AddressFinalization","__wbg_address_free","Address","__wrap","Object","create","prototype","__destroy_into_raw","free","from_private_key","private_key","PrivateKey$1","address_from_private_key","from_view_key","view_key","ViewKey$1","address_from_view_key","from_string","address_from_string","to_string","deferred1_0","deferred1_1","address_to_string","__wbindgen_free","verify","signature","Signature$1","address_verify","ExecutionFinalization","__wbg_execution_free","Execution","execution_toString","fromString","execution_fromString","ExecutionResponseFinalization","__wbg_executionresponse_free","ExecutionResponse","getOutputs","executionresponse_getOutputs","getExecution","executionresponse_getExecution","getKeys","executionresponse_getKeys","KeyPair","getProvingKey","executionresponse_getProvingKey","ProvingKey$1","getVerifyingKey","executionresponse_getVerifyingKey","getFunctionId","executionresponse_getFunctionId","getProgram","executionresponse_getProgram","FieldFinalization","__wbg_field_free","Field","field_toString","field","field_fromString","KeyPairFinalization","__wbg_keypair_free","constructor","proving_key","ptr1","keypair_new","provingKey","keypair_provingKey","verifyingKey","keypair_verifyingKey","MetadataFinalization","__wbg_metadata_free","Metadata","locator","__wbg_get_metadata_locator","__wbg_set_metadata_locator","prover","__wbg_get_metadata_prover","__wbg_set_metadata_prover","verifier","__wbg_get_metadata_verifier","__wbg_set_metadata_verifier","__wbg_get_metadata_verifyingKey","__wbg_set_metadata_verifyingKey","baseUrl","metadata_baseUrl","bond_public","metadata_bond_public","bond_validator","metadata_bond_validator","claim_unbond_public","metadata_claim_unbond_public","fee_private","metadata_fee_private","fee_public","metadata_fee_public","inclusion","metadata_inclusion","join","metadata_join","set_validator_state","metadata_set_validator_state","split","metadata_split","transfer_private","metadata_transfer_private","transfer_private_to_public","metadata_transfer_private_to_public","transfer_public","metadata_transfer_public","transfer_public_as_signer","metadata_transfer_public_as_signer","transfer_public_to_private","metadata_transfer_public_to_private","unbond_public","metadata_unbond_public","OfflineQueryFinalization","__wbg_offlinequery_free","OfflineQuery","state_root","offlinequery_new","addStatePath","commitment","state_path","len1","offlinequery_addStatePath","offlinequery_toString","s","offlinequery_fromString","PrivateKeyFinalization","__wbg_privatekey_free","PrivateKey","privatekey_new","from_seed_unchecked","seed","privatekey_from_seed_unchecked","privatekey_from_string","privatekey_to_string","to_view_key","privatekey_to_view_key","to_address","privatekey_to_address","Address$1","sign","privatekey_sign","newEncrypted","secret","privatekey_newEncrypted","PrivateKeyCiphertext$1","toCiphertext","privatekey_toCiphertext","fromPrivateKeyCiphertext","ciphertext","privatekey_fromPrivateKeyCiphertext","PrivateKeyCiphertextFinalization","__wbg_privatekeyciphertext_free","PrivateKeyCiphertext","encryptPrivateKey","decryptToPrivateKey","privatekeyciphertext_decryptToPrivateKey","privatekeyciphertext_toString","privatekeyciphertext_fromString","ProgramFinalization","__wbg_program_free","Program","program_fromString","program_toString","hasFunction","function_name","program_hasFunction","getFunctions","program_getFunctions","getFunctionInputs","program_getFunctionInputs","getMappings","program_getMappings","getRecordMembers","record_name","program_getRecordMembers","getStructMembers","struct_name","program_getStructMembers","getCreditsProgram","program_getCreditsProgram","id","program_id","program_address","isEqual","other","program_isEqual","getImports","program_getImports","ProgramManagerFinalization","__wbg_programmanager_free","buildDeploymentTransaction","fee_credits","fee_record","imports","fee_proving_key","fee_verifying_key","offline_query","RecordPlaintext$1","ptr2","len2","ptr3","ptr4","ptr5","OfflineQuery$1","programmanager_buildDeploymentTransaction","estimateDeploymentFee","programmanager_estimateDeploymentFee","estimateProgramNameCost","programmanager_estimateProgramNameCost","r2","BigInt","asUintN","executeFunctionOffline","_function","inputs","prove_execution","cache","len4","programmanager_executeFunctionOffline","buildExecutionTransaction","len3","ptr6","ptr7","ptr8","programmanager_buildExecutionTransaction","estimateExecutionFee","programmanager_estimateExecutionFee","estimateFinalizeFee","programmanager_estimateFinalizeFee","buildJoinTransaction","record_1","record_2","join_proving_key","join_verifying_key","programmanager_buildJoinTransaction","buildSplitTransaction","split_amount","amount_record","split_proving_key","split_verifying_key","programmanager_buildSplitTransaction","buildTransferTransaction","amount_credits","recipient","transfer_type","caller","transfer_proving_key","transfer_verifying_key","len5","ptr9","ptr10","programmanager_buildTransferTransaction","synthesizeKeyPair","programmanager_synthesizeKeyPair","ProvingKeyFinalization","__wbg_provingkey_free","ProvingKey","isBondPublicProver","provingkey_isBondPublicProver","isBondValidatorProver","provingkey_isBondValidatorProver","isClaimUnbondPublicProver","provingkey_isClaimUnbondPublicProver","isFeePrivateProver","provingkey_isFeePrivateProver","isFeePublicProver","provingkey_isFeePublicProver","isInclusionProver","provingkey_isInclusionProver","isJoinProver","provingkey_isJoinProver","isSetValidatorStateProver","provingkey_isSetValidatorStateProver","isSplitProver","provingkey_isSplitProver","isTransferPrivateProver","provingkey_isTransferPrivateProver","isTransferPrivateToPublicProver","provingkey_isTransferPrivateToPublicProver","isTransferPublicProver","provingkey_isTransferPublicProver","isTransferPublicAsSignerProver","provingkey_isTransferPublicAsSignerProver","isTransferPublicToPrivateProver","provingkey_isTransferPublicToPrivateProver","isUnbondPublicProver","provingkey_isUnbondPublicProver","checksum","provingkey_checksum","copy","provingkey_copy","fromBytes","bytes","provingkey_fromBytes","string","provingkey_fromString","toBytes","provingkey_toBytes","v1","provingkey_toString","RecordCiphertextFinalization","__wbg_recordciphertext_free","RecordCiphertext","record","recordciphertext_fromString","recordciphertext_toString","decrypt","recordciphertext_decrypt","isOwner","recordciphertext_isOwner","RecordPlaintextFinalization","__wbg_recordplaintext_free","RecordPlaintext","recordplaintext_commitment","Field$1","recordplaintext_fromString","recordplaintext_toString","microcredits","recordplaintext_microcredits","nonce","recordplaintext_nonce","serialNumberString","deferred4_0","deferred4_1","recordplaintext_serialNumberString","r3","SignatureFinalization","__wbg_signature_free","Signature","signature_verify","signature_from_string","signature_to_string","TransactionFinalization","__wbg_transaction_free","Transaction","transaction","transaction_fromString","transaction_toString","transactionId","transaction_transactionId","transactionType","transaction_transactionType","VerifyingKeyFinalization","__wbg_verifyingkey_free","VerifyingKey","bondPublicVerifier","verifyingkey_bondPublicVerifier","bondValidatorVerifier","verifyingkey_bondValidatorVerifier","claimUnbondPublicVerifier","verifyingkey_claimUnbondPublicVerifier","feePrivateVerifier","verifyingkey_feePrivateVerifier","feePublicVerifier","verifyingkey_feePublicVerifier","inclusionVerifier","verifyingkey_inclusionVerifier","joinVerifier","verifyingkey_joinVerifier","setValidatorStateVerifier","verifyingkey_setValidatorStateVerifier","splitVerifier","verifyingkey_splitVerifier","transferPrivateVerifier","verifyingkey_transferPrivateVerifier","transferPrivateToPublicVerifier","verifyingkey_transferPrivateToPublicVerifier","transferPublicVerifier","verifyingkey_transferPublicVerifier","transferPublicAsSignerVerifier","verifyingkey_transferPublicAsSignerVerifier","transferPublicToPrivateVerifier","verifyingkey_transferPublicToPrivateVerifier","unbondPublicVerifier","verifyingkey_unbondPublicVerifier","isBondPublicVerifier","verifyingkey_isBondPublicVerifier","isBondValidatorVerifier","verifyingkey_isBondValidatorVerifier","isClaimUnbondPublicVerifier","verifyingkey_isClaimUnbondPublicVerifier","isFeePrivateVerifier","verifyingkey_isFeePrivateVerifier","isFeePublicVerifier","verifyingkey_isFeePublicVerifier","isInclusionVerifier","verifyingkey_isInclusionVerifier","isJoinVerifier","verifyingkey_isJoinVerifier","isSetValidatorStateVerifier","verifyingkey_isSetValidatorStateVerifier","isSplitVerifier","verifyingkey_isSplitVerifier","isTransferPrivateVerifier","verifyingkey_isTransferPrivateVerifier","isTransferPrivateToPublicVerifier","verifyingkey_isTransferPrivateToPublicVerifier","isTransferPublicVerifier","verifyingkey_isTransferPublicVerifier","isTransferPublicAsSignerVerifier","verifyingkey_isTransferPublicAsSignerVerifier","isTransferPublicToPrivateVerifier","verifyingkey_isTransferPublicToPrivateVerifier","isUnbondPublicVerifier","verifyingkey_isUnbondPublicVerifier","verifyingkey_checksum","verifyingkey_copy","verifyingkey_fromBytes","verifyingkey_fromString","verifyingkey_toBytes","verifyingkey_toString","ViewKeyFinalization","__wbg_viewkey_free","ViewKey","viewkey_from_string","viewkey_to_string","deferred3_0","deferred3_1","viewkey_decrypt","async","__wbg_load","Response","WebAssembly","instantiateStreaming","headers","console","warn","arrayBuffer","instantiate","Instance","__wbg_get_imports","wbg","__wbindgen_object_drop_ref","__wbg_new_71801a555ad9f2aa","XMLHttpRequest","arguments","__wbg_overrideMimeType_ee9c51919ceb418b","overrideMimeType","__wbg_open_c9eb0cf2c9d95679","arg4","arg5","open","__wbg_send_80d29985093c1ec5","send","__wbg_response_7c2e2759084f7279","response","__wbg_status_d485fb5a478426fb","status","__wbg_new_72fb9a18b5ae2624","__wbindgen_string_new","__wbg_set_1f9b04f170055d33","Reflect","__wbg_new_ab6fd82b10560829","Headers","__wbindgen_object_clone_ref","__wbg_new_0d76b0581eca6298","AbortController","__wbg_signal_a61f78a3478fd9bc","signal","__wbg_append_7bfcb4937d1d5e29","append","__wbg_instanceof_Response_849eb93e75734b6e","result","__wbg_status_61a01141acd3cf74","__wbg_url_5f6dc4009ac5f99d","__wbg_headers_9620bfada380764a","__wbg_iterator_2cee6dadfd956dfa","Symbol","iterator","__wbg_get_e3c254076557e348","__wbindgen_is_function","__wbg_call_27c0f87801dedf93","__wbindgen_is_object","__wbg_next_40fc327bfc8770e6","next","__wbg_next_196c84450b364254","__wbg_done_298b57d23c0fc80c","done","__wbg_value_d93c65011f51a456","value","__wbg_abort_2aa7521d5690750e","abort","__wbg_stringify_8887fe74e1c50d81","__wbindgen_string_get","__wbg_log_0159ca40cddf5b15","log","__wbindgen_bigint_from_u64","__wbg_call_b3ca7c6051f9bec1","__wbg_keypair_new","__wbindgen_module","__wbg_init","__wbindgen_wasm_module","__wbindgen_memory","__wbg_spawnWorker_f6acaddb2e29dc4a","__wbg_executionresponse_new","ExecutionResponse$1","__wbg_transaction_new","Transaction$1","__wbg_newwithlength_66ae46612e7f0234","__wbg_set_d4638f722068f043","__wbindgen_cb_drop","__wbg_new_16b304a2cfa7ff4a","__wbg_push_a5b05aedc7234f9f","__wbg_arrayBuffer_29931d52c7206b02","__wbg_new_63b92bc8671ed464","__wbg_length_c20a40f15020d68a","__wbg_new_81740750da40724f","state0","cb0","__wbindgen_number_new","__wbg_new_abda76e883ba8a5f","__wbg_stack_658279fe44541cf6","__wbg_error_f851667af71bcfc6","deferred0_0","deferred0_1","error","__wbg_buffer_12d079cc21e14bdb","__wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb","__wbg_randomFillSync_5c9c955aa56b6049","randomFillSync","__wbg_subarray_a1f73cd4b5b42fe1","__wbg_getRandomValues_3aa56aa6edec874c","getRandomValues","__wbg_set_a47bac70306a19a7","__wbg_crypto_1d1f22824a6a080c","crypto","__wbg_process_4a72847cc503995b","process","__wbg_versions_f686565e586dd935","versions","__wbg_node_104a2ff8d6ea03a2","node","__wbindgen_is_string","__wbg_require_cca90b1a94a0255b","require","__wbg_msCrypto_eb05e62b530a1508","msCrypto","__wbg_newwithlength_e9b4878cebadb3d3","__wbg_length_cd7af8117672b8b8","__wbg_get_bd8e338fbd5f5cc8","__wbg_self_ce0dbfc45cf2f5be","self","__wbg_window_c6fb939a7f436783","window","__wbg_globalThis_d1e6af4856ba331b","globalThis","__wbg_global_207b558942527489","global","__wbindgen_is_undefined","__wbg_newnoargs_e258087cd0daa0ea","Function","__wbg_has_0af94d20077affa2","has","__wbg_fetch_bc7c8e27076a5c84","fetch","__wbg_fetch_921fad6ef9e883dd","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","__wbg_then_a73caa9a87991566","then","__wbg_then_0c86a60e8fcfe9f6","__wbg_queueMicrotask_481971b0d87f3dd4","queueMicrotask","__wbg_queueMicrotask_3cbae2ec6b6cd3d6","__wbg_resolve_b0083a7967828ec8","__wbg_waitAsync_5d743fc9058ba01a","Atomics","waitAsync","__wbg_new_8cccba86b0f574cb","__wbg_waitAsync_46d5c36955b71a79","__wbg_async_19c0400d97cc72fe","__wbg_value_571d60108110e917","__wbindgen_link_fc1eedd35dc7e0a6","encodeURIComponent","__wbg_new_d1187ae36d662ef9","__wbg_setonmessage_503809e5bb51bd33","onmessage","__wbg_of_6a70eed8d41f469c","of","__wbg_postMessage_7380d10e8b8269df","__wbg_data_3ce7c145ca4fbcdc","data","__wbg_newwithstrandinit_3fd6fba4083ff2d0","Request","__wbg_responseText_c67ed2d48db10769","responseText","__wbindgen_closure_wrapper5763","__wbindgen_closure_wrapper5788","__wbg_init_memory","maybe_memory","Memory","initial","maximum","shared","__wbg_finalize_init","exports","__wbindgen_start","initSync","Module","input","URL","freeze","__proto__","Metadata$1","ProgramManager","ProgramManager$1","RecordCiphertext$1","default","wasm_path","wasmInitThreadPool","Private","opt","importHook","serverPath","initializeHook","final_path","Cargo","threads","navigator","hardwareConcurrency","info","proxyMarker","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","transferHandlers","Map","canHandle","serialize","port1","port2","MessageChannel","expose","deserialize","port","start","wrap","serialized","isError","assign","ep","allowedOrigins","callback","ev","origin","allowedOrigin","RegExp","test","isAllowedOrigin","path","argumentList","map","fromWireValue","returnValue","parent","reduce","prop","rawValue","proxy","transfers","transferCache","transfer","catch","wireValue","transferables","toWireValue","removeEventListener","closeEndPoint","TypeError","endpoint","isMessagePort","close","target","createProxy","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","WeakMap","proxyFinalizers","newCount","isProxyReleased","Proxy","_target","unregisterProxy","r","p","bind","_thisArg","rawArgumentList","last","processArguments","construct","registerProxy","processed","v","arr","concat","handler","serializedValue","msg","Math","floor","random","Number","MAX_SAFE_INTEGER","l"],"sourceRoot":""}