(self.webpackChunkaleo_website=self.webpackChunkaleo_website||[]).push([[495],{495:(e,r,t)=>{t.a(e,(async(e,i)=>{try{t.d(r,{AleoKeyProvider:()=>u,AleoKeyProviderParams:()=>h,PrivateKey:()=>n.ZD,ProgramManager:()=>f,ProgramManagerBase:()=>n.Ao,initThreadPool:()=>n.Fs,verifyFunctionExecution:()=>n.Yc});var n=t(877),a=e([n]);n=(a.then?(await a)():a)[0];async function o(e,r){const t=await fetch(e,r);if(!t.ok)throw new Error(t.status+" could not get URL "+e);return t}async function s(e,r){r.method="POST";const t=await fetch(e,r);if(!t.ok)throw new Error(t.status+" could not post URL "+e);return t}class c{host;headers;account;constructor(e,r){this.host=e+"/testnet",r&&r.headers?this.headers=r.headers:this.headers={"X-Aleo-SDK-Version":"0.6.12"}}setAccount(e){this.account=e}getAccount(){return this.account}setHost(e){this.host=e+"/testnet"}async fetchData(e="/"){try{const r=await o(this.host+e,{headers:this.headers});return await r.json()}catch(e){throw new Error("Error fetching data.")}}async findUnspentRecords(e,r,t,i,a,o){if(o=o||[],e<0)throw new Error("Start height must be greater than or equal to 0");const s=new Array;let c,h,u,f,d=0,l=BigInt(0);if(void 0===t){if(void 0===this.account)throw new Error("Private key must be specified in an argument to findOwnedRecords or set in the AleoNetworkClient");u=this.account._privateKey}else try{u=t instanceof n.ZD?t:n.ZD.from_string(t)}catch(e){throw new Error("Error parsing private key provided.")}const y=u.to_view_key();try{const e=await this.getLatestHeight();if("number"!=typeof e)throw new Error("Error fetching latest block height.");f=e}catch(e){throw new Error("Error fetching latest block height.")}if(h="number"==typeof r&&r<=f?r:f,e>h)throw new Error("Start height must be less than or equal to end height.");for(;h>e;){c=h-50,c<e&&(c=e);try{const e=await this.getBlockRange(c,h);if(h=c,!(e instanceof Error))for(let r=0;r<e.length;r++){const t=e[r].transactions;if(void 0!==t)for(let e=0;e<t.length;e++){const r=t[e];if("execute"==r.type){const e=r.transaction;if(e.execution&&void 0!==e.execution.transitions)for(let r=0;r<e.execution.transitions.length;r++){const t=e.execution.transitions[r];if("credits.aleo"===t.program&&void 0!==t.outputs)for(let e=0;e<t.outputs.length;e++){const r=t.outputs[e];if("record"===r.type)try{const e=n.KC.fromString(r.value);if(e.isOwner(y)){const r=e.decrypt(y),t=r.nonce();if(o.includes(t))continue;const n=r.serialNumberString(u,"credits.aleo","credits");try{await this.getTransitionId(n)}catch(e){if(!i&&(s.push(r),"number"==typeof a&&(l+=r.microcredits(),l>=BigInt(a))))return s;if(void 0!==i&&i.length>0){let e=0;if(r.microcredits()>i[e]){if(e+=1,s.push(r),"number"==typeof a&&(l+=r.microcredits(),l>=BigInt(a)))return s;if(s.length>=i.length)return s}}}}}catch(e){}}}}}}}catch(e){if(console.warn("Error fetching blocks in range: "+c.toString()+"-"+h.toString()),console.warn("Error: ",e),d+=1,d>10)return console.warn("10 failures fetching records reached. Returning records fetched so far"),s}}return s}async getBlock(e){try{return await this.fetchData("/block/"+e)}catch(e){throw new Error("Error fetching block.")}}async getBlockRange(e,r){try{return await this.fetchData("/blocks?start="+e+"&end="+r)}catch(t){throw new Error("Error fetching blocks between "+e+" and "+r+".")}}async getDeploymentTransactionIDForProgram(e){e instanceof n.BP&&(e=e.toString());try{return(await this.fetchData("/find/transactionID/deployment/"+e)).replace('"',"")}catch(e){throw new Error("Error fetching deployment transaction for program.")}}async getDeploymentTransactionForProgram(e){try{const r=await this.getDeploymentTransactionIDForProgram(e);return await this.getTransaction(r)}catch(e){throw new Error("Error fetching deployment transaction for program.")}}async getLatestBlock(){try{return await this.fetchData("/latest/block")}catch(e){throw new Error("Error fetching latest block.")}}async getLatestCommittee(){try{return await this.fetchData("/committee/latest")}catch(e){throw new Error("Error fetching latest block.")}}async getLatestHeight(){try{return await this.fetchData("/latest/height")}catch(e){throw new Error("Error fetching latest height.")}}async getProgram(e){try{return await this.fetchData("/program/"+e)}catch(e){throw new Error("Error fetching program")}}async getProgramObject(e){try{return n.BP.fromString(e)}catch(r){try{return n.BP.fromString(await this.getProgram(e))}catch(r){throw new Error(`${e} is neither a program name or a valid program`)}}}async getProgramImports(e){try{const r={},t=(e instanceof n.BP?e:await this.getProgramObject(e)).getImports();for(let e=0;e<t.length;e++){const i=t[e];if(!r.hasOwnProperty(i)){const e=await this.getProgram(i),t=await this.getProgramImports(i);for(const e in t)r.hasOwnProperty(e)||(r[e]=t[e]);r[i]=e}}return r}catch(e){throw K("Error fetching program imports: "+e)}}async getProgramImportNames(e){try{return(e instanceof n.BP?e:await this.getProgramObject(e)).getImports()}catch(e){throw new Error("Error fetching program imports with error: "+e)}}async getProgramMappingNames(e){try{return await this.fetchData("/program/"+e+"/mappings")}catch(e){throw new Error("Error fetching program mappings - ensure the program exists on chain before trying again")}}async getProgramMappingValue(e,r,t){try{return await this.fetchData("/program/"+e+"/mapping/"+r+"/"+t)}catch(e){throw new Error("Error fetching mapping value - ensure the mapping exists and the key is correct")}}async getStateRoot(){try{return await this.fetchData("/latest/stateRoot")}catch(e){throw new Error("Error fetching Aleo state root")}}async getTransaction(e){try{return await this.fetchData("/transaction/"+e)}catch(e){throw new Error("Error fetching transaction.")}}async getTransactions(e){try{return await this.fetchData("/block/"+e.toString()+"/transactions")}catch(e){throw new Error("Error fetching transactions.")}}async getTransactionsInMempool(){try{return await this.fetchData("/memoryPool/transactions")}catch(e){throw new Error("Error fetching transactions from mempool.")}}async getTransitionId(e){try{return await this.fetchData("/find/transitionID/"+e)}catch(e){throw new Error("Error fetching transition ID.")}}async submitTransaction(e){const r=e instanceof n.ZX?e.toString():e;try{const e=await s(this.host+"/transaction/broadcast",{body:r,headers:Object.assign({},this.headers,{"Content-Type":"application/json"})});try{return await e.json()}catch(e){throw new Error(`Error posting transaction. Aleo network response: ${e.message}`)}}catch(e){throw new Error(`Error posting transaction: No response received: ${e.message}`)}}}class h{name;proverUri;verifierUri;cacheKey;constructor(e){this.proverUri=e.proverUri,this.verifierUri=e.verifierUri,this.cacheKey=e.cacheKey,this.name=e.name}}class u{cache;cacheOption;keyUris;async fetchBytes(e="/"){try{const r=await o(e),t=await r.arrayBuffer();return new Uint8Array(t)}catch(e){throw new Error("Error fetching data."+e)}}constructor(){this.keyUris=y,this.cache=new Map,this.cacheOption=!1}useCache(e){this.cacheOption=e}clearCache(){this.cache.clear()}cacheKeys(e,r){const[t,i]=r;this.cache.set(e,[t.toBytes(),i.toBytes()])}containsKeys(e){return this.cache.has(e)}deleteKeys(e){return this.cache.delete(e)}getKeys(e){if(console.debug(`Checking if key exists in cache. KeyId: ${e}`),this.cache.has(e)){const[r,t]=this.cache.get(e);return[n.$7.fromBytes(r),n.pF.fromBytes(t)]}return new Error("Key not found in cache.")}async functionKeys(e){if(e){let r,t,i;if("name"in e&&"string"==typeof e.name){let r=g.getKey(e.name);if(!(r instanceof Error))return this.fetchCreditsKeys(r)}if("proverUri"in e&&"string"==typeof e.proverUri&&(r=e.proverUri),"verifierUri"in e&&"string"==typeof e.verifierUri&&(t=e.verifierUri),"cacheKey"in e&&"string"==typeof e.cacheKey&&(i=e.cacheKey),r&&t)return await this.fetchRemoteKeys(r,t,i);if(i)return this.getKeys(i)}throw Error("Invalid parameters provided, must provide either a cacheKey and/or a proverUrl and a verifierUrl")}async fetchRemoteKeys(e,r,t){try{if(this.cacheOption){t||(t=e);const i=this.cache.get(t);if(void 0!==i)return[n.$7.fromBytes(i[0]),n.pF.fromBytes(i[1])];{console.debug("Fetching proving keys from url "+e);const i=n.$7.fromBytes(await this.fetchBytes(e));console.debug("Fetching verifying keys "+r);const a=await this.getVerifyingKey(r);return this.cache.set(t,[i.toBytes(),a.toBytes()]),[i,a]}}{const t=n.$7.fromBytes(await this.fetchBytes(e));return[t,await this.getVerifyingKey(r)]}}catch(t){throw new Error(`Error: ${t} fetching fee proving and verifying keys from ${e} and ${r}.`)}}async fetchProvingKey(e,r){try{if(this.cacheOption){r||(r=e);const t=this.cache.get(r);if(void 0!==t)return n.$7.fromBytes(t[0]);console.debug("Fetching proving keys from url "+e);return n.$7.fromBytes(await this.fetchBytes(e))}return n.$7.fromBytes(await this.fetchBytes(e))}catch(r){throw new Error(`Error: ${r} fetching fee proving keys from ${e}`)}}async fetchCreditsKeys(e){try{if(this.cache.has(e.locator)&&this.cacheOption){const r=this.cache.get(e.locator);return[n.$7.fromBytes(r[0]),n.pF.fromBytes(r[1])]}{const r=e.verifyingKey(),t=await this.fetchProvingKey(e.prover,e.locator);return this.cacheOption&&this.cache.set(g.bond_public.locator,[t.toBytes(),r.toBytes()]),[t,r]}}catch(e){throw new Error(`Error: fetching credits.aleo keys: ${e}`)}}async bondPublicKeys(){return this.fetchCreditsKeys(g.bond_public)}bondValidatorKeys(){return this.fetchCreditsKeys(g.bond_validator)}claimUnbondPublicKeys(){return this.fetchCreditsKeys(g.claim_unbond_public)}async transferKeys(e){if(b.has(e))return await this.fetchCreditsKeys(g.transfer_private);if(m.has(e))return await this.fetchCreditsKeys(g.transfer_private_to_public);if(_.has(e))return await this.fetchCreditsKeys(g.transfer_public);if(P.has(e))return await this.fetchCreditsKeys(g.transfer_public_as_signer);if(k.has(e))return await this.fetchCreditsKeys(g.transfer_public_to_private);throw new Error("Invalid visibility type")}async joinKeys(){return await this.fetchCreditsKeys(g.join)}async splitKeys(){return await this.fetchCreditsKeys(g.split)}async feePrivateKeys(){return await this.fetchCreditsKeys(g.fee_private)}async feePublicKeys(){return await this.fetchCreditsKeys(g.fee_public)}async getVerifyingKey(e){switch(e){case g.bond_public.verifier:return g.bond_public.verifyingKey();case g.bond_validator.verifier:return g.bond_validator.verifyingKey();case g.claim_unbond_public.verifier:return g.claim_unbond_public.verifyingKey();case g.fee_private.verifier:return g.fee_private.verifyingKey();case g.fee_public.verifier:return g.fee_public.verifyingKey();case g.inclusion.verifier:return g.inclusion.verifyingKey();case g.join.verifier:return g.join.verifyingKey();case g.set_validator_state.verifier:return g.set_validator_state.verifyingKey();case g.split.verifier:return g.split.verifyingKey();case g.transfer_private.verifier:return g.transfer_private.verifyingKey();case g.transfer_private_to_public.verifier:return g.transfer_private_to_public.verifyingKey();case g.transfer_public.verifier:return g.transfer_public.verifyingKey();case g.transfer_public_as_signer.verifier:return g.transfer_public_as_signer.verifyingKey();case g.transfer_public_to_private.verifier:return g.transfer_public_to_private.verifyingKey();case g.unbond_public.verifier:return g.unbond_public.verifyingKey();default:try{const r=await o(e),t=await r.text();return n.pF.fromString(t)}catch(r){try{return n.pF.fromBytes(await this.fetchBytes(e))}catch(e){return new Error("Invalid verifying key. Error: "+e)}}}}unBondPublicKeys(){return this.fetchCreditsKeys(g.unbond_public)}}class f{account;keyProvider;host;networkClient;recordProvider;constructor(e,r,t){this.host=e||"https://api.explorer.aleo.org/v1",this.networkClient=new c(this.host),this.keyProvider=r||new u,this.recordProvider=t}setAccount(e){this.account=e}setKeyProvider(e){this.keyProvider=e}setHost(e){this.host=e,this.networkClient.setHost(e)}setRecordProvider(e){this.recordProvider=e}async deploy(e,r,t,i,a,o){try{const r=n.BP.fromString(e);let t;try{t=await this.networkClient.getProgram(r.id())}catch(e){console.log(`Program ${r.id()} does not exist on the network, deploying...`)}if("string"==typeof t)throw`Program ${r.id()} already exists on the network, please rename your program`}catch(e){throw K(`Error validating program: ${e}`)}let s,c=o;if(void 0===o&&void 0!==this.account&&(c=this.account.privateKey()),void 0===c)throw"No private key provided and no private key set in the ProgramManager";try{a=t?await this.getCreditsRecord(r,[],a,i):void 0}catch(e){throw K(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`)}try{s=t?await this.keyProvider.feePrivateKeys():await this.keyProvider.feePublicKeys()}catch(e){throw K(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`)}const[h,u]=s;let f;try{f=await this.networkClient.getProgramImports(e)}catch(e){throw K(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`)}const d=await n.Ao.buildDeploymentTransaction(c,e,r,a,this.host,f,h,u);return await this.networkClient.submitTransaction(d)}async buildExecutionTransaction(e){const{programName:r,functionName:t,fee:i,privateFee:a,inputs:o,recordSearchParams:s,keySearchParams:c,privateKey:h,offlineQuery:u}=e;let f=e.feeRecord,d=e.provingKey,l=e.verifyingKey,y=e.program,p=e.imports;if(void 0===y)try{y=await this.networkClient.getProgram(r)}catch(e){throw K(`Error finding ${r}. Network response: '${e}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`)}else y instanceof n.BP&&(y=y.toString());let g,v=h;if(void 0===h&&void 0!==this.account&&(v=this.account.privateKey()),void 0===v)throw"No private key provided and no private key set in the ProgramManager";try{f=a?await this.getCreditsRecord(i,[],f,s):void 0}catch(e){throw K(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`)}try{g=a?await this.keyProvider.feePrivateKeys():await this.keyProvider.feePublicKeys()}catch(e){throw K(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`)}const[w,b]=g;if(!d||!l)try{[d,l]=await this.keyProvider.functionKeys(c)}catch(e){console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)}if(n.BP.fromString(y).getImports().length>0&&!p)try{p=await this.networkClient.getProgramImports(r)}catch(e){throw K(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`)}return await n.Ao.buildExecutionTransaction(v,y,t,o,i,f,this.host,p,d,l,w,b,u)}async execute(e){const r=await this.buildExecutionTransaction(e);return await this.networkClient.submitTransaction(r)}async run(e,r,t,i,a,o,s,c,h,u){let f=h;if(void 0===h&&void 0!==this.account&&(f=this.account.privateKey()),void 0===f)throw"No private key provided and no private key set in the ProgramManager";if(!s||!c)try{[s,c]=await this.keyProvider.functionKeys(o)}catch(e){console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)}return console.log("Running program offline"),console.log("Proving key: ",s),console.log("Verifying key: ",c),n.Ao.executeFunctionOffline(f,e,r,t,i,!1,a,s,c,this.host,u)}async join(e,r,t,i,a,o,s,c){let h,u,f=s;if(void 0===s&&void 0!==this.account&&(f=this.account.privateKey()),void 0===f)throw"No private key provided and no private key set in the ProgramManager";try{h=i?await this.keyProvider.feePrivateKeys():await this.keyProvider.feePublicKeys(),u=await this.keyProvider.joinKeys()}catch(e){throw K(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`)}const[d,l]=h,[y,p]=u;try{o=i?await this.getCreditsRecord(t,[],o,a):void 0}catch(e){throw K(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`)}try{e=e instanceof n.ZF?e:n.ZF.fromString(e),r=r instanceof n.ZF?r:n.ZF.fromString(r)}catch(e){throw K("Records provided are not valid. Please ensure they are valid plaintext records.")}const g=await n.Ao.buildJoinTransaction(f,e,r,t,o,this.host,y,p,d,l,c);return await this.networkClient.submitTransaction(g)}async split(e,r,t,i){let a,o=t;if(void 0===o&&void 0!==this.account&&(o=this.account.privateKey()),void 0===o)throw"No private key provided and no private key set in the ProgramManager";try{a=await this.keyProvider.splitKeys()}catch(e){throw K(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`)}const[s,c]=a;try{r=r instanceof n.ZF?r:n.ZF.fromString(r)}catch(e){throw K("Record provided is not valid. Please ensure it is a valid plaintext record.")}const h=await n.Ao.buildSplitTransaction(o,e,r,this.host,s,c,i);return await this.networkClient.submitTransaction(h)}async synthesizeKeys(e,r,t,i){let a,o=i;void 0===o&&(o=void 0!==this.account?this.account.privateKey():new n.ZD);try{a=await this.networkClient.getProgramImports(e);const i=await n.Ao.synthesizeKeyPair(o,e,r,t,a);return[i.provingKey(),i.verifyingKey()]}catch(e){throw K(`Could not synthesize keys - error ${e}. Please ensure the program is valid and the inputs are correct.`)}}async buildTransferTransaction(e,r,t,i,a,o,s,c,h,u){t=l(t);let f,y,p=h;if(void 0===p&&void 0!==this.account&&(p=this.account.privateKey()),void 0===p)throw"No private key provided and no private key set in the ProgramManager";try{f=a?await this.keyProvider.feePrivateKeys():await this.keyProvider.feePublicKeys(),y=await this.keyProvider.transferKeys(t)}catch(e){throw K(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`)}const[g,v]=f,[w,b]=y;try{const e=[];d(t)?(s=await this.getCreditsRecord(i,[],s,o),e.push(s.nonce())):s=void 0,c=a?await this.getCreditsRecord(i,e,c,o):void 0}catch(e){throw K(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`)}return await n.Ao.buildTransferTransaction(p,e,r,t,s,i,c,this.host,w,b,g,v,u)}async buildTransferPublicTransaction(e,r,t,i,n){return this.buildTransferTransaction(e,r,"public",t,!1,void 0,void 0,void 0,i,n)}async buildTransferPublicAsSignerTransaction(e,r,t,i,n){return this.buildTransferTransaction(e,r,"public",t,!1,void 0,void 0,void 0,i,n)}async transfer(e,r,t,i,n,a,o,s,c,h){const u=await this.buildTransferTransaction(e,r,t,i,n,a,o,s,c,h);return await this.networkClient.submitTransaction(u)}async buildBondPublicTransaction(e,r,t,i,n={}){const a=Math.trunc(1e6*i),{programName:o="credits.aleo",functionName:s="bond_public",fee:c=n.fee||.86,privateFee:u=!1,inputs:f=[e,r,t,`${a.toString()}u64`],keySearchParams:d=new h({proverUri:g.bond_public.prover,verifierUri:g.bond_public.verifier,cacheKey:"credits.aleo/bond_public"}),program:l=this.creditsProgram(),...y}=n,p={programName:o,functionName:s,fee:c,privateFee:u,inputs:f,keySearchParams:d,...y};return await this.buildExecutionTransaction(p)}async bondPublic(e,r,t,i,n={}){const a=await this.buildBondPublicTransaction(e,r,t,i,n);return await this.networkClient.submitTransaction(a)}async buildBondValidatorTransaction(e,r,t,i,n={}){const a=Math.trunc(1e6*t),o=Math.trunc(i),{programName:s="credits.aleo",functionName:c="bond_validator",fee:u=n.fee||.86,privateFee:f=!1,inputs:d=[e,r,`${a.toString()}u64`,`${o.toString()}u8`],keySearchParams:l=new h({proverUri:g.bond_validator.prover,verifierUri:g.bond_validator.verifier,cacheKey:"credits.aleo/bond_validator"}),program:y=this.creditsProgram(),...p}=n,v={programName:s,functionName:c,fee:u,privateFee:f,inputs:d,keySearchParams:l,...p};return await this.buildExecutionTransaction(v)}async bondValidator(e,r,t,i,n={}){const a=await this.buildBondValidatorTransaction(e,r,t,i,n);return await this.networkClient.submitTransaction(a)}async buildUnbondPublicTransaction(e,r,t={}){const i=Math.trunc(1e6*r),{programName:n="credits.aleo",functionName:a="unbond_public",fee:o=t.fee||1.3,privateFee:s=!1,inputs:c=[e,`${i.toString()}u64`],keySearchParams:u=new h({proverUri:g.unbond_public.prover,verifierUri:g.unbond_public.verifier,cacheKey:"credits.aleo/unbond_public"}),program:f=this.creditsProgram(),...d}=t,l={programName:n,functionName:a,fee:o,privateFee:s,inputs:c,keySearchParams:u,...d};return this.buildExecutionTransaction(l)}async unbondPublic(e,r,t={}){const i=await this.buildUnbondPublicTransaction(e,r,t);return await this.networkClient.submitTransaction(i)}async buildClaimUnbondPublicTransaction(e,r={}){const{programName:t="credits.aleo",functionName:i="claim_unbond_public",fee:n=r.fee||2,privateFee:a=!1,inputs:o=[e],keySearchParams:s=new h({proverUri:g.claim_unbond_public.prover,verifierUri:g.claim_unbond_public.verifier,cacheKey:"credits.aleo/claim_unbond_public"}),program:c=this.creditsProgram(),...u}=r,f={programName:t,functionName:i,fee:n,privateFee:a,inputs:o,keySearchParams:s,...u};return await this.buildExecutionTransaction(f)}async claimUnbondPublic(e,r={}){const t=await this.buildClaimUnbondPublicTransaction(e,r);return await this.networkClient.submitTransaction(t)}async buildSetValidatorStateTransaction(e,r={}){const{programName:t="credits.aleo",functionName:i="set_validator_state",fee:n=1,privateFee:a=!1,inputs:o=[e.toString()],keySearchParams:s=new h({proverUri:g.set_validator_state.prover,verifierUri:g.set_validator_state.verifier,cacheKey:"credits.aleo/set_validator_state"}),...c}=r,u={programName:t,functionName:i,fee:n,privateFee:a,inputs:o,keySearchParams:s,...c};return await this.execute(u)}async setValidatorState(e,r={}){const t=await this.buildSetValidatorStateTransaction(e,r);return this.networkClient.submitTransaction(t)}verifyExecution(e){try{const r=e.getExecution(),t=e.getFunctionId(),i=e.getProgram(),a=e.getVerifyingKey();return(0,n.Yc)(r,a,i,t)}catch(e){return console.warn("The execution was not found in the response, cannot verify the execution"),!1}}createProgramFromSource(e){return n.BP.fromString(e)}creditsProgram(){return n.BP.getCreditsProgram()}verifyProgram(e){try{return n.BP.fromString(e),!0}catch(e){return!1}}async getCreditsRecord(e,r,t,i){try{return t instanceof n.ZF?t:n.ZF.fromString(t)}catch(t){try{const t=this.recordProvider;return await t.findCreditsRecord(e,!0,r,i)}catch(e){throw K(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`)}}}}function d(e){return v.has(e)}function l(e){return w.has(e)?e:K(`Invalid transfer type '${e}'. Valid transfer types are 'private', 'privateToPublic', 'public', and 'publicToPrivate'.`)}const y=n.OS.baseUrl();function p(e){const r=n.pF[e.verifyingKey];if(!r)throw new Error("Invalid method name: "+e.verifyingKey);return{name:e.name,locator:e.locator,prover:e.prover,verifier:e.verifier,verifyingKey:r}}const g={bond_public:p(n.OS.bond_public()),bond_validator:p(n.OS.bond_validator()),claim_unbond_public:p(n.OS.claim_unbond_public()),fee_private:p(n.OS.fee_private()),fee_public:p(n.OS.fee_public()),inclusion:p(n.OS.inclusion()),join:p(n.OS.join()),set_validator_state:p(n.OS.set_validator_state()),split:p(n.OS.split()),transfer_private:p(n.OS.transfer_private()),transfer_private_to_public:p(n.OS.transfer_private_to_public()),transfer_public:p(n.OS.transfer_public()),transfer_public_as_signer:p(n.OS.transfer_public_as_signer()),transfer_public_to_private:p(n.OS.transfer_public_to_private()),unbond_public:p(n.OS.unbond_public()),getKey:function(e){return this.hasOwnProperty(e)?this[e]:new Error(`Key "${e}" not found.`)}},v=new Set(["transfer_private","private","transferPrivate","transfer_private_to_public","privateToPublic","transferPrivateToPublic"]),w=new Set(["transfer_private","private","transferPrivate","transfer_private_to_public","privateToPublic","transferPrivateToPublic","transfer_public","transfer_public_as_signer","public","public_as_signer","transferPublic","transferPublicAsSigner","transfer_public_to_private","publicToPrivate","publicAsSigner","transferPublicToPrivate"]),b=new Set(["private","transfer_private","transferPrivate"]),m=new Set(["private_to_public","privateToPublic","transfer_private_to_public","transferPrivateToPublic"]),_=new Set(["public","transfer_public","transferPublic"]),P=new Set(["public_as_signer","transfer_public_as_signer","transferPublicAsSigner"]),k=new Set(["public_to_private","publicToPrivate","transfer_public_to_private","transferPublicToPrivate"]);function K(e){throw console.error(e),e}i()}catch(E){i(E)}}))}}]);
//# sourceMappingURL=495.bundle.js.map