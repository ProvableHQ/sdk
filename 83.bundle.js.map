{"version":3,"file":"83.bundle.js","mappings":"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","sources":["webpack://aleo-website/../../src/utils.ts","webpack://aleo-website/../../src/network-client.ts","webpack://aleo-website/../../src/constants.ts","webpack://aleo-website/../../src/function-key-provider.ts","webpack://aleo-website/../../src/program-manager.ts","webpack://aleo-website/aleo_wasm.js"],"sourcesContent":["export function logAndThrow(message: string): never {\n    console.error(message);\n    throw new Error(message);\n}\n\n\nexport function parseJSON(json: string): any {\n    function revive(key: string, value: any, context: any) {\n        if (Number.isInteger(value)) {\n            return BigInt(context.source);\n        } else {\n            return value;\n        }\n    }\n\n    return JSON.parse(json, revive as any);\n}\n\n\nexport async function get(url: URL | string, options?: RequestInit) {\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not get URL \" + url);\n    }\n\n    return response;\n}\n\n\nexport async function post(url: URL | string, options: RequestInit) {\n    options.method = \"POST\";\n\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not post URL \" + url);\n    }\n\n    return response;\n}\n","import { get, post, parseJSON, logAndThrow } from \"./utils\";\nimport { Account } from \"./account\";\nimport { BlockJSON } from \"./models/blockJSON\";\nimport { TransactionJSON } from \"./models/transaction/transactionJSON\";\nimport {\n  Plaintext,\n  RecordCiphertext,\n  Program,\n  RecordPlaintext,\n  PrivateKey,\n  Transaction,\n} from \"./wasm\";\nimport { ConfirmedTransactionJSON } from \"./models/confirmed_transaction\";\n\ntype ProgramImports = { [key: string]: string | Program };\n\ninterface AleoNetworkClientOptions {\n  headers?: { [key: string]: string };\n}\n\n/**\n * Client library that encapsulates REST calls to publicly exposed endpoints of Aleo nodes. The methods provided in this\n * allow users to query public information from the Aleo blockchain and submit transactions to the network.\n *\n * @param {string} host\n * @example\n * // Connection to a local node\n * const localNetworkClient = new AleoNetworkClient(\"http://localhost:3030\");\n *\n * // Connection to a public beacon node\n * const publicnetworkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n */\nclass AleoNetworkClient {\n  host: string;\n  headers: { [key: string]: string };\n  account: Account | undefined;\n\n  constructor(host: string, options?: AleoNetworkClientOptions) {\n    this.host = host + \"/%%NETWORK%%\";\n\n    if (options && options.headers) {\n      this.headers = options.headers;\n\n    } else {\n      this.headers = {\n        // This is replaced by the actual version by a Rollup plugin\n        \"X-Aleo-SDK-Version\": \"%%VERSION%%\",\n      };\n    }\n  }\n\n  /**\n   * Set an account to use in networkClient calls\n   *\n   * @param {Account} account\n   * @example\n   * const account = new Account();\n   * networkClient.setAccount(account);\n   */\n  setAccount(account: Account) {\n    this.account = account;\n  }\n\n  /**\n   * Return the Aleo account used in the networkClient\n   *\n   * @example\n   * const account = networkClient.getAccount();\n   */\n  getAccount(): Account | undefined {\n    return this.account;\n  }\n\n  /**\n   * Set a new host for the networkClient\n   *\n   * @param {string} host The address of a node hosting the Aleo API\n   * @param host\n   */\n  setHost(host: string) {\n    this.host = host + \"/%%NETWORK%%\";\n  }\n\n  /**\n   * Fetches data from the Aleo network and returns it as a JSON object.\n   *\n   * @param url\n   */\n  async fetchData<Type>(\n      url = \"/\",\n  ): Promise<Type> {\n    try {\n      return parseJSON(await this.fetchRaw(url));\n    } catch (error) {\n      throw new Error(\"Error fetching data.\");\n    }\n  }\n\n  /**\n   * Fetches data from the Aleo network and returns it as an unparsed string.\n   *\n   * This method should be used when it is desired to reconstitute data returned\n   * from the network into a WASM object.\n   *\n   * @param url\n   */\n  async fetchRaw(\n      url = \"/\",\n  ): Promise<string> {\n    try {\n      const response = await get(this.host + url, {\n        headers: this.headers\n      });\n      return await response.text();\n    } catch (error) {\n      throw new Error(\"Error fetching data.\");\n    }\n  }\n\n  /**\n   * Attempts to find unspent records in the Aleo blockchain for a specified private key.\n   * @param {number} startHeight - The height at which to start searching for unspent records\n   * @param {number} endHeight - The height at which to stop searching for unspent records\n   * @param {string | PrivateKey} privateKey - The private key to use to find unspent records\n   * @param {number[]} amounts - The amounts (in microcredits) to search for (eg. [100, 200, 3000])\n   * @param {number} maxMicrocredits - The maximum number of microcredits to search for\n   * @param {string[]} nonces - The nonces of already found records to exclude from the search\n   *\n   * @example\n   * // Find all unspent records\n   * const privateKey = \"[PRIVATE_KEY]\";\n   * const records = networkClient.findUnspentRecords(0, undefined, privateKey);\n   *\n   * // Find specific amounts\n   * const startHeight = 500000;\n   * const amounts = [600000, 1000000];\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, amounts);\n   *\n   * // Find specific amounts with a maximum number of cumulative microcredits\n   * const maxMicrocredits = 100000;\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, undefined, maxMicrocredits);\n   */\n  async findUnspentRecords(\n      startHeight: number,\n      endHeight: number | undefined,\n      privateKey: string | PrivateKey | undefined,\n      amounts: number[] | undefined,\n      maxMicrocredits?: number | undefined,\n      nonces?: string[] | undefined,\n  ): Promise<Array<RecordPlaintext>> {\n    nonces = nonces || [];\n    // Ensure start height is not negative\n    if (startHeight < 0) {\n      throw new Error(\"Start height must be greater than or equal to 0\");\n    }\n\n    // Initialize search parameters\n    const records = new Array<RecordPlaintext>();\n    let start;\n    let end;\n    let resolvedPrivateKey: PrivateKey;\n    let failures = 0;\n    let totalRecordValue = BigInt(0);\n    let latestHeight: number;\n\n    // Ensure a private key is present to find owned records\n    if (typeof privateKey === \"undefined\") {\n      if (typeof this.account === \"undefined\") {\n        throw new Error(\"Private key must be specified in an argument to findOwnedRecords or set in the AleoNetworkClient\");\n      } else {\n        resolvedPrivateKey = this.account._privateKey;\n      }\n    } else {\n      try {\n        resolvedPrivateKey = privateKey instanceof PrivateKey ? privateKey : PrivateKey.from_string(privateKey);\n      } catch (error) {\n        throw new Error(\"Error parsing private key provided.\");\n      }\n    }\n    const viewKey = resolvedPrivateKey.to_view_key();\n\n    // Get the latest height to ensure the range being searched is valid\n    try {\n      const blockHeight = await this.getLatestHeight();\n      if (typeof blockHeight === \"number\") {\n        latestHeight = blockHeight;\n      } else {\n        throw new Error(\"Error fetching latest block height.\");\n      }\n    } catch (error) {\n      throw new Error(\"Error fetching latest block height.\");\n    }\n\n    // If no end height is specified or is greater than the latest height, set the end height to the latest height\n    if (typeof endHeight === \"number\" && endHeight <= latestHeight) {\n      end = endHeight\n    } else {\n      end = latestHeight;\n    }\n\n    // If the starting is greater than the ending height, return an error\n    if (startHeight > end) {\n      throw new Error(\"Start height must be less than or equal to end height.\");\n    }\n\n    // Iterate through blocks in reverse order in chunks of 50\n    while (end > startHeight) {\n      start = end - 50;\n      if (start < startHeight) {\n        start = startHeight;\n      }\n      try {\n        // Get 50 blocks (or the difference between the start and end if less than 50)\n        const blocks = await this.getBlockRange(start, end);\n        end = start;\n        // Iterate through blocks to find unspent records\n        for (let i = 0; i < blocks.length; i++) {\n          const block = blocks[i];\n          const transactions = block.transactions;\n          if (!(typeof transactions === \"undefined\")) {\n            for (let j = 0; j < transactions.length; j++) {\n              const confirmedTransaction = transactions[j];\n              // Search for unspent records in execute transactions of credits.aleo\n              if (confirmedTransaction.type == \"execute\") {\n                const transaction = confirmedTransaction.transaction;\n                if (transaction.execution && !(typeof transaction.execution.transitions == \"undefined\")) {\n                  for (let k = 0; k < transaction.execution.transitions.length; k++) {\n                    const transition = transaction.execution.transitions[k];\n                    // Only search for unspent records in credits.aleo (for now)\n                    if (transition.program !== \"credits.aleo\") {\n                      continue;\n                    }\n                    if (!(typeof transition.outputs == \"undefined\")) {\n                      for (let l = 0; l < transition.outputs.length; l++) {\n                        const output = transition.outputs[l];\n                        if (output.type === \"record\") {\n                          try {\n                            // Create a wasm record ciphertext object from the found output\n                            const record = RecordCiphertext.fromString(output.value);\n                            // Determine if the record is owned by the specified view key\n                            if (record.isOwner(viewKey)) {\n                              // Decrypt the record and get the serial number\n                              const recordPlaintext = record.decrypt(viewKey);\n\n                              // If the record has already been found, skip it\n                              const nonce = recordPlaintext.nonce();\n                              if (nonces.includes(nonce)) {\n                                continue;\n                              }\n\n                              // Otherwise record the nonce that has been found\n                              const serialNumber = recordPlaintext.serialNumberString(resolvedPrivateKey, \"credits.aleo\", \"credits\");\n                              // Attempt to see if the serial number is spent\n                              try {\n                                await this.getTransitionId(serialNumber);\n                              } catch (error) {\n                                // If it's not found, add it to the list of unspent records\n                                if (!amounts) {\n                                  records.push(recordPlaintext);\n                                  // If the user specified a maximum number of microcredits, check if the search has found enough\n                                  if (typeof maxMicrocredits === \"number\") {\n                                    totalRecordValue += recordPlaintext.microcredits();\n                                    // Exit if the search has found the amount specified\n                                    if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                      return records;\n                                    }\n                                  }\n                                }\n                                // If the user specified a list of amounts, check if the search has found them\n                                if (!(typeof amounts === \"undefined\") && amounts.length > 0) {\n                                  let amounts_found = 0;\n                                  if (recordPlaintext.microcredits() > amounts[amounts_found]) {\n                                      amounts_found += 1;\n                                      records.push(recordPlaintext);\n                                      // If the user specified a maximum number of microcredits, check if the search has found enough\n                                      if (typeof maxMicrocredits === \"number\") {\n                                        totalRecordValue += recordPlaintext.microcredits();\n                                        // Exit if the search has found the amount specified\n                                        if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                          return records;\n                                        }\n                                      }\n                                      if (records.length >= amounts.length) {\n                                        return records;\n                                      }\n                                  }\n                                }\n                              }\n                            }\n                          } catch (error) {\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // If there is an error fetching blocks, log it and keep searching\n        console.warn(\"Error fetching blocks in range: \" + start.toString() + \"-\" + end.toString());\n        console.warn(\"Error: \", error);\n        failures += 1;\n        if (failures > 10) {\n          console.warn(\"10 failures fetching records reached. Returning records fetched so far\");\n          return records;\n        }\n      }\n    }\n    return records;\n  }\n\n  /**\n   * Returns the contents of the block at the specified block height.\n   *\n   * @param {number} height\n   * @example\n   * const block = networkClient.getBlock(1234);\n   */\n  async getBlock(height: number): Promise<BlockJSON> {\n    try {\n      const block = await this.fetchData<BlockJSON>(\"/block/\" + height);\n      return block;\n    } catch (error) {\n      throw new Error(\"Error fetching block.\");\n    }\n  }\n\n  /**\n   * Returns a range of blocks between the specified block heights.\n   *\n   * @param {number} start\n   * @param {number} end\n   * @example\n   * const blockRange = networkClient.getBlockRange(2050, 2100);\n   */\n  async getBlockRange(start: number, end: number): Promise<Array<BlockJSON>> {\n    try {\n      return await this.fetchData<Array<BlockJSON>>(\"/blocks?start=\" + start + \"&end=\" + end);\n    } catch (error) {\n      const errorMessage = `Error fetching blocks between ${start} and ${end}.`;\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Returns the deployment transaction id associated with the specified program.\n   *\n   * @param {Program | string} program\n   * @returns {TransactionJSON}\n   */\n  async getDeploymentTransactionIDForProgram(program: Program | string): Promise<string> {\n    if (program instanceof Program) {\n      program = program.toString();\n    }\n    try {\n      const id = await this.fetchData<string>(\"/find/transactionID/deployment/\" + program);\n      return id.replace(\"\\\"\", \"\")\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the deployment transaction associated with a specified program.\n   *\n   * @param {Program | string} program\n   * @returns {TransactionJSON}\n   */\n  async getDeploymentTransactionForProgram(program: Program | string): Promise<TransactionJSON> {\n    try {\n      const transaction_id = <string>await this.getDeploymentTransactionIDForProgram(program);\n      return <TransactionJSON>await this.getTransaction(transaction_id);\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the deployment transaction associated with a specified program as a wasm object.\n   *\n   * @param {Program | string} program\n   * @returns {TransactionJSON}\n   */\n  async getDeploymentTransactioObjectnForProgram(program: Program | string): Promise<Transaction> {\n    try {\n      const transaction_id = <string>await this.getDeploymentTransactionIDForProgram(program);\n      return await this.getTransactionObject(transaction_id);\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the contents of the latest block.\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestBlock();\n   */\n  async getLatestBlock(): Promise<BlockJSON> {\n    try {\n      return await this.fetchData<BlockJSON>(\"/block/latest\") as BlockJSON;\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest committee.\n   *\n   * @returns {Promise<object>} A javascript object containing the latest committee\n   */\n  async getLatestCommittee(): Promise<object> {\n    try {\n      return await this.fetchData<object>(\"/committee/latest\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest block height.\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestHeight();\n   */\n  async getLatestHeight(): Promise<number> {\n    try {\n      return Number(await this.fetchData<bigint>(\"/block/height/latest\"));\n    } catch (error) {\n      throw new Error(\"Error fetching latest height.\");\n    }\n  }\n\n  /**\n   * Returns the source code of a program given a program ID.\n   *\n   * @param {string} programId The program ID of a program deployed to the Aleo Network\n   * @return {Promise<string>} Source code of the program\n   *\n   * @example\n   * const program = networkClient.getProgram(\"hello_hello.aleo\");\n   * const expectedSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * assert.equal(program, expectedSource);\n   */\n  async getProgram(programId: string): Promise<string> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId)\n    } catch (error) {\n      throw new Error(\"Error fetching program\");\n    }\n  }\n\n  /**\n   * Returns a program object from a program ID or program source code.\n   *\n   * @param {string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @return {Promise<Program>} Source code of the program\n   *\n   * @example\n   * const programID = \"hello_hello.aleo\";\n   * const programSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   *\n   * // Get program object from program ID or program source code\n   * const programObjectFromID = await networkClient.getProgramObject(programID);\n   * const programObjectFromSource = await networkClient.getProgramObject(programSource);\n   *\n   * // Both program objects should be equal\n   * assert.equal(programObjectFromID.to_string(), programObjectFromSource.to_string());\n   */\n  async getProgramObject(inputProgram: string): Promise<Program> {\n    try {\n      return Program.fromString(inputProgram);\n    } catch (error) {\n      try {\n        return Program.fromString(<string>(await this.getProgram(inputProgram)));\n      } catch (error) {\n        throw new Error(`${inputProgram} is neither a program name or a valid program`);\n      }\n    }\n  }\n\n  /**\n   *  Returns an object containing the source code of a program and the source code of all programs it imports\n   *\n   * @param {Program | string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @returns {Promise<ProgramImports>} Object of the form { \"program_id\": \"program_source\", .. } containing program id & source code for all program imports\n   *\n   * @example\n   * const double_test_source = \"import multiply_test.aleo;\\n\\nprogram double_test.aleo;\\n\\nfunction double_it:\\n    input r0 as u32.private;\\n    call multiply_test.aleo/multiply 2u32 r0 into r1;\\n    output r1 as u32.private;\\n\"\n   * const double_test = Program.fromString(double_test_source);\n   * const expectedImports = {\n   *     \"multiply_test.aleo\": \"program multiply_test.aleo;\\n\\nfunction multiply:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    mul r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * }\n   *\n   * // Imports can be fetched using the program ID, source code, or program object\n   * let programImports = await networkClient.getProgramImports(\"double_test.aleo\");\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program source code\n   * programImports = await networkClient.getProgramImports(double_test_source);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program object\n   * programImports = await networkClient.getProgramImports(double_test);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   */\n  async getProgramImports(inputProgram: Program | string): Promise<ProgramImports> {\n    try {\n      const imports: ProgramImports = {};\n\n      // Get the program object or fail if the program is not valid or does not exist\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n\n      // Get the list of programs that the program imports\n      const importList = program.getImports();\n\n      // Recursively get any imports that the imported programs have in a depth first search order\n      for (let i = 0; i < importList.length; i++) {\n        const import_id = importList[i];\n        if (!imports.hasOwnProperty(import_id)) {\n          const programSource = <string>await this.getProgram(import_id);\n          const nestedImports = <ProgramImports>await this.getProgramImports(import_id);\n          for (const key in nestedImports) {\n            if (!imports.hasOwnProperty(key)) {\n              imports[key] = nestedImports[key];\n            }\n          }\n          imports[import_id] = programSource;\n        }\n      }\n      return imports;\n    } catch (error: any) {\n      logAndThrow(\"Error fetching program imports: \" + error.message);\n    }\n  }\n\n  /**\n   * Get a list of the program names that a program imports.\n   *\n   * @param {Program | string} inputProgram - The program id or program source code to get the imports of\n   * @returns {string[]} - The list of program names that the program imports\n   *\n   * @example\n   * const programImportsNames = networkClient.getProgramImports(\"double_test.aleo\");\n   * const expectedImportsNames = [\"multiply_test.aleo\"];\n   * assert.deepStrictEqual(programImportsNames, expectedImportsNames);\n   */\n  async getProgramImportNames(inputProgram: Program | string): Promise<string[]> {\n    try {\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n      return program.getImports();\n    } catch (error: any) {\n      throw new Error(\"Error fetching program imports with error: \" + error.message);\n    }\n  }\n\n  /**\n   * Returns the names of the mappings of a program.\n   *\n   * @param {string} programId - The program ID to get the mappings of (e.g. \"credits.aleo\")\n   * @example\n   * const mappings = networkClient.getProgramMappingNames(\"credits.aleo\");\n   * const expectedMappings = [\"account\"];\n   * assert.deepStrictEqual(mappings, expectedMappings);\n   */\n  async getProgramMappingNames(programId: string): Promise<Array<string>> {\n    try {\n      return await this.fetchData<Array<string>>(\"/program/\" + programId + \"/mappings\")\n    } catch (error) {\n      throw new Error(\"Error fetching program mappings - ensure the program exists on chain before trying again\");\n    }\n  }\n\n  /**\n   * Returns the value of a program's mapping for a specific key.\n   *\n   * @param {string} programId - The program ID to get the mapping value of (e.g. \"credits.aleo\")\n   * @param {string} mappingName - The name of the mapping to get the value of (e.g. \"account\")\n   * @param {string | Plaintext} key - The key of the mapping to get the value of (e.g. \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\")\n   * @return {Promise<string>} String representation of the value of the mapping\n   *\n   * @example\n   * // Get public balance of an account\n   * const mappingValue = networkClient.getMappingValue(\"credits.aleo\", \"account\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\");\n   * const expectedValue = \"0u64\";\n   * assert.equal(mappingValue, expectedValue);\n   */\n  async getProgramMappingValue(programId: string, mappingName: string, key: string | Plaintext): Promise<string> {\n    try {\n      const keyString = key instanceof Plaintext ? key.toString() : key;\n      return await this.fetchData<string>(\"/program/\" + programId + \"/mapping/\" + mappingName + \"/\" + keyString)\n    } catch (error) {\n      throw new Error(\"Error fetching mapping value - ensure the mapping exists and the key is correct\");\n    }\n  }\n\n\n  /**\n   * Returns the value of a mapping as a wasm Plaintext object. Returning an\n   * object in this format allows it to be converted to a Js type and for its\n   * internal members to be inspected if it's a struct or array.\n   *\n   * @example\n   * // Get the bond state as an account.\n   * const unbondedState = networkClient.getMappingPlaintext(\"credits.aleo\", \"bonded\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\");\n   *\n   * // Get the two members of the object individually.\n   * const validator = unbondedState.getMember(\"validator\");\n   * const microcredits = unbondedState.getMember(\"microcredits\");\n   *\n   * // Ensure the expected values are correct.\n   * assert.equal(validator, \"aleo1u6940v5m0fzud859xx2c9tj2gjg6m5qrd28n636e6fdd2akvfcgqs34mfd\");\n   * assert.equal(microcredits, BigInt(\"9007199254740991\"));\n   *\n   * // Get a JS object representation of the unbonded state.\n   * const unbondedStateObject = unbondedState.toObject();\n   *\n   * const expectedState = {\n   *     validator: \"aleo1u6940v5m0fzud859xx2c9tj2gjg6m5qrd28n636e6fdd2akvfcgqs34mfd\",\n   *     microcredits: BigInt(\"9007199254740991\")\n   * };\n   * assert.equal(unbondedState, expectedState);\n   *\n   * @param {string} programId - The program ID to get the mapping value of (e.g. \"credits.aleo\")\n   * @param {string} mappingName - The name of the mapping to get the value of (e.g. \"account\")\n   * @param {string | Plaintext} key - The key of the mapping to get the value of (e.g. \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\")\n   *\n   * @return {Promise<string>} String representation of the value of the mapping\n   */\n  async getProgramMappingPlaintext(programId: string, mappingName: string, key: string | Plaintext): Promise<Plaintext> {\n    try {\n      const keyString = key instanceof Plaintext ? key.toString() : key;\n      const value = await this.fetchRaw(\"/program/\" + programId + \"/mapping/\" + mappingName + \"/\" + keyString);\n      return Plaintext.fromString(JSON.parse(value));\n    } catch (error) {\n      throw new Error(\"Failed to fetch mapping value.\" + error);\n    }\n  }\n\n  /**\n   * Returns the latest state/merkle root of the Aleo blockchain.\n   *\n   * @example\n   * const stateRoot = networkClient.getStateRoot();\n   */\n  async getStateRoot(): Promise<string> {\n    try {\n      return await this.fetchData<string>(\"/stateRoot/latest\");\n    } catch (error) {\n      throw new Error(\"Error fetching Aleo state root\");\n    }\n  }\n\n  /**\n   * Returns a transaction by its unique identifier.\n   *\n   * @param {string} id\n   * @example\n   * const transaction = networkClient.getTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n   */\n  async getTransaction(transactionId: string): Promise<TransactionJSON> {\n    try {\n    return await this.fetchData<TransactionJSON>(\"/transaction/\" + transactionId);\n    } catch (error) {\n      throw new Error(\"Error fetching transaction.\");\n    }\n  }\n\n  /**\n   * Returns a transaction as a wasm object. Getting a transaction of this type will allow the ability for the inputs,\n   * outputs, and records to be searched for and displayed.\n   *\n   * @example\n   * const transactionObject = networkClient.getTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n   * // Get the transaction inputs as a JS array.\n   * const transactionOutputs = transactionObject.inputs(true);\n   *\n   * // Get the transaction outputs as a JS object.\n   * const transactionInputs = transactionObject.outputs(true);\n   *\n   * // Get any records generated in transitions in the transaction as a JS object.\n   * const records = transactionObject.records();\n   *\n   * // Get the transaction type.\n   * const transactionType = transactionObject.transactionType();\n   * assert.equal(transactionType, \"Execute\");\n   *\n   * // Get a JS representation of all inputs, outputs, and transaction metadata.\n   * const transactionSummary = transactionObject.summary();\n   *\n   * @param {string} transactionId\n   * @example\n   * const transaction = networkClient.getTransactionObject(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n   */\n  async getTransactionObject(transactionId: string): Promise<Transaction> {\n    try {\n      const transaction = await this.fetchRaw(\"/transaction/\" + transactionId);\n      return Transaction.fromString(transaction);\n    } catch (error) {\n      throw new Error(\"Error fetching transaction.\");\n    }\n  }\n\n  /**\n   * Returns the transactions present at the specified block height.\n   *\n   * @param {number} height\n   * @example\n   * const transactions = networkClient.getTransactions(654);\n   */\n  async getTransactions(height: number): Promise<Array<ConfirmedTransactionJSON>> {\n    try {\n      return await this.fetchData<Array<ConfirmedTransactionJSON>>(\"/block/\" + height.toString() + \"/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions. \" + error);\n    }\n  }\n\n  /**\n   * Returns the transactions in the memory pool. This method requires access to a validator's REST API.\n   *\n   * @example\n   * const transactions = networkClient.getTransactionsInMempool();\n   */\n  async getTransactionsInMempool(): Promise<Array<TransactionJSON>> {\n    try {\n      return await this.fetchData<Array<TransactionJSON>>(\"/memoryPool/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions from mempool.\");\n    }\n  }\n\n  /**\n   * Returns the transition ID of the transition corresponding to the ID of the input or output.\n   * @param {string} inputOrOutputID - ID of the input or output.\n   *\n   * @example\n   * const transitionId = networkClient.getTransitionId(\"2429232855236830926144356377868449890830704336664550203176918782554219952323field\");\n   */\n  async getTransitionId(inputOrOutputID: string): Promise<string> {\n    try {\n      return await this.fetchData<string>(\"/find/transitionID/\" + inputOrOutputID);\n    } catch (error) {\n      throw new Error(\"Error fetching transition ID.\");\n    }\n  }\n\n  /**\n   * Submit an execute or deployment transaction to the Aleo network.\n   *\n   * @param {Transaction | string} transaction  - The transaction to submit to the network\n   * @returns {string} - The transaction id of the submitted transaction or the resulting error\n   */\n  async submitTransaction(transaction: Transaction | string): Promise<string> {\n    const transaction_string = transaction instanceof Transaction ? transaction.toString() : transaction;\n    try {\n      const response = await post(this.host + \"/transaction/broadcast\", {\n        body: transaction_string,\n        headers: Object.assign({}, this.headers, {\n          \"Content-Type\": \"application/json\",\n        }),\n      });\n\n      try {\n        const text = await response.text();\n        return parseJSON(text);\n\n      } catch (error: any) {\n        throw new Error(`Error posting transaction. Aleo network response: ${error.message}`);\n      }\n    } catch (error: any) {\n      throw new Error(`Error posting transaction: No response received: ${error.message}`);\n    }\n  }\n\n  /**\n   * Submit a solution to the Aleo network.\n   *\n   * @param {string} solution The string representation of the solution desired to be submitted to the network.\n   */\n  async submitSolution(solution: string): Promise<string> {\n    try {\n      const response = await post(this.host + \"/solution/broadcast\", {\n        body: solution,\n        headers: Object.assign({}, this.headers, {\n          \"Content-Type\": \"application/json\",\n        }),\n      });\n\n      try {\n        const text = await response.text();\n        return parseJSON(text);\n\n      } catch (error: any) {\n        throw new Error(`Error posting transaction. Aleo network response: ${error.message}`);\n      }\n    } catch (error: any) {\n      throw new Error(`Error posting transaction: No response received: ${error.message}`);\n    }\n  }\n}\n\nexport { AleoNetworkClient, AleoNetworkClientOptions, ProgramImports }\n","import {VerifyingKey, Metadata} from \"./wasm\";\n\nexport const KEY_STORE = Metadata.baseUrl();\n\nexport interface Key {\n    name: string,\n    locator: string,\n    prover: string,\n    verifier: string,\n    verifyingKey: () => VerifyingKey,\n}\n\nfunction convert(metadata: Metadata): Key {\n    // This looks up the method name in VerifyingKey\n    const verifyingKey = (VerifyingKey as any)[metadata.verifyingKey];\n\n    if (!verifyingKey) {\n        throw new Error(\"Invalid method name: \" + metadata.verifyingKey);\n    }\n\n    return {\n        name: metadata.name,\n        locator: metadata.locator,\n        prover: metadata.prover,\n        verifier: metadata.verifier,\n        verifyingKey,\n    };\n}\n\nexport const CREDITS_PROGRAM_KEYS = {\n    bond_public: convert(Metadata.bond_public()),\n    bond_validator: convert(Metadata.bond_validator()),\n    claim_unbond_public: convert(Metadata.claim_unbond_public()),\n    fee_private: convert(Metadata.fee_private()),\n    fee_public: convert(Metadata.fee_public()),\n    inclusion: convert(Metadata.inclusion()),\n    join: convert(Metadata.join()),\n    set_validator_state: convert(Metadata.set_validator_state()),\n    split: convert(Metadata.split()),\n    transfer_private: convert(Metadata.transfer_private()),\n    transfer_private_to_public: convert(Metadata.transfer_private_to_public()),\n    transfer_public: convert(Metadata.transfer_public()),\n    transfer_public_as_signer: convert(Metadata.transfer_public_as_signer()),\n    transfer_public_to_private: convert(Metadata.transfer_public_to_private()),\n    unbond_public: convert(Metadata.unbond_public()),\n    getKey: function(key: string): Key {\n        if (this.hasOwnProperty(key)) {\n            return (this as any)[key] as Key;\n        } else {\n            throw new Error(`Key \"${key}\" not found.`);\n        }\n    }\n};\n\nexport const PRIVATE_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n]);\n\nexport const VALID_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n    \"transfer_public\",\n    \"transfer_public_as_signer\",\n    \"public\",\n    \"public_as_signer\",\n    \"transferPublic\",\n    \"transferPublicAsSigner\",\n    \"transfer_public_to_private\",\n    \"publicToPrivate\",\n    \"publicAsSigner\",\n    \"transferPublicToPrivate\",\n]);\n\nexport const PRIVATE_TRANSFER = new Set([\n    \"private\",\n    \"transfer_private\",\n    \"transferPrivate\",\n]);\n\nexport const PRIVATE_TO_PUBLIC_TRANSFER = new Set([\n    \"private_to_public\",\n    \"privateToPublic\",\n    \"transfer_private_to_public\",\n    \"transferPrivateToPublic\",\n]);\n\nexport const PUBLIC_TRANSFER = new Set([\n    \"public\",\n    \"transfer_public\",\n    \"transferPublic\",\n]);\n\nexport const PUBLIC_TRANSFER_AS_SIGNER = new Set([\n    \"public_as_signer\",\n    \"transfer_public_as_signer\",\n    \"transferPublicAsSigner\",\n]);\n\nexport const PUBLIC_TO_PRIVATE_TRANSFER = new Set([\n    \"public_to_private\",\n    \"publicToPrivate\",\n    \"transfer_public_to_private\",\n    \"transferPublicToPrivate\",\n]);\n","import {\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    Key,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PUBLIC_TRANSFER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    PUBLIC_TRANSFER_AS_SIGNER,\n} from \"./constants\";\n\nimport {\n    ProvingKey,\n    VerifyingKey,\n} from \"./wasm\";\n\nimport { get } from \"./utils\";\n\ntype FunctionKeyPair = [ProvingKey, VerifyingKey];\ntype CachedKeyPair = [Uint8Array, Uint8Array];\ntype AleoKeyProviderInitParams = {\n    proverUri?: string;\n    verifierUri?: string;\n    cacheKey?: string;\n};\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface KeySearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * AleoKeyProviderParams search parameter for the AleoKeyProvider. It allows for the specification of a proverUri and\n * verifierUri to fetch keys via HTTP from a remote resource as well as a unique cacheKey to store the keys in memory.\n */\nclass AleoKeyProviderParams implements KeySearchParams {\n    name: string | undefined;\n    proverUri: string | undefined;\n    verifierUri: string | undefined;\n    cacheKey: string | undefined;\n\n    /**\n     * Create a new AleoKeyProviderParams object which implements the KeySearchParams interface. Users can optionally\n     * specify a url for the proverUri & verifierUri to fetch keys via HTTP from a remote resource as well as a unique\n     * cacheKey to store the keys in memory for future use. If no proverUri or verifierUri is specified, a cachekey must\n     * be provided.\n     *\n     * @param { AleoKeyProviderInitParams } params - Optional search parameters\n     */\n    constructor(params: {proverUri?: string, verifierUri?: string, cacheKey?: string, name?: string}) {\n        this.proverUri = params.proverUri;\n        this.verifierUri = params.verifierUri;\n        this.cacheKey = params.cacheKey;\n        this.name = params.name;\n    }\n}\n\n/**\n * KeyProvider interface. Enables the retrieval of public proving and verifying keys for Aleo Programs.\n */\ninterface FunctionKeyProvider {\n    /**\n     * Get bond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the bond_public function\n     */\n    bondPublicKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get bond_validator function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the bond_validator function\n     */\n    bondValidatorKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void;\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the unbond_public function\n     */\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a search object which implements the KeySearchParams interface\n     * class IndexDbSearch implements KeySearchParams {\n     *     db: string\n     *     keyId: string\n     *     constructor(params: {db: string, keyId: string}) {\n     *         this.db = params.db;\n     *         this.keyId = params.keyId;\n     *     }\n     * }\n     *\n     * // Create a new object which implements the KeyProvider interface\n     * class IndexDbKeyProvider implements FunctionKeyProvider {\n     *     async functionKeys(params: KeySearchParams): Promise<FunctionKeyPair> {\n     *         return new Promise((resolve, reject) => {\n     *             const request = indexedDB.open(params.db, 1);\n     *\n     *             request.onupgradeneeded = function(e) {\n     *                 const db = e.target.result;\n     *                 if (!db.objectStoreNames.contains('keys')) {\n     *                     db.createObjectStore('keys', { keyPath: 'id' });\n     *                 }\n     *             };\n     *\n     *             request.onsuccess = function(e) {\n     *                 const db = e.target.result;\n     *                 const transaction = db.transaction([\"keys\"], \"readonly\");\n     *                 const store = transaction.objectStore(\"keys\");\n     *                 const request = store.get(params.keyId);\n     *                 request.onsuccess = function(e) {\n     *                     if (request.result) {\n     *                         resolve(request.result as FunctionKeyPair);\n     *                     } else {\n     *                         reject(new Error(\"Key not found\"));\n     *                     }\n     *                 };\n     *                 request.onerror = function(e) { reject(new Error(\"Error fetching key\")); };\n     *             };\n     *\n     *             request.onerror = function(e) { reject(new Error(\"Error opening database\")); };\n     *         });\n     *     }\n     *\n     *     // implement the other methods...\n     * }\n     *\n     *\n     * const keyProvider = new AleoKeyProvider();\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const searchParams = new IndexDbSearch({db: \"keys\", keyId: \"credits.aleo:transferPrivate\"});\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(searchParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair>;\n\n    /**\n     * Get fee_private function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get fee_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get join function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get split function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair>;\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    unBondPublicKeys(): Promise<FunctionKeyPair>;\n\n}\n\n\n/**\n * AleoKeyProvider class. Implements the KeyProvider interface. Enables the retrieval of Aleo program proving and\n * verifying keys for the credits.aleo program over http from official Aleo sources and storing and retrieving function\n * keys from a local memory cache.\n */\nclass AleoKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n    cacheOption: boolean;\n    keyUris: string;\n\n    async fetchBytes(\n        url = \"/\",\n    ): Promise<Uint8Array> {\n        try {\n        const response = await get(url);\n        const data = await response.arrayBuffer();\n        return new Uint8Array(data);\n        } catch (error: any) {\n            throw new Error(\"Error fetching data.\" + error.message);\n        }\n    }\n\n    constructor() {\n        this.keyUris = KEY_STORE;\n        this.cache = new Map<string, CachedKeyPair>();\n        this.cacheOption = false;\n    }\n\n    /**\n     * Use local memory to store keys\n     *\n     * @param {boolean} useCache whether to store keys in local memory\n     */\n    useCache(useCache: boolean) {\n        this.cacheOption = useCache;\n    }\n\n    /**\n     * Clear the key cache\n     */\n    clearCache() {\n        this.cache.clear();\n    }\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair) {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    }\n\n    /**\n     * Determine if a keyId exists in the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair\n     * @returns {boolean} true if the keyId exists in the cache, false otherwise\n     */\n    containsKeys(keyId: string): boolean {\n        return this.cache.has(keyId)\n    }\n\n    /**\n     * Delete a set of keys from the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair to delete from memory\n     * @returns {boolean} true if the keyId exists in the cache and was deleted, false if the key did not exist\n     */\n    deleteKeys(keyId: string): boolean {\n        return this.cache.delete(keyId)\n    }\n\n    /**\n     * Get a set of keys from the cache\n     * @param keyId keyId of a proving and verifying key pair\n     *\n     * @returns {FunctionKeyPair} Proving and verifying keys for the specified program\n     */\n    getKeys(keyId: string): FunctionKeyPair {\n        console.debug(`Checking if key exists in cache. KeyId: ${keyId}`)\n        if (this.cache.has(keyId)) {\n            const [provingKeyBytes, verifyingKeyBytes] = <CachedKeyPair>this.cache.get(keyId);\n            return [ProvingKey.fromBytes(provingKeyBytes), VerifyingKey.fromBytes(verifyingKeyBytes)];\n        } else {\n            throw new Error(\"Key not found in cache.\");\n        }\n    }\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams} params parameters for the key search in form of: {proverUri: string, verifierUri: string, cacheKey: string}\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually using the key provider\n     * const keySearchParams = { \"cacheKey\": \"myProgram:myFunction\" };\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(keySearchParams);\n     */\n    async functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair> {\n        if (params) {\n            let proverUrl;\n            let verifierUrl;\n            let cacheKey;\n            if (\"name\" in params && typeof params[\"name\"] == \"string\") {\n                let key = CREDITS_PROGRAM_KEYS.getKey(params[\"name\"]);\n                return this.fetchCreditsKeys(key);\n            }\n\n            if (\"proverUri\" in params && typeof params[\"proverUri\"] == \"string\") {\n                proverUrl = params[\"proverUri\"];\n            }\n\n            if (\"verifierUri\" in params && typeof params[\"verifierUri\"] == \"string\") {\n                verifierUrl = params[\"verifierUri\"];\n            }\n\n            if (\"cacheKey\" in params && typeof params[\"cacheKey\"] == \"string\") {\n                cacheKey = params[\"cacheKey\"];\n            }\n\n            if (proverUrl && verifierUrl) {\n                return await this.fetchRemoteKeys(proverUrl, verifierUrl, cacheKey);\n            }\n\n            if (cacheKey) {\n                return this.getKeys(cacheKey);\n            }\n        }\n        throw new Error(\"Invalid parameters provided, must provide either a cacheKey and/or a proverUrl and a verifierUrl\");\n    }\n\n    /**\n     * Returns the proving and verifying keys for a specified program from a specified url.\n     *\n     * @param {string} verifierUrl Url of the proving key\n     * @param {string} proverUrl Url the verifying key\n     * @param {string} cacheKey Key to store the keys in the cache\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new AleoKeyProvider object\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.fetchKeys(\n     *     CREDITS_PROGRAM_KEYS.transfer_private.prover,\n     *     CREDITS_PROGRAM_KEYS.transfer_private.verifier,\n     * );\n     */\n    async fetchRemoteKeys(proverUrl: string, verifierUrl: string, cacheKey?: string): Promise<FunctionKeyPair> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return [ProvingKey.fromBytes(value[0]), VerifyingKey.fromBytes(value[1])];\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                    console.debug(\"Fetching verifying keys \" + verifierUrl);\n                    const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                    this.cache.set(cacheKey, [provingKey.toBytes(), verifyingKey.toBytes()]);\n                    return [provingKey, verifyingKey];\n                }\n            }\n            else {\n                // If cache is disabled, fetch the keys and return them\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                return [provingKey, verifyingKey];\n            }\n        } catch (error: any) {\n            throw new Error(`Error: ${error.message} fetching fee proving and verifying keys from ${proverUrl} and ${verifierUrl}.`);\n        }\n    }\n\n    /***\n     * Fetches the proving key from a remote source.\n     *\n     * @param proverUrl\n     * @param cacheKey\n     *\n     * @returns {Promise<ProvingKey>} Proving key for the specified program\n     */\n    async fetchProvingKey(proverUrl: string, cacheKey?: string): Promise<ProvingKey> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return ProvingKey.fromBytes(value[0]);\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl));\n                    return provingKey;\n                }\n            }\n            else {\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl));\n                return provingKey;\n            }\n        } catch (error: any) {\n            throw new Error(`Error: ${error.message} fetching fee proving keys from ${proverUrl}`);\n        }\n    }\n\n    async fetchCreditsKeys(key: Key): Promise<FunctionKeyPair> {\n        try {\n            if (!this.cache.has(key.locator) || !this.cacheOption) {\n                const verifying_key = key.verifyingKey()\n                const proving_key = <ProvingKey>await this.fetchProvingKey(key.prover, key.locator);\n                if (this.cacheOption) {\n                    this.cache.set(CREDITS_PROGRAM_KEYS.bond_public.locator, [proving_key.toBytes(), verifying_key.toBytes()]);\n                }\n                return [proving_key, verifying_key];\n            } else {\n                const keyPair = <CachedKeyPair>this.cache.get(key.locator);\n                return [ProvingKey.fromBytes(keyPair[0]), VerifyingKey.fromBytes(keyPair[1])];\n            }\n        } catch (error: any) {\n            throw new Error(`Error: fetching credits.aleo keys: ${error.message}`);\n        }\n    }\n\n    async bondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.bond_public);\n    }\n\n    bondValidatorKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.bond_validator);\n    }\n\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.claim_unbond_public)\n    }\n\n    /**\n     * Returns the proving and verifying keys for the transfer functions in the credits.aleo program\n     * @param {string} visibility Visibility of the transfer function\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the transfer functions\n     *\n     * @example\n     * // Create a new AleoKeyProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    async transferKeys(visibility: string): Promise<FunctionKeyPair> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_private);\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_private_to_public);\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public);\n        } else if (PUBLIC_TRANSFER_AS_SIGNER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public_as_signer);\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public_to_private);\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the join function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    async joinKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.join);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the split function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the split function\n     * */\n    async splitKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.split);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_private function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the fee function\n     */\n    async feePrivateKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.fee_private);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_public function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the fee function\n     */\n    async feePublicKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.fee_public);\n    }\n\n    /**\n     * Gets a verifying key. If the verifying key is for a credits.aleo function, get it from the wasm cache otherwise\n     *\n     * @returns {Promise<VerifyingKey>} Verifying key for the function\n     */\n    // attempt to fetch it from the network\n    async getVerifyingKey(verifierUri: string): Promise<VerifyingKey> {\n        switch (verifierUri) {\n            case CREDITS_PROGRAM_KEYS.bond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.bond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.bond_validator.verifier:\n                return CREDITS_PROGRAM_KEYS.bond_validator.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.claim_unbond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_private.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_public.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.inclusion.verifier:\n                return CREDITS_PROGRAM_KEYS.inclusion.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.join.verifier:\n                return CREDITS_PROGRAM_KEYS.join.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.set_validator_state.verifier:\n                return CREDITS_PROGRAM_KEYS.set_validator_state.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.split.verifier:\n                return CREDITS_PROGRAM_KEYS.split.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public_as_signer.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public_as_signer.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.unbond_public.verifyingKey();\n            default:\n                try {\n                    /// Try to fetch the verifying key from the network as a string\n                    const response = await get(verifierUri);\n                    const text = await response.text();\n                    return <VerifyingKey>VerifyingKey.fromString(text);\n                } catch (e) {\n                    /// If that fails, try to fetch the verifying key from the network as bytes\n                    try {\n                    return <VerifyingKey>VerifyingKey.fromBytes(await this.fetchBytes(verifierUri));\n                    } catch (inner: any) {\n                        throw new Error(\"Invalid verifying key. Error: \" + inner.message);\n                    }\n                }\n        }\n    }\n\n    unBondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.unbond_public);\n    }\n}\n\nexport {AleoKeyProvider, AleoKeyProviderParams, AleoKeyProviderInitParams, CachedKeyPair, FunctionKeyPair, FunctionKeyProvider, KeySearchParams}\n","import { Account } from \"./account\";\nimport { AleoNetworkClient, ProgramImports } from \"./network-client\";\n\nimport {\n    RecordProvider,\n    RecordSearchParams,\n} from \"./record-provider\";\n\nimport {\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    KeySearchParams,\n} from \"./function-key-provider\";\n\nimport {\n    ExecutionResponse,\n    Execution as FunctionExecution,\n    OfflineQuery,\n    RecordPlaintext,\n    PrivateKey,\n    Program,\n    ProvingKey,\n    VerifyingKey,\n    Transaction,\n    ProgramManager as WasmProgramManager,\n    verifyFunctionExecution,\n} from \"./wasm\";\n\nimport {\n    CREDITS_PROGRAM_KEYS,\n    PRIVATE_TRANSFER_TYPES,\n    VALID_TRANSFER_TYPES,\n} from \"./constants\";\n\nimport { logAndThrow } from \"./utils\";\n\n/**\n * Represents the options for executing a transaction in the Aleo network.\n * This interface is used to specify the parameters required for building and submitting an execution transaction.\n *\n * @property {string} programName - The name of the program containing the function to be executed.\n * @property {string} functionName - The name of the function to execute within the program.\n * @property {number} fee - The fee to be paid for the transaction.\n * @property {boolean} privateFee - If true, uses a private record to pay the fee; otherwise, uses the account's public credit balance.\n * @property {string[]} inputs - The inputs to the function being executed.\n * @property {RecordSearchParams} [recordSearchParams] - Optional parameters for searching for a record to pay the execution transaction fee.\n * @property {KeySearchParams} [keySearchParams] - Optional parameters for finding the matching proving & verifying keys for the function.\n * @property {string | RecordPlaintext} [feeRecord] - Optional fee record to use for the transaction.\n * @property {ProvingKey} [provingKey] - Optional proving key to use for the transaction.\n * @property {VerifyingKey} [verifyingKey] - Optional verifying key to use for the transaction.\n * @property {PrivateKey} [privateKey] - Optional private key to use for the transaction.\n * @property {OfflineQuery} [offlineQuery] - Optional offline query if creating transactions in an offline environment.\n * @property {string | Program} [program] - Optional program source code to use for the transaction.\n * @property {ProgramImports} [imports] - Optional programs that the program being executed imports.\n */\ninterface ExecuteOptions {\n    programName: string;\n    functionName: string;\n    fee: number;\n    privateFee: boolean;\n    inputs: string[];\n    recordSearchParams?: RecordSearchParams;\n    keySearchParams?: KeySearchParams;\n    feeRecord?: string | RecordPlaintext;\n    provingKey?: ProvingKey;\n    verifyingKey?: VerifyingKey;\n    privateKey?: PrivateKey;\n    offlineQuery?: OfflineQuery;\n    program?: string | Program;\n    imports?: ProgramImports;\n}\n\n/**\n * The ProgramManager class is used to execute and deploy programs on the Aleo network and create value transfers.\n */\nclass ProgramManager {\n    account: Account | undefined;\n    keyProvider: FunctionKeyProvider;\n    host: string;\n    networkClient: AleoNetworkClient;\n    recordProvider: RecordProvider | undefined;\n\n    /** Create a new instance of the ProgramManager\n     *\n     * @param { string | undefined } host A host uri running the official Aleo API\n     * @param { FunctionKeyProvider | undefined } keyProvider A key provider that implements {@link FunctionKeyProvider} interface\n     * @param { RecordProvider | undefined } recordProvider A record provider that implements {@link RecordProvider} interface\n     */\n    constructor(host?: string | undefined, keyProvider?: FunctionKeyProvider | undefined, recordProvider?: RecordProvider | undefined) {\n        this.host = host ? host : 'https://api.explorer.provable.com/v1';\n        this.networkClient = new AleoNetworkClient(this.host);\n\n        this.keyProvider = keyProvider ? keyProvider : new AleoKeyProvider();\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Set the account to use for transaction submission to the Aleo network\n     *\n     * @param {Account} account Account to use for transaction submission\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Set the key provider that provides the proving and verifying keys for programs\n     *\n     * @param {FunctionKeyProvider} keyProvider\n     */\n    setKeyProvider(keyProvider: FunctionKeyProvider) {\n        this.keyProvider = keyProvider;\n    }\n\n    /**\n     * Set the host peer to use for transaction submission to the Aleo network\n     *\n     * @param host {string} Peer url to use for transaction submission\n     */\n    setHost(host: string) {\n        this.host = host;\n        this.networkClient.setHost(host);\n    }\n\n    /**\n     * Set the record provider that provides records for transactions\n     *\n     * @param {RecordProvider} recordProvider\n     */\n    setRecordProvider(recordProvider: RecordProvider) {\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Deploy an Aleo program to the Aleo network\n     *\n     * @param {string} program Program source code\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for searching for a record to use\n     * pay the deployment fee\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {string} The transaction id of the deployed program or a failure message from the network\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for deployments\n     * const program = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Define a fee in credits\n     * const fee = 1.2;\n     *\n     * // Deploy the program\n     * const tx_id = await programManager.deploy(program, fee);\n     *\n     * // Verify the transaction was successful\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async deploy(\n        program: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        feeRecord?: string | RecordPlaintext,\n        privateKey?: PrivateKey,\n    ): Promise<string> {\n        // Ensure the program is valid and does not exist on the network\n        try {\n            const programObject = Program.fromString(program);\n            let programSource;\n            try {\n                programSource = await this.networkClient.getProgram(programObject.id());\n            } catch (e) {\n                // Program does not exist on the network, deployment can proceed\n                console.log(`Program ${programObject.id()} does not exist on the network, deploying...`);\n            }\n            if (typeof programSource == \"string\") {\n                throw (`Program ${programObject.id()} already exists on the network, please rename your program`);\n            }\n        } catch (e: any) {\n            logAndThrow(`Error validating program: ${e.message}`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let deploymentPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            deploymentPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof deploymentPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e: any) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n        } catch (e: any) {\n            logAndThrow(`Error finding program imports. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build a deployment transaction and submit it to the network\n        const tx = await WasmProgramManager.buildDeploymentTransaction(deploymentPrivateKey, program, fee, feeRecord, this.host, imports, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const transaction = await programManager.buildExecutionTransaction({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   fee: 0.020,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async buildExecutionTransaction(options: ExecuteOptions): Promise<Transaction> {\n        // Destructure the options object to access the parameters\n        const {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            recordSearchParams,\n            keySearchParams,\n            privateKey,\n            offlineQuery\n        } = options;\n\n        let feeRecord = options.feeRecord;\n        let provingKey = options.provingKey;\n        let verifyingKey = options.verifyingKey;\n        let program = options.program;\n        let imports = options.imports;\n\n        // Ensure the function exists on the network\n        if (program === undefined) {\n            try {\n                program = <string>(await this.networkClient.getProgram(programName));\n            } catch (e: any) {\n                logAndThrow(`Error finding ${programName}. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`);\n            }\n        } else if (program instanceof Program) {\n            program = program.toString();\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e: any) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the fee proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Resolve the program imports if they exist\n        const numberOfImports = Program.fromString(program).getImports().length;\n        if (numberOfImports > 0 && !imports) {\n            try {\n                imports = <ProgramImports>await this.networkClient.getProgramImports(programName);\n            } catch (e: any) {\n                logAndThrow(`Error finding program imports. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n            }\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildExecutionTransaction(executionPrivateKey, program, functionName, inputs, fee, feeRecord, this.host, imports, provingKey, verifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const transaction = await programManager.execute({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   fee: 0.020,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async execute(options: ExecuteOptions): Promise<string> {\n        const tx = <Transaction>await this.buildExecutionTransaction(options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Run an Aleo program in offline mode\n     *\n     * @param {string} program Program source code containing the function to be executed\n     * @param {string} function_name Function name to execute\n     * @param {string[]} inputs Inputs to the function\n     * @param {number} proveExecution Whether to prove the execution of the function and return an execution transcript\n     * that contains the proof.\n     * @param {string[] | undefined} imports Optional imports to the program\n     * @param {KeySearchParams | undefined} keySearchParams Optional parameters for finding the matching proving &\n     * verifying keys for the function\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>}\n     *\n     * @example\n     * import { Account, Program } from '@provablehq/sdk';\n     *\n     * /// Create the source for the \"helloworld\" program\n     * const program = \"program helloworld.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager();\n     *\n     * /// Create a temporary account for the execution of the program\n     * const account = new Account();\n     * programManager.setAccount(account);\n     *\n     * /// Get the response and ensure that the program executed correctly\n     * const executionResponse = await programManager.run(program, \"hello\", [\"5u32\", \"5u32\"]);\n     * const result = executionResponse.getOutputs();\n     * assert(result === [\"10u32\"]);\n     */\n    async run(\n        program: string,\n        function_name: string,\n        inputs: string[],\n        proveExecution: boolean,\n        imports?: ProgramImports,\n        keySearchParams?: KeySearchParams,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<ExecutionResponse> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Run the program offline and return the result\n        console.log(\"Running program offline\")\n        console.log(\"Proving key: \", provingKey);\n        console.log(\"Verifying key: \", verifyingKey);\n        return WasmProgramManager.executeFunctionOffline(executionPrivateKey, program, function_name, inputs, proveExecution, false, imports, provingKey, verifyingKey, this.host, offlineQuery);\n    }\n\n    /**\n     * Join two credits records into a single credits record\n     *\n     * @param {RecordPlaintext | string} recordOne First credits record to join\n     * @param {RecordPlaintext | string} recordTwo Second credits record to join\n     * @param {number} fee Fee in credits pay for the join transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the fee record to use\n     * to pay the fee for the join transaction\n     * @param {RecordPlaintext | string | undefined} feeRecord Fee record to use for the join transaction\n     * @param {PrivateKey | undefined} privateKey Private key to use for the join transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>}\n     */\n    async join(\n        recordOne: RecordPlaintext | string,\n        recordTwo: RecordPlaintext | string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams | undefined,\n        feeRecord?: RecordPlaintext | string | undefined,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<string> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let joinKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            joinKeys = <FunctionKeyPair>await this.keyProvider.joinKeys();\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [joinProvingKey, joinVerifyingKey] = joinKeys;\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e: any) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Validate the records provided are valid plaintext records\n        try {\n            recordOne = recordOne instanceof RecordPlaintext ? recordOne : RecordPlaintext.fromString(recordOne);\n            recordTwo = recordTwo instanceof RecordPlaintext ? recordTwo : RecordPlaintext.fromString(recordTwo);\n        } catch (e: any) {\n            logAndThrow('Records provided are not valid. Please ensure they are valid plaintext records.')\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildJoinTransaction(executionPrivateKey, recordOne, recordTwo, fee, feeRecord, this.host, joinProvingKey, joinVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Split credits into two new credits records\n     *\n     * @param {number} splitAmount Amount in microcredits to split from the original credits record\n     * @param {RecordPlaintext | string} amountRecord Amount record to use for the split transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the split transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * const record = \"{  owner: aleo184vuwr5u7u0ha5f5k44067dd2uaqewxx6pe5ltha5pv99wvhfqxqv339h4.private,  microcredits: 45000000u64.private,  _nonce: 4106205762862305308495708971985748592380064201230396559307556388725936304984group.public}\"\n     * const tx_id = await programManager.split(25000000, record);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async split(splitAmount: number, amountRecord: RecordPlaintext | string, privateKey?: PrivateKey, offlineQuery?: OfflineQuery): Promise<string> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the split keys from the key provider\n        let splitKeys;\n        try {\n            splitKeys = <FunctionKeyPair>await this.keyProvider.splitKeys();\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [splitProvingKey, splitVerifyingKey] = splitKeys;\n\n        // Validate the record to be split\n        try {\n            amountRecord = amountRecord instanceof RecordPlaintext ? amountRecord : RecordPlaintext.fromString(amountRecord);\n        } catch (e: any) {\n            logAndThrow(\"Record provided is not valid. Please ensure it is a valid plaintext record.\");\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildSplitTransaction(executionPrivateKey, splitAmount, amountRecord, this.host, splitProvingKey, splitVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Pre-synthesize proving and verifying keys for a program\n     *\n     * @param program {string} The program source code to synthesize keys for\n     * @param function_id {string} The function id to synthesize keys for\n     * @param inputs {Array<string>}  Sample inputs to the function\n     * @param privateKey {PrivateKey | undefined} Optional private key to use for the key synthesis\n     *\n     * @returns {Promise<FunctionKeyPair>}\n     */\n    async synthesizeKeys(\n        program: string,\n        function_id: string,\n        inputs: Array<string>,\n        privateKey?: PrivateKey,\n    ): Promise<FunctionKeyPair> {\n        // Resolve the program imports if they exist\n        let imports;\n\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\") {\n            if (typeof this.account !== \"undefined\") {\n                executionPrivateKey = this.account.privateKey();\n            } else {\n                executionPrivateKey = new PrivateKey();\n            }\n        }\n\n        // Attempt to run an offline execution of the program and extract the proving and verifying keys\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n            const keyPair = await WasmProgramManager.synthesizeKeyPair(\n                executionPrivateKey,\n                program,\n                function_id,\n                inputs,\n                imports\n            );\n            return [<ProvingKey>keyPair.provingKey(), <VerifyingKey>keyPair.verifyingKey()];\n        } catch (e: any) {\n            logAndThrow(`Could not synthesize keys - error ${e.message}. Please ensure the program is valid and the inputs are correct.`);\n        }\n    }\n\n    /**\n     * Build a transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async buildTransferTransaction(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction> {\n        // Validate the transfer type\n        transferType = <string>validateTransferType(transferType);\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let transferKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            transferKeys = <FunctionKeyPair>await this.keyProvider.transferKeys(transferType);\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [transferProvingKey, transferVerifyingKey] = transferKeys;\n\n        // Get the amount and fee record from the account if it is not provided in the parameters\n        try {\n            // Track the nonces of the records found so no duplicate records are used\n            const nonces: string[] = [];\n            if (requiresAmountRecord(transferType)) {\n                // If the transfer type is private and requires an amount record, get it from the record provider\n                amountRecord = <RecordPlaintext>await this.getCreditsRecord(fee, [], amountRecord, recordSearchParams);\n                nonces.push(amountRecord.nonce());\n            } else {\n                amountRecord = undefined;\n            }\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, nonces, feeRecord, recordSearchParams) : undefined;\n        } catch (e: any) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildTransferTransaction(executionPrivateKey, amount, recipient, transferType, amountRecord, fee, feeRecord, this.host, transferProvingKey, transferVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Build a transfer_public transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     */\n    async buildTransferPublicTransaction(\n        amount: number,\n        recipient: string,\n        fee: number,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction> {\n        return this.buildTransferTransaction(amount, recipient, \"public\", fee, false, undefined, undefined, undefined, privateKey, offlineQuery);\n    }\n\n    /**\n     * Build a transfer_public_as_signer transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     */\n    async buildTransferPublicAsSignerTransaction(\n        amount: number,\n        recipient: string,\n        fee: number,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction> {\n        return this.buildTransferTransaction(amount, recipient, \"public\", fee, false, undefined, undefined, undefined, privateKey, offlineQuery);\n    }\n\n    /**\n     * Transfer credits to another account\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async transfer(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<string> {\n        const tx = <Transaction>await this.buildTransferTransaction(amount, recipient, transferType, fee, privateFee, recordSearchParams, amountRecord, feeRecord, privateKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build transaction to bond credits to a validator for later submission to the Aleo Network\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction object for later submission\n     * const tx = await programManager.buildBondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can be later submitted to the network using the network client.\n     * const result = await programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is bonding the credits\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async buildBondPublicTransaction(staker_address: string, validator_address: string, withdrawal_address: string, amount: number, options: Partial<ExecuteOptions> = {}) {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"bond_public\",\n            fee = options.fee || 0.86,\n            privateFee = false,\n            inputs = [staker_address, validator_address, withdrawal_address, `${scaledAmount.toString()}u64`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.bond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.bond_public.verifier,\n                cacheKey: \"credits.aleo/bond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Bond credits to validator.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is bonding the credits\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the signer (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 1,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {Options} options Options for the execution\n     */\n    async bondPublic(staker_address: string, validator_address: string, withdrawal_address:string, amount: number, options: Partial<ExecuteOptions> = {}) {\n        const tx = <Transaction>await this.buildBondPublicTransaction(staker_address, validator_address, withdrawal_address, amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a bond_validator transaction for later submission to the Aleo Network.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bond validator transaction object for later use.\n     * const tx = await programManager.buildBondValidatorTransaction(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can later be submitted to the network using the network client.\n     * const tx_id = await programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {number} commission The commission rate for the validator (must be between 0 and 100 - an error will be thrown if it is not)\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async buildBondValidatorTransaction(validator_address: string, withdrawal_address: string, amount: number, commission: number, options: Partial<ExecuteOptions> = {}) {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const adjustedCommission = Math.trunc(commission)\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"bond_validator\",\n            fee = options.fee || 0.86,\n            privateFee = false,\n            inputs = [validator_address, withdrawal_address, `${scaledAmount.toString()}u64`, `${adjustedCommission.toString()}u8`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.bond_validator.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.bond_validator.verifier,\n                cacheKey: \"credits.aleo/bond_validator\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Build transaction to bond a validator.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondValidator(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     *\n     * @returns string\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {number} commission The commission rate for the validator (must be between 0 and 100 - an error will be thrown if it is not)\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async bondValidator(validator_address: string, withdrawal_address: string, amount: number, commission: number, options: Partial<ExecuteOptions> = {}) {\n        const tx = <Transaction>await this.buildBondValidatorTransaction(validator_address, withdrawal_address, amount, commission, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to unbond public credits from a validator in the Aleo network.\n     *\n     * @param {string} staker_address - The address of the staker who is unbonding the credits.\n     * @param {number} amount - The amount of credits to unbond (scaled by 1,000,000).\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * // Create a keyProvider to handle key management.\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to unbond credits.\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * const tx = await programManager.buildUnbondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     */\n    async buildUnbondPublicTransaction(staker_address: string, amount: number, options: Partial<ExecuteOptions> = {}): Promise<Transaction> {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"unbond_public\",\n            fee = options.fee || 1.3,\n            privateFee = false,\n            inputs = [staker_address, `${scaledAmount.toString()}u64`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.unbond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.unbond_public.verifier,\n                cacheKey: \"credits.aleo/unbond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Unbond a specified amount of staked credits.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction and send it to the network\n     * const tx_id = await programManager.unbondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", 10);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is unbonding the credits\n     * @param {number} amount Amount of credits to unbond. If the address of the executor of this function is an\n     * existing validator, it will subtract this amount of credits from the validator's staked credits. If there are\n     * less than 1,000,000 credits staked pool after the unbond, the validator will be removed from the validator set.\n     * If the address of the executor of this function is not a validator and has credits bonded as a delegator, it will\n     * subtract this amount of credits from the delegator's staked credits. If there are less than 10 credits bonded\n     * after the unbond operation, the delegator will be removed from the validator's staking pool.\n     * @param {ExecuteOptions} options Options for the execution\n     */\n    async unbondPublic(staker_address: string, amount: number, options: Partial<ExecuteOptions> = {}): Promise<string> {\n        const tx = <Transaction>await this.buildUnbondPublicTransaction(staker_address, amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to claim unbonded public credits in the Aleo network.\n     *\n     * @param {string} staker_address - The address of the staker who is claiming the credits.\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to claim unbonded credits.\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     *\n     * // Create the claim unbonded transaction object for later use.\n     * const tx = await programManager.buildClaimUnbondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\");\n     * console.log(tx);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     */\n    async buildClaimUnbondPublicTransaction(staker_address: string, options: Partial<ExecuteOptions> = {}): Promise<Transaction> {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"claim_unbond_public\",\n            fee = options.fee || 2,\n            privateFee = false,\n            inputs = [staker_address],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier,\n                cacheKey: \"credits.aleo/claim_unbond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Claim unbonded credits. If credits have been unbonded by the account executing this function, this method will\n     * claim them and add them to the public balance of the account.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.claimUnbondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\");\n     *\n     * @param {string} staker_address Address of the staker who is claiming the credits\n     * @param {ExecuteOptions} options\n     * @returns string\n     */\n    async claimUnbondPublic(staker_address: string, options: Partial<ExecuteOptions> = {}): Promise<string> {\n        const tx = <Transaction>await this.buildClaimUnbondPublicTransaction(staker_address, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a set_validator_state transaction for later usage.\n     *\n     * This function allows a validator to set their state to be either opened or closed to new stakers.\n     * When the validator is open to new stakers, any staker (including the validator) can bond or unbond from the validator.\n     * When the validator is closed to new stakers, existing stakers can still bond or unbond from the validator, but new stakers cannot bond.\n     *\n     * This function serves two primary purposes:\n     * 1. Allow a validator to leave the committee, by closing themselves to stakers and then unbonding all of their stakers.\n     * 2. Allow a validator to maintain their % of stake, by closing themselves to allowing more stakers to bond to them.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"ValidatorPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx = await programManager.buildSetValidatorStateTransaction(true);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {boolean} validator_state\n     * @param {Partial<ExecuteOptions>} options - Override default execution options\n     */\n    async buildSetValidatorStateTransaction(validator_state: boolean, options: Partial<ExecuteOptions> = {}) {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"set_validator_state\",\n            fee = 1,\n            privateFee = false,\n            inputs = [validator_state.toString()],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.set_validator_state.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.set_validator_state.verifier,\n                cacheKey: \"credits.aleo/set_validator_state\"\n            }),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.execute(executeOptions);\n    }\n\n    /**\n     * Submit a set_validator_state transaction to the Aleo Network.\n     *\n     * This function allows a validator to set their state to be either opened or closed to new stakers.\n     * When the validator is open to new stakers, any staker (including the validator) can bond or unbond from the validator.\n     * When the validator is closed to new stakers, existing stakers can still bond or unbond from the validator, but new stakers cannot bond.\n     *\n     * This function serves two primary purposes:\n     * 1. Allow a validator to leave the committee, by closing themselves to stakers and then unbonding all of their stakers.\n     * 2. Allow a validator to maintain their % of stake, by closing themselves to allowing more stakers to bond to them.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"ValidatorPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.setValidatorState(true);\n     *\n     * @returns string\n     * @param {boolean} validator_state\n     * @param {Partial<ExecuteOptions>} options - Override default execution options\n     */\n    async setValidatorState(validator_state: boolean, options: Partial<ExecuteOptions> = {}) {\n        const tx = <string>await this.buildSetValidatorStateTransaction(validator_state, options);\n        return this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Verify a proof of execution from an offline execution\n     *\n     * @param {executionResponse} executionResponse\n     * @returns {boolean} True if the proof is valid, false otherwise\n     */\n    verifyExecution(executionResponse: ExecutionResponse): boolean {\n        try {\n            const execution = <FunctionExecution>executionResponse.getExecution();\n            const function_id = executionResponse.getFunctionId();\n            const program = executionResponse.getProgram();\n            const verifyingKey = executionResponse.getVerifyingKey();\n            return verifyFunctionExecution(execution, verifyingKey, program, function_id);\n        } catch(e) {\n            console.warn(\"The execution was not found in the response, cannot verify the execution\");\n            return false;\n        }\n    }\n\n    /**\n     * Create a program object from a program's source code\n     *\n     * @param {string} program Program source code\n     * @returns {Program} The program object\n     */\n    createProgramFromSource(program: string): Program {\n        return Program.fromString(program);\n    }\n\n    /**\n     * Get the credits program object\n     *\n     * @returns {Program} The credits program object\n     */\n    creditsProgram(): Program {\n        return Program.getCreditsProgram();\n    }\n\n    /**\n     * Verify a program is valid\n     *\n     * @param {string} program The program source code\n     */\n    verifyProgram(program: string): boolean {\n        try {\n            <Program>Program.fromString(program);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    // Internal utility function for getting a credits.aleo record\n    async getCreditsRecord(amount: number, nonces: string[], record?: RecordPlaintext | string, params?: RecordSearchParams): Promise<RecordPlaintext> {\n        try {\n            return record instanceof RecordPlaintext ? record : RecordPlaintext.fromString(<string>record);\n        } catch (e) {\n            try {\n                const recordProvider = <RecordProvider>this.recordProvider;\n                return <RecordPlaintext>(await recordProvider.findCreditsRecord(amount, true, nonces, params))\n            } catch (e: any) {\n                logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n            }\n        }\n    }\n}\n\n// Ensure the transfer type requires an amount record\nfunction requiresAmountRecord(transferType: string): boolean {\n    return PRIVATE_TRANSFER_TYPES.has(transferType);\n}\n\n// Validate the transfer type\nfunction validateTransferType(transferType: string): string {\n    return VALID_TRANSFER_TYPES.has(transferType) ? transferType :\n        logAndThrow(`Invalid transfer type '${transferType}'. Valid transfer types are 'private', 'privateToPublic', 'public', and 'publicToPrivate'.`);\n}\n\nexport { ProgramManager }\n","function spawnWorker(url, module, memory, address) {\n        return new Promise((resolve) => {\n            const worker = new Worker(url, {\n                type: \"module\",\n            });\n\n            worker.addEventListener(\"message\", (event) => {\n                // This is needed in Node to wait one extra tick, so that way\n                // the Worker can fully initialize before we return.\n                setTimeout(() => {\n                    resolve(worker);\n\n                    // When running in Node, this allows the process to exit\n                    // even though the Worker is still running.\n                    if (worker.unref) {\n                        worker.unref();\n                    }\n                }, 0);\n            }, {\n                capture: true,\n                once: true,\n            });\n\n            worker.postMessage({\n                module,\n                memory,\n                address,\n            });\n        });\n    }\n\nlet wasm;\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); }\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().slice(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_3.get(state.dtor)(state.a, state.b);\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_3.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\nfunction __wbg_adapter_40(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h1503081f6025e61c(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* Verify an execution with a single function and a single transition. Executions with multiple\n* transitions or functions will fail to verify. Also, this does not verify that the state root of\n* the execution is included in the Aleo Network ledger.\n*\n* @param {Execution} execution The function execution to verify\n* @param {VerifyingKey} verifying_key The verifying key for the function\n* @param {Program} program The program that the function execution belongs to\n* @param {String} function_id The name of the function that was executed\n* @returns {boolean} True if the execution is valid, false otherwise\n* @param {Execution} execution\n* @param {VerifyingKey} verifying_key\n* @param {Program} program\n* @param {string} function_id\n* @returns {boolean}\n*/\nfunction verifyFunctionExecution(execution, verifying_key, program, function_id) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(execution, Execution);\n        _assertClass(verifying_key, VerifyingKey);\n        _assertClass(program, Program);\n        const ptr0 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.verifyFunctionExecution(retptr, execution.__wbg_ptr, verifying_key.__wbg_ptr, program.__wbg_ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return r0 !== 0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nlet cachedBigInt64Memory0 = null;\n\nfunction getBigInt64Memory0() {\n    if (cachedBigInt64Memory0 === null || cachedBigInt64Memory0.buffer !== wasm.memory.buffer) {\n        cachedBigInt64Memory0 = new BigInt64Array(wasm.memory.buffer);\n    }\n    return cachedBigInt64Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {number} receiver\n*/\nfunction runRayonThread(receiver) {\n    wasm.runRayonThread(receiver);\n}\n\n/**\n* @param {URL} url\n* @param {number} num_threads\n* @returns {Promise<void>}\n*/\nfunction initThreadPool(url, num_threads) {\n    const ret = wasm.initThreadPool(addHeapObject(url), num_threads);\n    return takeObject(ret);\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_419(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__hc5c49be524f0cde8(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\nconst AddressFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_address_free(ptr >>> 0));\n/**\n* Public address of an Aleo account\n*/\nclass Address {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Address.prototype);\n        obj.__wbg_ptr = ptr;\n        AddressFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AddressFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n    * Derive an Aleo address from a private key\n    *\n    * @param {PrivateKey} private_key The private key to derive the address from\n    * @returns {Address} Address corresponding to the private key\n    * @param {PrivateKey} private_key\n    * @returns {Address}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.address_from_private_key(private_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Derive an Aleo address from a view key\n    *\n    * @param {ViewKey} view_key The view key to derive the address from\n    * @returns {Address} Address corresponding to the view key\n    * @param {ViewKey} view_key\n    * @returns {Address}\n    */\n    static from_view_key(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.address_from_view_key(view_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Derive an Aleo address from a compute key.\n    *\n    * @param {ComputeKey} compute_key The compute key to derive the address from\n    * @param {ComputeKey} compute_key\n    * @returns {Address}\n    */\n    static from_compute_key(compute_key) {\n        _assertClass(compute_key, ComputeKey);\n        const ret = wasm.address_from_compute_key(compute_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Create an aleo address object from a string representation of an address\n    *\n    * @param {string} address String representation of an addressm\n    * @returns {Address} Address\n    * @param {string} address\n    * @returns {Address}\n    */\n    static from_string(address) {\n        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.address_from_string(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Get a string representation of an Aleo address object\n    *\n    * @param {Address} Address\n    * @returns {string} String representation of the address\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Verify a signature for a message signed by the address\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {boolean} Boolean representing whether or not the signature is valid\n    * @param {Uint8Array} message\n    * @param {Signature} signature\n    * @returns {boolean}\n    */\n    verify(message, signature) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Signature);\n        const ret = wasm.address_verify(this.__wbg_ptr, ptr0, len0, signature.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst CiphertextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ciphertext_free(ptr >>> 0));\n/**\n* SnarkVM Ciphertext object. A Ciphertext represents an symmetrically encrypted plaintext. This\n* object provides decryption methods to recover the plaintext from the ciphertext (given the\n* api consumer has the proper decryption materials).\n*\n* @example\n*/\nclass Ciphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ciphertext.prototype);\n        obj.__wbg_ptr = ptr;\n        CiphertextFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CiphertextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ciphertext_free(ptr);\n    }\n    /**\n    * Decrypt the ciphertext using the given view key.\n    *\n    * @param {ViewKey} The view key of the account that encrypted the ciphertext.\n    * @param {Group} The nonce used to encrypt the ciphertext.\n    *\n    * @returns {Plaintext} The decrypted plaintext.\n    * @param {ViewKey} view_key\n    * @param {Group} nonce\n    * @returns {Plaintext}\n    */\n    decrypt(view_key, nonce) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(view_key, ViewKey);\n            var ptr0 = view_key.__destroy_into_raw();\n            _assertClass(nonce, Group);\n            var ptr1 = nonce.__destroy_into_raw();\n            wasm.ciphertext_decrypt(retptr, this.__wbg_ptr, ptr0, ptr1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Plaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Decrypts a ciphertext into plaintext using the given transition view key.\n    *\n    * @param {Field} transition_view_key The transition view key that was used to encrypt the ciphertext.\n    *\n    * @returns {Plaintext} The decrypted plaintext.\n    * @param {Field} transition_view_key\n    * @returns {Plaintext}\n    */\n    decryptSymmetric(transition_view_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(transition_view_key, Field);\n            var ptr0 = transition_view_key.__destroy_into_raw();\n            wasm.ciphertext_decryptSymmetric(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Plaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserialize a left endian byte array into a Ciphertext.\n    *\n    * @param {Uint8Array} bytes The byte array representing the Ciphertext.\n    *\n    * @returns {Ciphertext} The Ciphertext object.\n    * @param {Uint8Array} bytes\n    * @returns {Ciphertext}\n    */\n    static fromBytesLe(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ciphertext_fromBytesLe(retptr, addHeapObject(bytes));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ciphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserialize a Ciphertext string into a Ciphertext object.\n    *\n    * @param {string} ciphertext A string representation of the ciphertext.\n    *\n    * @returns {Ciphertext} The Ciphertext object.\n    * @param {string} ciphertext\n    * @returns {Ciphertext}\n    */\n    static fromString(ciphertext) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ciphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Serialize a Ciphertext object into a byte array.\n    *\n    * @returns {Uint8Array} The serialized Ciphertext.\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ciphertext_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Serialize a Ciphertext into a js string.\n    *\n    * @returns {string} The serialized Ciphertext.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst ComputeKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_computekey_free(ptr >>> 0));\n/**\n*/\nclass ComputeKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ComputeKey.prototype);\n        obj.__wbg_ptr = ptr;\n        ComputeKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ComputeKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_computekey_free(ptr);\n    }\n    /**\n    * Create a new compute key from a private key.\n    *\n    * @param {PrivateKey} private_key Private key\n    *\n    * @returns {ComputeKey} Compute key\n    * @param {PrivateKey} private_key\n    * @returns {ComputeKey}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.computekey_from_private_key(private_key.__wbg_ptr);\n        return ComputeKey.__wrap(ret);\n    }\n    /**\n    * Get the address from the compute key.\n    *\n    * @returns {Address}\n    * @returns {Address}\n    */\n    address() {\n        const ret = wasm.address_from_compute_key(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Get the sk_prf of the compute key.\n    *\n    * @returns {Scalar} sk_prf\n    * @returns {Scalar}\n    */\n    sk_prf() {\n        const ret = wasm.computekey_sk_prf(this.__wbg_ptr);\n        return Scalar.__wrap(ret);\n    }\n    /**\n    * Get the pr_tag of the compute key.\n    *\n    * @returns {Group} pr_tag\n    * @returns {Group}\n    */\n    pk_sig() {\n        const ret = wasm.computekey_pk_sig(this.__wbg_ptr);\n        return Group.__wrap(ret);\n    }\n    /**\n    * Get the pr_sig of the compute key.\n    *\n    * @returns {Group} pr_sig\n    * @returns {Group}\n    */\n    pr_sig() {\n        const ret = wasm.computekey_pr_sig(this.__wbg_ptr);\n        return Group.__wrap(ret);\n    }\n}\n\nconst ExecutionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_execution_free(ptr >>> 0));\n/**\n* Execution of an Aleo program.\n*/\nclass Execution {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Execution.prototype);\n        obj.__wbg_ptr = ptr;\n        ExecutionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ExecutionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_execution_free(ptr);\n    }\n    /**\n    * Returns the string representation of the execution.\n    *\n    * @returns {string} The string representation of the execution.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.execution_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates an execution object from a string representation of an execution.\n    *\n    * @returns {Execution | Error} The wasm representation of an execution object.\n    * @param {string} execution\n    * @returns {Execution}\n    */\n    static fromString(execution) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(execution, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.execution_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Execution.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the global state root of the execution.\n    *\n    * @returns {Execution | Error} The global state root used in the execution.\n    * @returns {string}\n    */\n    globalStateRoot() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.execution_globalStateRoot(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the proof of the execution.\n    *\n    * @returns {string} The execution proof.\n    * @returns {string}\n    */\n    proof() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.execution_proof(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the transitions present in the execution.\n    *\n    * @returns Array<Transition> the array of transitions present in the execution.\n    * @returns {Array<any>}\n    */\n    transitions() {\n        const ret = wasm.execution_transitions(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst ExecutionResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_executionresponse_free(ptr >>> 0));\n/**\n* Webassembly Representation of an Aleo function execution response\n*\n* This object is returned by the execution of an Aleo function off-chain. It provides methods for\n* retrieving the outputs of the function execution.\n*/\nclass ExecutionResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ExecutionResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        ExecutionResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ExecutionResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_executionresponse_free(ptr);\n    }\n    /**\n    * Get the outputs of the executed function\n    *\n    * @returns {Array} Array of strings representing the outputs of the function\n    * @returns {Array<any>}\n    */\n    getOutputs() {\n        const ret = wasm.executionresponse_getOutputs(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns the execution object if present, null if otherwise.\n    *\n    * @returns {Execution | undefined} The execution object if present, null if otherwise\n    * @returns {Execution | undefined}\n    */\n    getExecution() {\n        const ret = wasm.executionresponse_getExecution(this.__wbg_ptr);\n        return ret === 0 ? undefined : Execution.__wrap(ret);\n    }\n    /**\n    * Returns the program keys if present\n    * @returns {KeyPair}\n    */\n    getKeys() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.executionresponse_getKeys(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the proving_key if the proving key was cached in the Execution response.\n    * Note the proving key is removed from the response object after the first call to this\n    * function. Subsequent calls will return null.\n    *\n    * @returns {ProvingKey | undefined} The proving key\n    * @returns {ProvingKey | undefined}\n    */\n    getProvingKey() {\n        const ret = wasm.executionresponse_getProvingKey(this.__wbg_ptr);\n        return ret === 0 ? undefined : ProvingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying_key associated with the program\n    *\n    * @returns {VerifyingKey} The verifying key\n    * @returns {VerifyingKey}\n    */\n    getVerifyingKey() {\n        const ret = wasm.executionresponse_getVerifyingKey(this.__wbg_ptr);\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the function identifier\n    * @returns {string}\n    */\n    getFunctionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.executionresponse_getFunctionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the program\n    * @returns {Program}\n    */\n    getProgram() {\n        const ret = wasm.executionresponse_getProgram(this.__wbg_ptr);\n        return Program.__wrap(ret);\n    }\n}\n\nconst FieldFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_field_free(ptr >>> 0));\n/**\n* Field element.\n*/\nclass Field {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Field.prototype);\n        obj.__wbg_ptr = ptr;\n        FieldFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FieldFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_field_free(ptr);\n    }\n    /**\n    * Creates a field object from a string representation of a field.\n    * @param {string} field\n    * @returns {Field}\n    */\n    static fromString(field) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(field, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.field_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Field.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a plaintext element from a group element.\n    * @returns {Plaintext}\n    */\n    toPlaintext() {\n        const ret = wasm.field_toPlaintext(this.__wbg_ptr);\n        return Plaintext.__wrap(ret);\n    }\n    /**\n    * Returns the string representation of the field.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.field_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Generate a random field element.\n    * @returns {Field}\n    */\n    static random() {\n        const ret = wasm.field_random();\n        return Field.__wrap(ret);\n    }\n    /**\n    * Add two field elements.\n    * @param {Field} other\n    * @returns {Field}\n    */\n    add(other) {\n        _assertClass(other, Field);\n        const ret = wasm.field_add(this.__wbg_ptr, other.__wbg_ptr);\n        return Field.__wrap(ret);\n    }\n    /**\n    * Subtract two field elements.\n    * @param {Field} other\n    * @returns {Field}\n    */\n    subtract(other) {\n        _assertClass(other, Field);\n        const ret = wasm.field_subtract(this.__wbg_ptr, other.__wbg_ptr);\n        return Field.__wrap(ret);\n    }\n    /**\n    * Multiply two field elements.\n    * @param {Field} other\n    * @returns {Field}\n    */\n    multiply(other) {\n        _assertClass(other, Field);\n        const ret = wasm.field_multiply(this.__wbg_ptr, other.__wbg_ptr);\n        return Field.__wrap(ret);\n    }\n    /**\n    * Divide two field elements.\n    * @param {Field} other\n    * @returns {Field}\n    */\n    divide(other) {\n        _assertClass(other, Field);\n        const ret = wasm.field_divide(this.__wbg_ptr, other.__wbg_ptr);\n        return Field.__wrap(ret);\n    }\n    /**\n    * Power of a field element.\n    * @param {Field} other\n    * @returns {Field}\n    */\n    pow(other) {\n        _assertClass(other, Field);\n        const ret = wasm.field_pow(this.__wbg_ptr, other.__wbg_ptr);\n        return Field.__wrap(ret);\n    }\n    /**\n    * Invert the field element.\n    * @returns {Field}\n    */\n    inverse() {\n        const ret = wasm.field_inverse(this.__wbg_ptr);\n        return Field.__wrap(ret);\n    }\n    /**\n    * Get the zero element of the field.\n    * @returns {Field}\n    */\n    static zero() {\n        const ret = wasm.field_zero();\n        return Field.__wrap(ret);\n    }\n    /**\n    * Get the one element of the field.\n    * @returns {Field}\n    */\n    static one() {\n        const ret = wasm.field_one();\n        return Field.__wrap(ret);\n    }\n    /**\n    * Double the field element.\n    * @returns {Field}\n    */\n    double() {\n        const ret = wasm.field_double(this.__wbg_ptr);\n        return Field.__wrap(ret);\n    }\n    /**\n    * Check if one field element equals another.\n    * @param {Field} other\n    * @returns {boolean}\n    */\n    equals(other) {\n        _assertClass(other, Field);\n        const ret = wasm.field_equals(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst GraphKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_graphkey_free(ptr >>> 0));\n/**\n*/\nclass GraphKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GraphKey.prototype);\n        obj.__wbg_ptr = ptr;\n        GraphKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GraphKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_graphkey_free(ptr);\n    }\n    /**\n    * Create a new graph key from a view key.\n    *\n    * @param {ViewKey} view_key View key\n    * @returns {GraphKey} Graph key\n    * @param {ViewKey} view_key\n    * @returns {GraphKey}\n    */\n    static from_view_key(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.graphkey_from_view_key(view_key.__wbg_ptr);\n        return GraphKey.__wrap(ret);\n    }\n    /**\n    * Create a new graph key from a string representation of a graph key\n    *\n    * @param {string} graph_key String representation of a graph key\n    * @returns {GraphKey} Graph key\n    * @param {string} graph_key\n    * @returns {GraphKey}\n    */\n    static from_string(graph_key) {\n        const ptr0 = passStringToWasm0(graph_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.graphkey_from_string(ptr0, len0);\n        return GraphKey.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a graph key\n    *\n    * @returns {string} String representation of a graph key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.graphkey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the sk_tag of the graph key. Used to determine ownership of records.\n    * @returns {Field}\n    */\n    sk_tag() {\n        const ret = wasm.graphkey_sk_tag(this.__wbg_ptr);\n        return Field.__wrap(ret);\n    }\n}\n\nconst GroupFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_group_free(ptr >>> 0));\n/**\n* Elliptic curve element.\n*/\nclass Group {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Group.prototype);\n        obj.__wbg_ptr = ptr;\n        GroupFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GroupFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_group_free(ptr);\n    }\n    /**\n    * Creates a group object from a string representation of a group.\n    * @param {string} group\n    * @returns {Group}\n    */\n    static fromString(group) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(group, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.group_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Group.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the string representation of the group.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.group_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the x-coordinate of the group element.\n    * @returns {Field}\n    */\n    toXCoordinate() {\n        const ret = wasm.group_toXCoordinate(this.__wbg_ptr);\n        return Field.__wrap(ret);\n    }\n    /**\n    * Create a plaintext element from a group element.\n    * @returns {Plaintext}\n    */\n    toPlaintext() {\n        const ret = wasm.group_toPlaintext(this.__wbg_ptr);\n        return Plaintext.__wrap(ret);\n    }\n    /**\n    * Generate a random group element.\n    * @returns {Group}\n    */\n    static random() {\n        const ret = wasm.group_random();\n        return Group.__wrap(ret);\n    }\n    /**\n    * Add two group elements.\n    * @param {Group} other\n    * @returns {Group}\n    */\n    add(other) {\n        _assertClass(other, Group);\n        const ret = wasm.group_add(this.__wbg_ptr, other.__wbg_ptr);\n        return Group.__wrap(ret);\n    }\n    /**\n    * Subtract two group elements (equivalently: add the inverse of an element).\n    * @param {Group} other\n    * @returns {Group}\n    */\n    subtract(other) {\n        _assertClass(other, Group);\n        const ret = wasm.group_subtract(this.__wbg_ptr, other.__wbg_ptr);\n        return Group.__wrap(ret);\n    }\n    /**\n    * Multiply a group element by a scalar element.\n    * @param {Scalar} scalar\n    * @returns {Group}\n    */\n    scalarMultiply(scalar) {\n        _assertClass(scalar, Scalar);\n        const ret = wasm.group_scalarMultiply(this.__wbg_ptr, scalar.__wbg_ptr);\n        return Group.__wrap(ret);\n    }\n    /**\n    * Double the group element.\n    * @returns {Group}\n    */\n    double() {\n        const ret = wasm.group_double(this.__wbg_ptr);\n        return Group.__wrap(ret);\n    }\n    /**\n    * Get the inverse of the group element. This is the reflection of the point about the axis\n    * of symmetry i.e. (x,y) -> (x, -y).\n    * @returns {Group}\n    */\n    inverse() {\n        const ret = wasm.group_inverse(this.__wbg_ptr);\n        return Group.__wrap(ret);\n    }\n    /**\n    * Check if one group element equals another.\n    * @param {Group} other\n    * @returns {boolean}\n    */\n    equals(other) {\n        _assertClass(other, Group);\n        const ret = wasm.group_equals(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get the group identity element under the group operation (i.e. the point at infinity.)\n    * @returns {Group}\n    */\n    static zero() {\n        const ret = wasm.group_zero();\n        return Group.__wrap(ret);\n    }\n    /**\n    * Get the generator of the group.\n    * @returns {Group}\n    */\n    static generator() {\n        const ret = wasm.group_generator();\n        return Group.__wrap(ret);\n    }\n}\n\nconst KeyPairFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keypair_free(ptr >>> 0));\n/**\n* Key pair object containing both the function proving and verifying keys\n*/\nclass KeyPair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeyPair.prototype);\n        obj.__wbg_ptr = ptr;\n        KeyPairFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeyPairFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keypair_free(ptr);\n    }\n    /**\n    * Create new key pair from proving and verifying keys\n    *\n    * @param {ProvingKey} proving_key Proving key corresponding to a function in an Aleo program\n    * @param {VerifyingKey} verifying_key Verifying key corresponding to a function in an Aleo program\n    * @returns {KeyPair} Key pair object containing both the function proving and verifying keys\n    * @param {ProvingKey} proving_key\n    * @param {VerifyingKey} verifying_key\n    */\n    constructor(proving_key, verifying_key) {\n        _assertClass(proving_key, ProvingKey);\n        var ptr0 = proving_key.__destroy_into_raw();\n        _assertClass(verifying_key, VerifyingKey);\n        var ptr1 = verifying_key.__destroy_into_raw();\n        const ret = wasm.keypair_new(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        return this;\n    }\n    /**\n    * Get the proving key. This method will remove the proving key from the key pair\n    *\n    * @returns {ProvingKey}\n    * @returns {ProvingKey}\n    */\n    provingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_provingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the verifying key. This method will remove the verifying key from the key pair\n    *\n    * @returns {VerifyingKey}\n    * @returns {VerifyingKey}\n    */\n    verifyingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_verifyingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst MetadataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_metadata_free(ptr >>> 0));\n/**\n*/\nclass Metadata {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Metadata.prototype);\n        obj.__wbg_ptr = ptr;\n        MetadataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MetadataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_metadata_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    get name() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_name(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set name(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_name(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    get locator() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_locator(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set locator(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_locator(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    get prover() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_prover(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set prover(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_prover(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    get verifier() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_verifier(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set verifier(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_verifier(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    get verifyingKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_verifyingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set verifyingKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_verifyingKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    static baseUrl() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.metadata_baseUrl(retptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static bond_public() {\n        const ret = wasm.metadata_bond_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static bond_validator() {\n        const ret = wasm.metadata_bond_validator();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static claim_unbond_public() {\n        const ret = wasm.metadata_claim_unbond_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static fee_private() {\n        const ret = wasm.metadata_fee_private();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static fee_public() {\n        const ret = wasm.metadata_fee_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static inclusion() {\n        const ret = wasm.metadata_inclusion();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static join() {\n        const ret = wasm.metadata_join();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static set_validator_state() {\n        const ret = wasm.metadata_set_validator_state();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static split() {\n        const ret = wasm.metadata_split();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_private() {\n        const ret = wasm.metadata_transfer_private();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_private_to_public() {\n        const ret = wasm.metadata_transfer_private_to_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_public() {\n        const ret = wasm.metadata_transfer_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_public_as_signer() {\n        const ret = wasm.metadata_transfer_public_as_signer();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_public_to_private() {\n        const ret = wasm.metadata_transfer_public_to_private();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static unbond_public() {\n        const ret = wasm.metadata_unbond_public();\n        return Metadata.__wrap(ret);\n    }\n}\n\nconst OfflineQueryFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_offlinequery_free(ptr >>> 0));\n/**\n* An offline query object used to insert the global state root and state paths needed to create\n* a valid inclusion proof offline.\n*/\nclass OfflineQuery {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OfflineQuery.prototype);\n        obj.__wbg_ptr = ptr;\n        OfflineQueryFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OfflineQueryFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_offlinequery_free(ptr);\n    }\n    /**\n    * Creates a new offline query object. The state root is required to be passed in as a string\n    * @param {number} block_height\n    * @param {string} state_root\n    */\n    constructor(block_height, state_root) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(state_root, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.offlinequery_new(retptr, block_height, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Add a new block height to the offline query object.\n    * @param {number} block_height\n    */\n    addBlockHeight(block_height) {\n        wasm.offlinequery_addBlockHeight(this.__wbg_ptr, block_height);\n    }\n    /**\n    * Add a new state path to the offline query object.\n    *\n    * @param {string} commitment: The commitment corresponding to a record inpout\n    * @param {string} state_path: The state path corresponding to the commitment\n    * @param {string} commitment\n    * @param {string} state_path\n    */\n    addStatePath(commitment, state_path) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(commitment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(state_path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.offlinequery_addStatePath(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a json string representation of the offline query object\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.offlinequery_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create an offline query object from a json string representation\n    * @param {string} s\n    * @returns {OfflineQuery}\n    */\n    static fromString(s) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.offlinequery_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return OfflineQuery.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst PlaintextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_plaintext_free(ptr >>> 0));\n/**\n* SnarkVM Plaintext object. Plaintext is a fundamental monadic type used to represent Aleo\n* primitive types (boolean, field, group, i8, i16, i32, i64, i128, u8, u16, u32, u64, u128,\n* scalar, and signature), struct types, and array types.\n*\n* In the context of a web or NodeJS application, this type is useful for turning an Aleo type into\n* a JS value, object, or array that might be necessary for performing computations within the\n* application.\n*\n* @example\n* // Get the bond state of an existing address.\n* const bondState = await fetch(https://api.explorer.provable.com/v1/mainnet/program/credits.aleo/mapping/bond_state/aleo12zlythl7htjdtjjjz3ahdj4vl6wk3zuzm37s80l86qpx8fyx95fqnxcn2f);\n* // Convert the bond state to a Plaintext object.\n* const bondStatePlaintext = Plaintext.fromString(bond_state);\n* // Convert the Plaintext object to a JS object.\n* const bondStateObject = bond_state_plaintext.toObject();\n* // Check if the bond state matches the expected object.\n* const expectedObject = { validator: \"aleo12zlythl7htjdtjjjz3ahdj4vl6wk3zuzm37s80l86qpx8fyx95fqnxcn2f\", microcredits: 100000000u64 };\n* assert( JSON.stringify(bondStateObject) === JSON.stringify(expectedObject) );\n*/\nclass Plaintext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Plaintext.prototype);\n        obj.__wbg_ptr = ptr;\n        PlaintextFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PlaintextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plaintext_free(ptr);\n    }\n    /**\n    * Find plaintext member if the plaintext is a struct. Returns `null` if the plaintext is not\n    * a struct or the member does not exist.\n    *\n    * @param {string} name The name of the plaintext member to find.\n    *\n    * @returns {Plaintext} The plaintext member.\n    * @param {string} name\n    * @returns {Plaintext}\n    */\n    find(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.plaintext_find(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Plaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt a plaintext with an address and randomizer.\n    * @param {Address} address\n    * @param {Scalar} randomizer\n    * @returns {Ciphertext}\n    */\n    encrypt(address, randomizer) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(address, Address);\n            _assertClass(randomizer, Scalar);\n            wasm.plaintext_encrypt(retptr, this.__wbg_ptr, address.__wbg_ptr, randomizer.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ciphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt a plaintext with a transition view key.\n    * @param {Field} transition_view_key\n    * @returns {Ciphertext}\n    */\n    encryptSymmetric(transition_view_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(transition_view_key, Field);\n            wasm.plaintext_encryptSymmetric(retptr, this.__wbg_ptr, transition_view_key.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ciphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Creates a plaintext object from a string representation of a plaintext.\n    *\n    * @param {string} plaintext The string representation of the plaintext.\n    *\n    * @returns {Plaintext} The plaintext object.\n    * @param {string} plaintext\n    * @returns {Plaintext}\n    */\n    static fromString(plaintext) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(plaintext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.plaintext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Plaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a plaintext object from a series of bytes.\n    *\n    * @param {Uint8Array} bytes A left endian byte array representing the plaintext.\n    *\n    * @returns {Plaintext} The plaintext object.\n    * @param {Uint8Array} bytes\n    * @returns {Plaintext}\n    */\n    static fromBytesLe(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plaintext_fromBytesLe(retptr, addHeapObject(bytes));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Plaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Generate a random plaintext element from a series of bytes.\n    *\n    * @param {Uint8Array} bytes A left endian byte array representing the plaintext.\n    * @returns {Uint8Array}\n    */\n    toBytesLe() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plaintext_toBytesLe(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the string representation of the plaintext.\n    *\n    * @returns {string} The string representation of the plaintext.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plaintext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Gives the type of the plaintext.\n    *\n    * @returns {string} The type of the plaintext.\n    * @returns {string}\n    */\n    plaintextType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plaintext_plaintextType(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Attempt to convert the plaintext to a JS object.\n    *\n    * @returns {Object} The JS object representation of the plaintext.\n    * @returns {any}\n    */\n    toObject() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plaintext_toObject(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst PrivateKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_privatekey_free(ptr >>> 0));\n/**\n* Private key of an Aleo account\n*/\nclass PrivateKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKey.prototype);\n        obj.__wbg_ptr = ptr;\n        PrivateKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PrivateKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n    * Generate a new private key using a cryptographically secure random number generator\n    *\n    * @returns {PrivateKey}\n    */\n    constructor() {\n        const ret = wasm.privatekey_new();\n        this.__wbg_ptr = ret >>> 0;\n        return this;\n    }\n    /**\n    * Get a private key from a series of unchecked bytes\n    *\n    * @param {Uint8Array} seed Unchecked 32 byte long Uint8Array acting as the seed for the private key\n    * @returns {PrivateKey}\n    * @param {Uint8Array} seed\n    * @returns {PrivateKey}\n    */\n    static from_seed_unchecked(seed) {\n        const ptr0 = passArray8ToWasm0(seed, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_from_seed_unchecked(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a string representation of a private key\n    *\n    * @param {string} seed String representation of a private key\n    * @returns {PrivateKey}\n    * @param {string} private_key\n    * @returns {PrivateKey}\n    */\n    static from_string(private_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(private_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_string(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the private key. This function should be used very carefully\n    * as it exposes the private key plaintext\n    *\n    * @returns {string} String representation of a private key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the view key corresponding to the private key\n    *\n    * @returns {ViewKey}\n    * @returns {ViewKey}\n    */\n    to_view_key() {\n        const ret = wasm.privatekey_to_view_key(this.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get the address corresponding to the private key\n    *\n    * @returns {Address}\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.privatekey_to_address(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Sign a message with the private key\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {Signature} Signature generated by signing the message with the address\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    sign(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(this.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a new randomly generated private key ciphertext using a secret. The secret is sensitive\n    * and will be needed to decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static newEncrypted(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_newEncrypted(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt an existing private key with a secret. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    toCiphertext(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get private key from a private key ciphertext and secret originally used to encrypt it\n    *\n    * @param {PrivateKeyCiphertext} ciphertext Ciphertext representation of the private key\n    * @param {string} secret Secret originally used to encrypt the private key\n    * @returns {PrivateKey} Private key\n    * @param {PrivateKeyCiphertext} ciphertext\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    static fromPrivateKeyCiphertext(ciphertext, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(ciphertext, PrivateKeyCiphertext);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_fromPrivateKeyCiphertext(retptr, ciphertext.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst PrivateKeyCiphertextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_privatekeyciphertext_free(ptr >>> 0));\n/**\n* Private Key in ciphertext form\n*/\nclass PrivateKeyCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKeyCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n        PrivateKeyCiphertextFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PrivateKeyCiphertextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekeyciphertext_free(ptr);\n    }\n    /**\n    * Encrypt a private key using a secret string. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {PrivateKey} private_key Private key to encrypt\n    * @param {string} secret Secret to encrypt the private key with\n    * @returns {PrivateKeyCiphertext} Private key ciphertext\n    * @param {PrivateKey} private_key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static encryptPrivateKey(private_key, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, private_key.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Decrypts a private ciphertext using a secret string. This must be the same secret used to\n    * encrypt the private key\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKey} Private key\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    decryptToPrivateKey(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_decryptToPrivateKey(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the ciphertext string\n    *\n    * @returns {string} Ciphertext string\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates a PrivateKeyCiphertext from a string\n    *\n    * @param {string} ciphertext Ciphertext string\n    * @returns {PrivateKeyCiphertext} Private key ciphertext\n    * @param {string} ciphertext\n    * @returns {PrivateKeyCiphertext}\n    */\n    static fromString(ciphertext) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ProgramFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_program_free(ptr >>> 0));\n/**\n* Webassembly Representation of an Aleo program\n*/\nclass Program {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Program.prototype);\n        obj.__wbg_ptr = ptr;\n        ProgramFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ProgramFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_program_free(ptr);\n    }\n    /**\n    * Create a program from a program string\n    *\n    * @param {string} program Aleo program source code\n    * @returns {Program} Program object\n    * @param {string} program\n    * @returns {Program}\n    */\n    static fromString(program) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the program\n    *\n    * @returns {string} String containing the program source code\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Determine if a function is present in the program\n    *\n    * @param {string} functionName Name of the function to check for\n    * @returns {boolean} True if the program is valid, false otherwise\n    * @param {string} function_name\n    * @returns {boolean}\n    */\n    hasFunction(function_name) {\n        const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.program_hasFunction(this.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get javascript array of functions names in the program\n    *\n    * @returns {Array} Array of all function names present in the program\n    *\n    * @example\n    * const expected_functions = [\n    *   \"mint\",\n    *   \"transfer_private\",\n    *   \"transfer_private_to_public\",\n    *   \"transfer_public\",\n    *   \"transfer_public_to_private\",\n    *   \"join\",\n    *   \"split\",\n    *   \"fee\"\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_functions = credits_program.getFunctions();\n    * console.log(credits_functions === expected_functions); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getFunctions() {\n        const ret = wasm.program_getFunctions(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get a javascript object representation of the function inputs and types. This can be used\n    * to generate a web form to capture user inputs for an execution of a function.\n    *\n    * @param {string} function_name Name of the function to get inputs for\n    * @returns {Array} Array of function inputs\n    *\n    * @example\n    * const expected_inputs = [\n    *     {\n    *       type:\"record\",\n    *       visibility:\"private\",\n    *       record:\"credits\",\n    *       members:[\n    *         {\n    *           name:\"microcredits\",\n    *           type:\"u64\",\n    *           visibility:\"private\"\n    *         }\n    *       ],\n    *       register:\"r0\"\n    *     },\n    *     {\n    *       type:\"address\",\n    *       visibility:\"private\",\n    *       register:\"r1\"\n    *     },\n    *     {\n    *       type:\"u64\",\n    *       visibility:\"private\",\n    *       register:\"r2\"\n    *     }\n    * ];\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const transfer_function_inputs = credits_program.getFunctionInputs(\"transfer_private\");\n    * console.log(transfer_function_inputs === expected_inputs); // Output should be \"true\"\n    * @param {string} function_name\n    * @returns {Array<any>}\n    */\n    getFunctionInputs(function_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getFunctionInputs(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a the list of a program's mappings and the names/types of their keys and values.\n    *\n    * @returns {Array} - An array of objects representing the mappings in the program\n    * @example\n    * const expected_mappings = [\n    *    {\n    *       name: \"account\",\n    *       key_name: \"owner\",\n    *       key_type: \"address\",\n    *       value_name: \"microcredits\",\n    *       value_type: \"u64\"\n    *    }\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_mappings = credits_program.getMappings();\n    * console.log(credits_mappings === expected_mappings); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getMappings() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_getMappings(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program record and its types\n    *\n    * @param {string} record_name Name of the record to get members for\n    * @returns {Object} Object containing the record name, type, and members\n    *\n    * @example\n    *\n    * const expected_record = {\n    *     type: \"record\",\n    *     record: \"Credits\",\n    *     members: [\n    *       {\n    *         name: \"owner\",\n    *         type: \"address\",\n    *         visibility: \"private\"\n    *       },\n    *       {\n    *         name: \"microcredits\",\n    *         type: \"u64\",\n    *         visibility: \"private\"\n    *       }\n    *     ];\n    *  };\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_record = credits_program.getRecordMembers(\"Credits\");\n    * console.log(credits_record === expected_record); // Output should be \"true\"\n    * @param {string} record_name\n    * @returns {object}\n    */\n    getRecordMembers(record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getRecordMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program struct and its types\n    *\n    * @param {string} struct_name Name of the struct to get members for\n    * @returns {Array} Array containing the struct members\n    *\n    * @example\n    *\n    * const STRUCT_PROGRAM = \"program token_issue.aleo;\n    *\n    * struct token_metadata:\n    *     network as u32;\n    *     version as u32;\n    *\n    * struct token:\n    *     token_id as u32;\n    *     metadata as token_metadata;\n    *\n    * function no_op:\n    *    input r0 as u64;\n    *    output r0 as u64;\"\n    *\n    * const expected_struct_members = [\n    *    {\n    *      name: \"token_id\",\n    *      type: \"u32\",\n    *    },\n    *    {\n    *      name: \"metadata\",\n    *      type: \"struct\",\n    *      struct_id: \"token_metadata\",\n    *      members: [\n    *       {\n    *         name: \"network\",\n    *         type: \"u32\",\n    *       }\n    *       {\n    *         name: \"version\",\n    *         type: \"u32\",\n    *       }\n    *     ]\n    *   }\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(STRUCT_PROGRAM);\n    * const struct_members = program.getStructMembers(\"token\");\n    * console.log(struct_members === expected_struct_members); // Output should be \"true\"\n    * @param {string} struct_name\n    * @returns {Array<any>}\n    */\n    getStructMembers(struct_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(struct_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getStructMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the credits.aleo program\n    *\n    * @returns {Program} The credits.aleo program\n    * @returns {Program}\n    */\n    static getCreditsProgram() {\n        const ret = wasm.program_getCreditsProgram();\n        return Program.__wrap(ret);\n    }\n    /**\n    * Get the id of the program\n    *\n    * @returns {string} The id of the program\n    * @returns {string}\n    */\n    id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_id(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get a unique address of the program\n    *\n    * @returns {Address} The address of the program\n    * @returns {Address}\n    */\n    address() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_address(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Address.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Determine equality with another program\n    *\n    * @param {Program} other The other program to compare\n    * @returns {boolean} True if the programs are equal, false otherwise\n    * @param {Program} other\n    * @returns {boolean}\n    */\n    isEqual(other) {\n        _assertClass(other, Program);\n        const ret = wasm.program_isEqual(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get program_imports\n    *\n    * @returns {Array} The program imports\n    *\n    * @example\n    *\n    * const DOUBLE_TEST = \"import multiply_test.aleo;\n    *\n    * program double_test.aleo;\n    *\n    * function double_it:\n    *     input r0 as u32.private;\n    *     call multiply_test.aleo/multiply 2u32 r0 into r1;\n    *     output r1 as u32.private;\";\n    *\n    * const expected_imports = [\n    *    \"multiply_test.aleo\"\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(DOUBLE_TEST_PROGRAM);\n    * const imports = program.getImports();\n    * console.log(imports === expected_imports); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getImports() {\n        const ret = wasm.program_getImports(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst ProgramManagerFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_programmanager_free(ptr >>> 0));\n/**\n*/\nclass ProgramManager {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ProgramManagerFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_programmanager_free(ptr);\n    }\n    /**\n    * Deploy an Aleo program\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being deployed\n    * @param imports A javascript object holding the source code of any imported programs in the\n    * form \\{\"program_name1\": \"program_source_code\", \"program_name2\": \"program_source_code\", ..\\}.\n    * Note that all imported programs must be deployed on chain before the main program in order\n    * for the deployment to succeed\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the program deployment in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildDeploymentTransaction(private_key, program, fee_credits, fee_record, url, imports, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        let ptr1 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr1 = fee_record.__destroy_into_raw();\n        }\n        var ptr2 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr3 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr4 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildDeploymentTransaction(private_key.__wbg_ptr, ptr0, len0, fee_credits, ptr1, ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the fee for a program deployment\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The source code of the program being deployed\n    * @param imports (optional) Provide a list of imports to use for the deployment fee estimation\n    * in the form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @returns {u64}\n    * @param {string} program\n    * @param {object | undefined} [imports]\n    * @returns {Promise<bigint>}\n    */\n    static estimateDeploymentFee(program, imports) {\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_estimateDeploymentFee(ptr0, len0, isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the component of the deployment cost which comes from the fee for the program name.\n    * Note that this cost does not represent the entire cost of deployment. It is additional to\n    * the cost of the size (in bytes) of the deployment.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param name The name of the program to be deployed\n    * @returns {u64}\n    * @param {string} name\n    * @returns {bigint}\n    */\n    static estimateProgramNameCost(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateProgramNameCost(retptr, ptr0, len0);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Execute an arbitrary function locally\n    *\n    * @param {PrivateKey} private_key The private key of the sender\n    * @param {string} program The source code of the program being executed\n    * @param {string} function The name of the function to execute\n    * @param {Array} inputs A javascript array of inputs to the function\n    * @param {boolean} prove_execution If true, the execution will be proven and an execution object\n    * containing the proof and the encrypted inputs and outputs needed to verify the proof offline\n    * will be returned.\n    * @param {boolean} cache Cache the proving and verifying keys in the Execution response.\n    * If this is set to 'true' the keys synthesized will be stored in the Execution Response\n    * and the `ProvingKey` and `VerifyingKey` can be retrieved from the response via the `.getKeys()`\n    * method.\n    * @param {Object | undefined} imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param {ProvingKey | undefined} proving_key (optional) Provide a verifying key to use for the function execution\n    * @param {VerifyingKey | undefined} verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {boolean} prove_execution\n    * @param {boolean} cache\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [proving_key]\n    * @param {VerifyingKey | undefined} [verifying_key]\n    * @param {string | undefined} [url]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<ExecutionResponse>}\n    */\n    static executeFunctionOffline(private_key, program, _function, inputs, prove_execution, cache, imports, proving_key, verifying_key, url, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr2 = proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr3 = verifying_key.__destroy_into_raw();\n        }\n        var ptr4 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_executeFunctionOffline(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), prove_execution, cache, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr2, ptr3, ptr4, len4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Execute Aleo function and create an Aleo execution transaction\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being executed\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * If this is set to 'true' the keys synthesized (or passed in as optional parameters via the\n    * `proving_key` and `verifying_key` arguments) will be stored in the ProgramManager's memory\n    * and used for subsequent transactions. If this is set to 'false' the proving and verifying\n    * keys will be deallocated from memory after the transaction is executed.\n    * @param imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the function execution\n    * @param verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [proving_key]\n    * @param {VerifyingKey | undefined} [verifying_key]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildExecutionTransaction(private_key, program, _function, inputs, fee_credits, fee_record, url, imports, proving_key, verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        var ptr3 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr4 = proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr5 = verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr8 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildExecutionTransaction(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), fee_credits, ptr2, ptr3, len3, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr4, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate Fee for Aleo function execution. Note if \"cache\" is set to true, the proving and\n    * verifying keys will be stored in the ProgramManager's memory and used for subsequent\n    * program executions.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program to estimate the execution fee for\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the fee estimation in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the fee estimation\n    * @param verifying_key (optional) Provide a verifying key to use for the fee estimation\n    * @returns {u64} Fee in microcredits\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {string | undefined} [url]\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [proving_key]\n    * @param {VerifyingKey | undefined} [verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<bigint>}\n    */\n    static estimateExecutionFee(private_key, program, _function, inputs, url, imports, proving_key, verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr3 = proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr4 = verifying_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_estimateExecutionFee(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the finalize fee component for executing a function. This fee is additional to the\n    * size of the execution of the program in bytes. If the function does not have a finalize\n    * step, then the finalize fee is 0.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The program containing the function to estimate the finalize fee for\n    * @param function The function to estimate the finalize fee for\n    * @returns {u64} Fee in microcredits\n    * @param {string} program\n    * @param {string} _function\n    * @returns {bigint}\n    */\n    static estimateFinalizeFee(program, _function) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateFinalizeFee(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Join two records together to create a new record with an amount of credits equal to the sum\n    * of the credits of the two original records\n    *\n    * @param private_key The private key of the sender\n    * @param record_1 The first record to combine\n    * @param record_2 The second record to combine\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param join_proving_key (optional) Provide a proving key to use for the join function\n    * @param join_verifying_key (optional) Provide a verifying key to use for the join function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {RecordPlaintext} record_1\n    * @param {RecordPlaintext} record_2\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {ProvingKey | undefined} [join_proving_key]\n    * @param {VerifyingKey | undefined} [join_verifying_key]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildJoinTransaction(private_key, record_1, record_2, fee_credits, fee_record, url, join_proving_key, join_verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(record_1, RecordPlaintext);\n        var ptr0 = record_1.__destroy_into_raw();\n        _assertClass(record_2, RecordPlaintext);\n        var ptr1 = record_2.__destroy_into_raw();\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        var ptr3 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(join_proving_key)) {\n            _assertClass(join_proving_key, ProvingKey);\n            ptr4 = join_proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(join_verifying_key)) {\n            _assertClass(join_verifying_key, VerifyingKey);\n            ptr5 = join_verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr8 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildJoinTransaction(private_key.__wbg_ptr, ptr0, ptr1, fee_credits, ptr2, ptr3, len3, ptr4, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Split an Aleo credits record into two separate records. This function does not require a fee.\n    *\n    * @param private_key The private key of the sender\n    * @param split_amount The amount of the credit split. This amount will be subtracted from the\n    * value of the record and two new records will be created with the split amount and the remainder\n    * @param amount_record The record to split\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param split_proving_key (optional) Provide a proving key to use for the split function\n    * @param split_verifying_key (optional) Provide a verifying key to use for the split function\n    * @returns {Transaction} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {number} split_amount\n    * @param {RecordPlaintext} amount_record\n    * @param {string | undefined} [url]\n    * @param {ProvingKey | undefined} [split_proving_key]\n    * @param {VerifyingKey | undefined} [split_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildSplitTransaction(private_key, split_amount, amount_record, url, split_proving_key, split_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(amount_record, RecordPlaintext);\n        var ptr0 = amount_record.__destroy_into_raw();\n        var ptr1 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(split_proving_key)) {\n            _assertClass(split_proving_key, ProvingKey);\n            ptr2 = split_proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(split_verifying_key)) {\n            _assertClass(split_verifying_key, VerifyingKey);\n            ptr3 = split_verifying_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr4 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildSplitTransaction(private_key.__wbg_ptr, split_amount, ptr0, ptr1, len1, ptr2, ptr3, ptr4);\n        return takeObject(ret);\n    }\n    /**\n    * Send credits from one Aleo account to another\n    *\n    * @param private_key The private key of the sender\n    * @param amount_credits The amount of credits to send\n    * @param recipient The recipient of the transaction\n    * @param transfer_type The type of the transfer (options: \"private\", \"public\", \"private_to_public\", \"public_to_private\")\n    * @param amount_record The record to fund the amount from\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param transfer_verifying_key (optional) Provide a verifying key to use for the transfer\n    * function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction}\n    * @param {PrivateKey} private_key\n    * @param {number} amount_credits\n    * @param {string} recipient\n    * @param {string} transfer_type\n    * @param {RecordPlaintext | undefined} amount_record\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {ProvingKey | undefined} [transfer_proving_key]\n    * @param {VerifyingKey | undefined} [transfer_verifying_key]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildTransferTransaction(private_key, amount_credits, recipient, transfer_type, amount_record, fee_credits, fee_record, url, transfer_proving_key, transfer_verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(recipient, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(transfer_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(amount_record)) {\n            _assertClass(amount_record, RecordPlaintext);\n            ptr2 = amount_record.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr3 = fee_record.__destroy_into_raw();\n        }\n        var ptr4 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(transfer_proving_key)) {\n            _assertClass(transfer_proving_key, ProvingKey);\n            ptr5 = transfer_proving_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(transfer_verifying_key)) {\n            _assertClass(transfer_verifying_key, VerifyingKey);\n            ptr6 = transfer_verifying_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr7 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr8 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr9 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr9 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildTransferTransaction(private_key.__wbg_ptr, amount_credits, ptr0, len0, ptr1, len1, ptr2, fee_credits, ptr3, ptr4, len4, ptr5, ptr6, ptr7, ptr8, ptr9);\n        return takeObject(ret);\n    }\n    /**\n    * Synthesize proving and verifying keys for a program\n    *\n    * @param program {string} The program source code of the program to synthesize keys for\n    * @param function_id {string} The function to synthesize keys for\n    * @param inputs {Array} The inputs to the function\n    * @param imports {Object | undefined} The imports for the program\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} function_id\n    * @param {Array<any>} inputs\n    * @param {object | undefined} [imports]\n    * @returns {Promise<KeyPair>}\n    */\n    static synthesizeKeyPair(private_key, program, function_id, inputs, imports) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_synthesizeKeyPair(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n}\n\nconst ProvingKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_provingkey_free(ptr >>> 0));\n/**\n* Proving key for a function within an Aleo program\n*/\nclass ProvingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ProvingKey.prototype);\n        obj.__wbg_ptr = ptr;\n        ProvingKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ProvingKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_provingkey_free(ptr);\n    }\n    /**\n    * Verify if the proving key is for the bond_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"bond_public_proving_key.bin\");\n    * provingKey.isBondPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the bond_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isBondPublicProver() {\n        const ret = wasm.provingkey_isBondPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the bond_validator function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"bond_validator_proving_key.bin\");\n    * provingKey.isBondPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the bond_validator function, false if otherwise\n    * @returns {boolean}\n    */\n    isBondValidatorProver() {\n        const ret = wasm.provingkey_isBondValidatorProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the claim_unbond function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"claim_unbond_proving_key.bin\");\n    * provingKey.isClaimUnbondProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the claim_unbond function, false if otherwise\n    * @returns {boolean}\n    */\n    isClaimUnbondPublicProver() {\n        const ret = wasm.provingkey_isClaimUnbondPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the fee_private function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"fee_private_proving_key.bin\");\n    * provingKey.isFeePrivateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the fee_private function, false if otherwise\n    * @returns {boolean}\n    */\n    isFeePrivateProver() {\n        const ret = wasm.provingkey_isFeePrivateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the fee_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"fee_public_proving_key.bin\");\n    * provingKey.isFeePublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the fee_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isFeePublicProver() {\n        const ret = wasm.provingkey_isFeePublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the inclusion function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"inclusion_proving_key.bin\");\n    * provingKey.isInclusionProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the inclusion function, false if otherwise\n    * @returns {boolean}\n    */\n    isInclusionProver() {\n        const ret = wasm.provingkey_isInclusionProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the join function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"join_proving_key.bin\");\n    * provingKey.isJoinProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the join function, false if otherwise\n    * @returns {boolean}\n    */\n    isJoinProver() {\n        const ret = wasm.provingkey_isJoinProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the set_validator_state function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"set_validator_set_proving_key.bin\");\n    * provingKey.isSetValidatorStateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the set_validator_state function, false if otherwise\n    * @returns {boolean}\n    */\n    isSetValidatorStateProver() {\n        const ret = wasm.provingkey_isSetValidatorStateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the split function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"split_proving_key.bin\");\n    * provingKey.isSplitProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the split function, false if otherwise\n    * @returns {boolean}\n    */\n    isSplitProver() {\n        const ret = wasm.provingkey_isSplitProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_private function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_private_proving_key.bin\");\n    * provingKey.isTransferPrivateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_private function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPrivateProver() {\n        const ret = wasm.provingkey_isTransferPrivateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_private_to_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_private_to_public_proving_key.bin\");\n    * provingKey.isTransferPrivateToPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_private_to_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPrivateToPublicProver() {\n        const ret = wasm.provingkey_isTransferPrivateToPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_public_proving_key.bin\");\n    * provingKey.isTransferPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPublicProver() {\n        const ret = wasm.provingkey_isTransferPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_public_as_signer function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_public_as_signer_proving_key.bin\");\n    * provingKey.isTransferPublicAsSignerProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPublicAsSignerProver() {\n        const ret = wasm.provingkey_isTransferPublicAsSignerProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_public_to_private function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_public_to_private_proving_key.bin\");\n    * provingKey.isTransferPublicToPrivateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_public_to_private function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPublicToPrivateProver() {\n        const ret = wasm.provingkey_isTransferPublicToPrivateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the unbond_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"unbond_public.bin\");\n    * provingKey.isUnbondPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the unbond_public_prover function, false if otherwise\n    * @returns {boolean}\n    */\n    isUnbondPublicProver() {\n        const ret = wasm.provingkey_isUnbondPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Return the checksum of the proving key\n    *\n    * @returns {string} Checksum of the proving key\n    * @returns {string}\n    */\n    checksum() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_checksum(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a copy of the proving key\n    *\n    * @returns {ProvingKey} A copy of the proving key\n    * @returns {ProvingKey}\n    */\n    copy() {\n        const ret = wasm.provingkey_copy(this.__wbg_ptr);\n        return ProvingKey.__wrap(ret);\n    }\n    /**\n    * Construct a new proving key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte array representation of a proving key\n    * @returns {ProvingKey}\n    * @param {Uint8Array} bytes\n    * @returns {ProvingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a proving key from string\n    *\n    * @param {string} String representation of the proving key\n    * @param {string} string\n    * @returns {ProvingKey}\n    */\n    static fromString(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the byte representation of a proving key\n    *\n    * @returns {Uint8Array} Byte array representation of a proving key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the proving key\n    *\n    * @returns {string} String representation of the proving key\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RecordCiphertextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_recordciphertext_free(ptr >>> 0));\n/**\n* Encrypted Aleo record\n*/\nclass RecordCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n        RecordCiphertextFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RecordCiphertextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordciphertext_free(ptr);\n    }\n    /**\n    * Create a record ciphertext from a string\n    *\n    * @param {string} record String representation of a record ciphertext\n    * @returns {RecordCiphertext} Record ciphertext\n    * @param {string} record\n    * @returns {RecordCiphertext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the string reprensentation of the record ciphertext\n    *\n    * @returns {string} String representation of the record ciphertext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Decrypt the record ciphertext into plaintext using the view key. The record will only\n    * decrypt if the record was encrypted by the account corresponding to the view key\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {RecordPlaintext} Record plaintext object\n    * @param {ViewKey} view_key\n    * @returns {RecordPlaintext}\n    */\n    decrypt(view_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(view_key, ViewKey);\n            wasm.recordciphertext_decrypt(retptr, this.__wbg_ptr, view_key.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Determines if the account corresponding to the view key is the owner of the record\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {boolean}\n    * @param {ViewKey} view_key\n    * @returns {boolean}\n    */\n    isOwner(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.recordciphertext_isOwner(this.__wbg_ptr, view_key.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get the tag of the record using the graph key.\n    *\n    * @param {GraphKey} graph key of the account associatd with the record.\n    * @param {Field} commitment of the record.\n    *\n    * @returns {Field} tag of the record.\n    * @param {GraphKey} graph_key\n    * @param {Field} commitment\n    * @returns {Field}\n    */\n    static tag(graph_key, commitment) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(graph_key, GraphKey);\n            _assertClass(commitment, Field);\n            var ptr0 = commitment.__destroy_into_raw();\n            wasm.recordciphertext_tag(retptr, graph_key.__wbg_ptr, ptr0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Field.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst RecordPlaintextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_recordplaintext_free(ptr >>> 0));\n/**\n* Plaintext representation of an Aleo record\n*/\nclass RecordPlaintext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordPlaintext.prototype);\n        obj.__wbg_ptr = ptr;\n        RecordPlaintextFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RecordPlaintextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordplaintext_free(ptr);\n    }\n    /**\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {Field}\n    */\n    commitment(program_id, record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_commitment(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Field.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return a record plaintext from a string.\n    *\n    * @param {string} record String representation of a plaintext representation of an Aleo record\n    * @returns {RecordPlaintext} Record plaintext\n    * @param {string} record\n    * @returns {RecordPlaintext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} input\n    * @returns {Plaintext}\n    */\n    getMember(input) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_getMember(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Plaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the owner of the record.\n    * @returns {Address}\n    */\n    owner() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_owner(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Address.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a representation of a record as a javascript object for usage in client side\n    * computations. Note that this is not a reversible operation and exists for the convenience\n    * of discovering and using properties of the record.\n    *\n    * The conversion guide is as follows:\n    * - u8, u16, u32, i8, i16 i32 --> Number\n    * - u64, u128, i64, i128 --> BigInt\n    * - Address, Field, Group, Scalar --> String.\n    *\n    * Address, Field, Group, and Scalar will all be converted to their bech32 string\n    * representation. These string representations can be converted back to their respective wasm\n    * types using the fromString method on the Address, Field, Group, and Scalar objects in this\n    * library.\n    *\n    * @example\n    * # Create a wasm record from a record string.\n    * let record_plaintext_wasm = RecordPlainext.from_string(\"{\n    *   owner: aleo1kh5t7m30djl0ecdn4f5vuzp7dx0tcwh7ncquqjkm4matj2p2zqpqm6at48.private,\n    *   metadata: {\n    *     player1: aleo1kh5t7m30djl0ecdn4f5vuzp7dx0tcwh7ncquqjkm4matj2p2zqpqm6at48.private,\n    *     player2: aleo1dreuxnmg9cny8ee9v2u0wr4v4affnwm09u2pytfwz0f2en2shgqsdsfjn6.private,\n    *     nonce: 660310649780728486489183263981322848354071976582883879926426319832534836534field.private\n    *   },\n    *   id: 1953278585719525811355617404139099418855053112960441725284031425961000152405field.private,\n    *   positions: 50794271u64.private,\n    *   attempts: 0u64.private,\n    *   hits: 0u64.private,\n    *   _nonce: 5668100912391182624073500093436664635767788874314097667746354181784048204413group.public\n    * }\");\n    *\n    * let expected_object = {\n    *   owner: \"aleo1kh5t7m30djl0ecdn4f5vuzp7dx0tcwh7ncquqjkm4matj2p2zqpqm6at48\",\n    *   metadata: {\n    *     player1: \"aleo1kh5t7m30djl0ecdn4f5vuzp7dx0tcwh7ncquqjkm4matj2p2zqpqm6at48\",\n    *     player2: \"aleo1dreuxnmg9cny8ee9v2u0wr4v4affnwm09u2pytfwz0f2en2shgqsdsfjn6\",\n    *     nonce: \"660310649780728486489183263981322848354071976582883879926426319832534836534field\"\n    *   },\n    *   id: \"1953278585719525811355617404139099418855053112960441725284031425961000152405field\",\n    *   positions: 50794271,\n    *   attempts: 0,\n    *   hits: 0,\n    *   _nonce: \"5668100912391182624073500093436664635767788874314097667746354181784048204413group\"\n    * };\n    *\n    * # Create the expected object\n    * let record_plaintext_object = record_plaintext_wasm.to_js_object();\n    * assert(JSON.stringify(record_plaintext_object) == JSON.stringify(expected_object));\n    *\n    * @returns {Object} Javascript object representation of the record\n    * @returns {object}\n    */\n    toJsObject() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_toJsObject(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the record plaintext string\n    *\n    * @returns {string} String representation of the record plaintext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the amount of microcredits in the record\n    *\n    * @returns {u64} Amount of microcredits in the record\n    * @returns {bigint}\n    */\n    microcredits() {\n        const ret = wasm.recordplaintext_microcredits(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * Returns the nonce of the record. This can be used to uniquely identify a record.\n    *\n    * @returns {string} Nonce of the record\n    * @returns {string}\n    */\n    nonce() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_nonce(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Attempt to get the serial number of a record to determine whether or not is has been spent\n    *\n    * @param {PrivateKey} private_key Private key of the account that owns the record\n    * @param {string} program_id Program ID of the program that the record is associated with\n    * @param {string} record_name Name of the record\n    *\n    * @returns {string} Serial number of the record\n    * @param {PrivateKey} private_key\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {string}\n    */\n    serialNumberString(private_key, program_id, record_name) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_serialNumberString(retptr, this.__wbg_ptr, private_key.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr3 = r0;\n            var len3 = r1;\n            if (r3) {\n                ptr3 = 0; len3 = 0;\n                throw takeObject(r2);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n    * Get the tag of the record using the graph key.\n    * @param {GraphKey} graph_key\n    * @param {Field} commitment\n    * @returns {Field}\n    */\n    tag(graph_key, commitment) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(graph_key, GraphKey);\n            _assertClass(commitment, Field);\n            var ptr0 = commitment.__destroy_into_raw();\n            wasm.recordplaintext_tag(retptr, this.__wbg_ptr, graph_key.__wbg_ptr, ptr0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Field.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ScalarFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_scalar_free(ptr >>> 0));\n/**\n* Scalar field element.\n*/\nclass Scalar {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Scalar.prototype);\n        obj.__wbg_ptr = ptr;\n        ScalarFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ScalarFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scalar_free(ptr);\n    }\n    /**\n    * Returns the string representation of the group.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scalar_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a plaintext element from a group element.\n    * @returns {Plaintext}\n    */\n    toPlaintext() {\n        const ret = wasm.scalar_toPlaintext(this.__wbg_ptr);\n        return Plaintext.__wrap(ret);\n    }\n    /**\n    * Creates a group object from a string representation of a group.\n    * @param {string} group\n    * @returns {Scalar}\n    */\n    static fromString(group) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(group, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scalar_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Scalar.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Generate a random group element.\n    * @returns {Scalar}\n    */\n    static random() {\n        const ret = wasm.scalar_random();\n        return Scalar.__wrap(ret);\n    }\n    /**\n    * Add two scalar elements.\n    * @param {Scalar} other\n    * @returns {Scalar}\n    */\n    add(other) {\n        _assertClass(other, Scalar);\n        const ret = wasm.scalar_add(this.__wbg_ptr, other.__wbg_ptr);\n        return Scalar.__wrap(ret);\n    }\n    /**\n    * Subtract two scalar elements.\n    * @param {Scalar} other\n    * @returns {Scalar}\n    */\n    subtract(other) {\n        _assertClass(other, Scalar);\n        const ret = wasm.scalar_subtract(this.__wbg_ptr, other.__wbg_ptr);\n        return Scalar.__wrap(ret);\n    }\n    /**\n    * Multiply two scalar elements.\n    * @param {Scalar} other\n    * @returns {Scalar}\n    */\n    multiply(other) {\n        _assertClass(other, Scalar);\n        const ret = wasm.scalar_multiply(this.__wbg_ptr, other.__wbg_ptr);\n        return Scalar.__wrap(ret);\n    }\n    /**\n    * Divide two scalar elements.\n    * @param {Scalar} other\n    * @returns {Scalar}\n    */\n    divide(other) {\n        _assertClass(other, Scalar);\n        const ret = wasm.scalar_divide(this.__wbg_ptr, other.__wbg_ptr);\n        return Scalar.__wrap(ret);\n    }\n    /**\n    * Double the scalar element.\n    * @returns {Scalar}\n    */\n    double() {\n        const ret = wasm.scalar_double(this.__wbg_ptr);\n        return Scalar.__wrap(ret);\n    }\n    /**\n    * Power of a scalar element.\n    * @param {Scalar} other\n    * @returns {Scalar}\n    */\n    pow(other) {\n        _assertClass(other, Scalar);\n        const ret = wasm.scalar_pow(this.__wbg_ptr, other.__wbg_ptr);\n        return Scalar.__wrap(ret);\n    }\n    /**\n    * Invert the scalar element.\n    * @returns {Scalar}\n    */\n    inverse() {\n        const ret = wasm.scalar_inverse(this.__wbg_ptr);\n        return Scalar.__wrap(ret);\n    }\n    /**\n    * Creates a one valued element of the scalar field.\n    * @returns {Scalar}\n    */\n    static one() {\n        const ret = wasm.scalar_one();\n        return Scalar.__wrap(ret);\n    }\n    /**\n    * Creates a zero valued element of the scalar field\n    * @returns {Scalar}\n    */\n    static zero() {\n        const ret = wasm.field_zero();\n        return Scalar.__wrap(ret);\n    }\n    /**\n    * Check if one scalar element equals another.\n    * @param {Scalar} other\n    * @returns {boolean}\n    */\n    equals(other) {\n        _assertClass(other, Scalar);\n        const ret = wasm.field_equals(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signature_free(ptr >>> 0));\n/**\n* Cryptographic signature of a message signed by an Aleo account\n*/\nclass Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr);\n    }\n    /**\n    * Sign a message with a private key\n    *\n    * @param {PrivateKey} private_key The private key to sign the message with\n    * @param {Uint8Array} message Byte representation of the message to sign\n    * @returns {Signature} Signature of the message\n    * @param {PrivateKey} private_key\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    static sign(private_key, message) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(private_key.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get an address from a signature.\n    *\n    * @returns {Address} Address object\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.signature_to_address(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Get the challenge of a signature.\n    * @returns {Scalar}\n    */\n    challenge() {\n        const ret = wasm.graphkey_sk_tag(this.__wbg_ptr);\n        return Scalar.__wrap(ret);\n    }\n    /**\n    * Get the response of a signature.\n    * @returns {Scalar}\n    */\n    response() {\n        const ret = wasm.signature_response(this.__wbg_ptr);\n        return Scalar.__wrap(ret);\n    }\n    /**\n    * Verify a signature of a message with an address\n    *\n    * @param {Address} address The address to verify the signature with\n    * @param {Uint8Array} message Byte representation of the message to verify\n    * @returns {boolean} True if the signature is valid, false otherwise\n    * @param {Address} address\n    * @param {Uint8Array} message\n    * @returns {boolean}\n    */\n    verify(address, message) {\n        _assertClass(address, Address);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_verify(this.__wbg_ptr, address.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get a signature from a string representation of a signature\n    *\n    * @param {string} signature String representation of a signature\n    * @returns {Signature} Signature\n    * @param {string} signature\n    * @returns {Signature}\n    */\n    static from_string(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_from_string(ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a signature\n    *\n    * @returns {string} String representation of a signature\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst TransactionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_transaction_free(ptr >>> 0));\n/**\n* Webassembly Representation of an Aleo transaction\n*\n* This object is created when generating an on-chain function deployment or execution and is the\n* object that should be submitted to the Aleo Network in order to deploy or execute a function.\n*/\nclass Transaction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Transaction.prototype);\n        obj.__wbg_ptr = ptr;\n        TransactionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TransactionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n    * Create a transaction from a string\n    *\n    * @param {string} transaction String representation of a transaction\n    * @returns {Transaction}\n    * @param {string} transaction\n    * @returns {Transaction}\n    */\n    static fromString(transaction) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(transaction, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transaction_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a transaction from a Uint8Array of left endian bytes.\n    *\n    * @param {Uint8Array} Uint8Array of left endian bytes encoding a Transaction.\n    * @returns {Transaction}\n    * @param {Uint8Array} bytes\n    * @returns {Transaction}\n    */\n    static fromBytesLe(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_fromBytesLe(retptr, addHeapObject(bytes));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the transaction as a string. If you want to submit this transaction to the Aleo Network\n    * this function will create the string that should be submitted in the `POST` data.\n    *\n    * @returns {string} String representation of the transaction\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the transaction as a Uint8Array of left endian bytes.\n    *\n    * @returns {Uint8Array} Uint8Array representation of the transaction\n    * @returns {Uint8Array}\n    */\n    toBytesLe() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_toBytesLe(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns true if the transaction contains the given serial number.\n    *\n    * @param {boolean} True if the transaction contains the given serial number.\n    * @param {Field} serial_number\n    * @returns {boolean}\n    */\n    constainsSerialNumber(serial_number) {\n        _assertClass(serial_number, Field);\n        const ret = wasm.transaction_constainsSerialNumber(this.__wbg_ptr, serial_number.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Returns true if the transaction contains the given commitment.\n    *\n    * @param {boolean} True if the transaction contains the given commitment.\n    * @param {Field} commitment\n    * @returns {boolean}\n    */\n    constainsCommitment(commitment) {\n        _assertClass(commitment, Field);\n        const ret = wasm.transaction_constainsCommitment(this.__wbg_ptr, commitment.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Find a record in the transaction by the record's commitment.\n    * @param {Field} commitment\n    * @returns {RecordCiphertext | undefined}\n    */\n    findRecord(commitment) {\n        _assertClass(commitment, Field);\n        const ret = wasm.transaction_findRecord(this.__wbg_ptr, commitment.__wbg_ptr);\n        return ret === 0 ? undefined : RecordCiphertext.__wrap(ret);\n    }\n    /**\n    * Returns the transaction's base fee.\n    * @returns {bigint}\n    */\n    baseFeeAmount() {\n        const ret = wasm.transaction_baseFeeAmount(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * Returns the transaction's total fee.\n    * @returns {bigint}\n    */\n    feeAmount() {\n        const ret = wasm.transaction_feeAmount(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * Returns the transaction's priority fee.\n    *\n    * returns {bigint} The transaction's priority fee.\n    * @returns {bigint}\n    */\n    priorityFeeAmount() {\n        const ret = wasm.transaction_priorityFeeAmount(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * Returns true if the transaction is a deployment transaction.\n    *\n    * @returns {boolean} True if the transaction is a deployment transaction\n    * @returns {boolean}\n    */\n    isDeploy() {\n        const ret = wasm.transaction_isDeploy(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Returns true if the transaction is an execution transaction.\n    *\n    * @returns {boolean} True if the transaction is an execution transaction\n    * @returns {boolean}\n    */\n    isExecute() {\n        const ret = wasm.transaction_isExecute(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Returns true if the transaction is a fee transaction.\n    *\n    * @returns {boolean} True if the transaction is a fee transaction\n    * @returns {boolean}\n    */\n    isFee() {\n        const ret = wasm.transaction_isFee(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Returns the program deployed within the transaction if the transaction is a deployment\n    * transaction.\n    *\n    * @returns {Program | undefined} The program deployed within the transaction.\n    * @returns {Program | undefined}\n    */\n    deployedProgram() {\n        const ret = wasm.transaction_deployedProgram(this.__wbg_ptr);\n        return ret === 0 ? undefined : Program.__wrap(ret);\n    }\n    /**\n    * Returns the execution within the transaction (if present).\n    *\n    * @returns {Execution | undefined} The execution within the transaction.\n    * @returns {Execution | undefined}\n    */\n    execution() {\n        const ret = wasm.transaction_execution(this.__wbg_ptr);\n        return ret === 0 ? undefined : Execution.__wrap(ret);\n    }\n    /**\n    * Get the record plaintext present in a transaction owned by a specific view key.\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    *\n    * @returns {Array<RecordPlaintext>} Array of record plaintext objects\n    * @param {ViewKey} view_key\n    * @returns {Array<any>}\n    */\n    ownedRecords(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.transaction_ownedRecords(this.__wbg_ptr, view_key.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get the records present in a transaction and their commitments.\n    *\n    * @returns {Array<{commitment: Field, record: RecordCiphertext}>} Array of record ciphertext objects\n    * @returns {Array<any>}\n    */\n    records() {\n        const ret = wasm.transaction_records(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get a summary of the transaction within a javascript object.\n    *\n    * If the transaction is an execution transaction, this function will return a list of the\n    * transitions and their inputs and outputs.\n    *\n    * If the transaction is a deployment transaction, this function will return the program id and\n    * a list of the functions and their verifying keys, constraint, and variable counts.\n    *\n    * @param {boolean} convert_to_js If true the inputs and outputs will be converted to JS objects,\n    * if false the inputs and outputs will be in wasm format.\n    *\n    * @returns {Object} Transaction summary\n    * @param {boolean} convert_to_js\n    * @returns {object}\n    */\n    summary(convert_to_js) {\n        const ret = wasm.transaction_summary(this.__wbg_ptr, convert_to_js);\n        return takeObject(ret);\n    }\n    /**\n    * Get the id of the transaction. This is the merkle root of the transaction's inclusion proof.\n    *\n    * This value can be used to query the status of the transaction on the Aleo Network to see\n    * if it was successful. If successful, the transaction will be included in a block and this\n    * value can be used to lookup the transaction data on-chain.\n    *\n    * @returns {string} TransactionId\n    * @returns {string}\n    */\n    id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_id(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the\n    * Get the type of the transaction (will return \"deploy\" or \"execute\")\n    *\n    * @returns {string} Transaction type\n    * @returns {string}\n    */\n    transactionType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionType(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the transitions in a transaction.\n    *\n    * @returns {Array<Transition>} Array of transition objects\n    * @returns {Array<any>}\n    */\n    transitions() {\n        const ret = wasm.transaction_transitions(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get the verifying keys in a transaction.\n    *\n    * @returns {Array<Object>} Array of verifying keys.\n    * @returns {Array<any>}\n    */\n    verifyingKeys() {\n        const ret = wasm.transaction_verifyingKeys(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst TransitionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_transition_free(ptr >>> 0));\n/**\n*/\nclass Transition {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Transition.prototype);\n        obj.__wbg_ptr = ptr;\n        TransitionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TransitionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transition_free(ptr);\n    }\n    /**\n    * Get the transition ID\n    *\n    * @returns {string} The transition ID\n    * @returns {string}\n    */\n    id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transition_id(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a transition from a string\n    *\n    * @param {string} transition String representation of a transition\n    * @returns {Transition}\n    * @param {string} transition\n    * @returns {Transition}\n    */\n    static fromString(transition) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(transition, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transition_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transition.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a transition from a Uint8Array of left endian bytes.\n    *\n    * @param {Uint8Array} Uint8Array of left endian bytes encoding a Transition.\n    * @returns {Transition}\n    * @param {Uint8Array} bytes\n    * @returns {Transition}\n    */\n    static fromBytesLe(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transition_fromBytesLe(retptr, addHeapObject(bytes));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transition.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the transition as a string. If you want to submit this transition to the Aleo Network\n    * this function will create the string that should be submitted in the `POST` data.\n    *\n    * @returns {string} String representation of the transition\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transition_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the transition as a Uint8Array of left endian bytes.\n    *\n    * @returns {Uint8Array} Uint8Array representation of the transition\n    * @returns {Uint8Array}\n    */\n    toBytesLe() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transition_toBytesLe(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the program ID of the transition.\n    * @returns {string}\n    */\n    programId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transition_programId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the function name of the transition.\n    * @returns {string}\n    */\n    functionName() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transition_functionName(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns true if the transition contains the given commitment.\n    *\n    * @param {boolean} True if the transition contains the given commitment.\n    * @param {Field} commitment\n    * @returns {boolean}\n    */\n    containsCommitment(commitment) {\n        _assertClass(commitment, Field);\n        const ret = wasm.transition_containsCommitment(this.__wbg_ptr, commitment.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Check if the transition contains a serial number.\n    *\n    * @param {Field} serial_number The serial number to check for\n    *\n    * @returns {bool} True if the transition contains a serial number, false otherwise\n    * @param {Field} serial_number\n    * @returns {boolean}\n    */\n    containsSerialNumber(serial_number) {\n        _assertClass(serial_number, Field);\n        const ret = wasm.transition_containsSerialNumber(this.__wbg_ptr, serial_number.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Find a record in the transition by the record's commitment.\n    * @param {Field} commitment\n    * @returns {RecordCiphertext | undefined}\n    */\n    findRecord(commitment) {\n        _assertClass(commitment, Field);\n        const ret = wasm.transition_findRecord(this.__wbg_ptr, commitment.__wbg_ptr);\n        return ret === 0 ? undefined : RecordCiphertext.__wrap(ret);\n    }\n    /**\n    * Get the record plaintext present in a transition owned by a specific view key.\n    *\n    * @param {ViewKey} view_key The view key of the record owner.\n    *\n    * @returns {Array<RecordPlaintext>} Array of record plaintext objects\n    * @param {ViewKey} view_key\n    * @returns {Array<any>}\n    */\n    ownedRecords(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.transition_ownedRecords(this.__wbg_ptr, view_key.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get the records present in a transition and their commitments.\n    *\n    * @returns {Array<{commitment: Field, record: RecordCiphertext}>} Array of record ciphertext objects\n    * @returns {Array<any>}\n    */\n    records() {\n        const ret = wasm.transition_records(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get the inputs of the transition.\n    *\n    * @param {bool} convert_to_js If true the inputs will be converted to JS objects, if false\n    * the inputs will be in wasm format.\n    *\n    * @returns {Array} Array of inputs\n    * @param {boolean} convert_to_js\n    * @returns {Array<any>}\n    */\n    inputs(convert_to_js) {\n        const ret = wasm.transition_inputs(this.__wbg_ptr, convert_to_js);\n        return takeObject(ret);\n    }\n    /**\n    * Get the outputs of the transition.\n    *\n    * @param {bool} convert_to_js If true the outputs will be converted to JS objects, if false\n    * the outputs will be in wasm format.\n    *\n    * @returns {Array} Array of outputs\n    * @param {boolean} convert_to_js\n    * @returns {Array<any>}\n    */\n    outputs(convert_to_js) {\n        const ret = wasm.transition_outputs(this.__wbg_ptr, convert_to_js);\n        return takeObject(ret);\n    }\n    /**\n    * Get the transition public key of the transition.\n    * @returns {Group}\n    */\n    tpk() {\n        const ret = wasm.computekey_pk_sig(this.__wbg_ptr);\n        return Group.__wrap(ret);\n    }\n    /**\n    * Get the transition commitment of the transition.\n    * @returns {Field}\n    */\n    tcm() {\n        const ret = wasm.transition_tcm(this.__wbg_ptr);\n        return Field.__wrap(ret);\n    }\n    /**\n    * Get the transition signer commitment of the transition.\n    * @returns {Field}\n    */\n    scm() {\n        const ret = wasm.transition_scm(this.__wbg_ptr);\n        return Field.__wrap(ret);\n    }\n}\n\nconst VerifyingKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_verifyingkey_free(ptr >>> 0));\n/**\n* Verifying key for a function within an Aleo program\n*/\nclass VerifyingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerifyingKey.prototype);\n        obj.__wbg_ptr = ptr;\n        VerifyingKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VerifyingKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verifyingkey_free(ptr);\n    }\n    /**\n    * Returns the verifying key for the bond_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_public function\n    * @returns {VerifyingKey}\n    */\n    static bondPublicVerifier() {\n        const ret = wasm.verifyingkey_bondPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the bond_validator function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_validator function\n    * @returns {VerifyingKey}\n    */\n    static bondValidatorVerifier() {\n        const ret = wasm.verifyingkey_bondValidatorVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the claim_delegator function\n    *\n    * @returns {VerifyingKey} Verifying key for the claim_unbond_public function\n    * @returns {VerifyingKey}\n    */\n    static claimUnbondPublicVerifier() {\n        const ret = wasm.verifyingkey_claimUnbondPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the fee_private function\n    *\n    * @returns {VerifyingKey} Verifying key for the fee_private function\n    * @returns {VerifyingKey}\n    */\n    static feePrivateVerifier() {\n        const ret = wasm.verifyingkey_feePrivateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the fee_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the fee_public function\n    * @returns {VerifyingKey}\n    */\n    static feePublicVerifier() {\n        const ret = wasm.verifyingkey_feePublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the inclusion function\n    *\n    * @returns {VerifyingKey} Verifying key for the inclusion function\n    * @returns {VerifyingKey}\n    */\n    static inclusionVerifier() {\n        const ret = wasm.verifyingkey_inclusionVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the join function\n    *\n    * @returns {VerifyingKey} Verifying key for the join function\n    * @returns {VerifyingKey}\n    */\n    static joinVerifier() {\n        const ret = wasm.verifyingkey_joinVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the set_validator_state function\n    *\n    * @returns {VerifyingKey} Verifying key for the set_validator_state function\n    * @returns {VerifyingKey}\n    */\n    static setValidatorStateVerifier() {\n        const ret = wasm.verifyingkey_setValidatorStateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the split function\n    *\n    * @returns {VerifyingKey} Verifying key for the split function\n    * @returns {VerifyingKey}\n    */\n    static splitVerifier() {\n        const ret = wasm.verifyingkey_splitVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_private function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_private function\n    * @returns {VerifyingKey}\n    */\n    static transferPrivateVerifier() {\n        const ret = wasm.verifyingkey_transferPrivateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_private_to_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_private_to_public function\n    * @returns {VerifyingKey}\n    */\n    static transferPrivateToPublicVerifier() {\n        const ret = wasm.verifyingkey_transferPrivateToPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_public function\n    * @returns {VerifyingKey}\n    */\n    static transferPublicVerifier() {\n        const ret = wasm.verifyingkey_transferPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_public_as_signer function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_public_as_signer function\n    * @returns {VerifyingKey}\n    */\n    static transferPublicAsSignerVerifier() {\n        const ret = wasm.verifyingkey_transferPublicAsSignerVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_public_to_private function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_public_to_private function\n    * @returns {VerifyingKey}\n    */\n    static transferPublicToPrivateVerifier() {\n        const ret = wasm.verifyingkey_transferPublicToPrivateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the unbond_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the unbond_public function\n    * @returns {VerifyingKey}\n    */\n    static unbondPublicVerifier() {\n        const ret = wasm.verifyingkey_unbondPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the bond_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_public function\n    * @returns {boolean}\n    */\n    isBondPublicVerifier() {\n        const ret = wasm.verifyingkey_isBondPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Returns the verifying key for the bond_validator function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_validator function\n    * @returns {boolean}\n    */\n    isBondValidatorVerifier() {\n        const ret = wasm.verifyingkey_isBondValidatorVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the claim_delegator function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isClaimUnbondPublicVerifier() {\n        const ret = wasm.verifyingkey_isClaimUnbondPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the fee_private function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isFeePrivateVerifier() {\n        const ret = wasm.verifyingkey_isFeePrivateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the fee_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isFeePublicVerifier() {\n        const ret = wasm.verifyingkey_isFeePublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the inclusion function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isInclusionVerifier() {\n        const ret = wasm.verifyingkey_isInclusionVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the join function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isJoinVerifier() {\n        const ret = wasm.verifyingkey_isJoinVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the set_validator_state function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isSetValidatorStateVerifier() {\n        const ret = wasm.verifyingkey_isSetValidatorStateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the split function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isSplitVerifier() {\n        const ret = wasm.verifyingkey_isSplitVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_private function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPrivateVerifier() {\n        const ret = wasm.verifyingkey_isTransferPrivateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_private_to_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPrivateToPublicVerifier() {\n        const ret = wasm.verifyingkey_isTransferPrivateToPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPublicVerifier() {\n        const ret = wasm.verifyingkey_isTransferPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_public_as_signer function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPublicAsSignerVerifier() {\n        const ret = wasm.verifyingkey_isTransferPublicAsSignerVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_public_to_private function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPublicToPrivateVerifier() {\n        const ret = wasm.verifyingkey_isTransferPublicToPrivateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the unbond_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isUnbondPublicVerifier() {\n        const ret = wasm.verifyingkey_isUnbondPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get the checksum of the verifying key\n    *\n    * @returns {string} Checksum of the verifying key\n    * @returns {string}\n    */\n    checksum() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_checksum(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a copy of the verifying key\n    *\n    * @returns {VerifyingKey} A copy of the verifying key\n    * @returns {VerifyingKey}\n    */\n    copy() {\n        const ret = wasm.verifyingkey_copy(this.__wbg_ptr);\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Construct a new verifying key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte representation of a verifying key\n    * @returns {VerifyingKey}\n    * @param {Uint8Array} bytes\n    * @returns {VerifyingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a verifying key from string\n    *\n    * @param {String} string String representation of a verifying key\n    * @returns {VerifyingKey}\n    * @param {string} string\n    * @returns {VerifyingKey}\n    */\n    static fromString(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a byte array from a verifying key\n    *\n    * @returns {Uint8Array} Byte representation of a verifying key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the verifying key\n    *\n    * @returns {String} String representation of the verifying key\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst ViewKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_viewkey_free(ptr >>> 0));\n/**\n*/\nclass ViewKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ViewKey.prototype);\n        obj.__wbg_ptr = ptr;\n        ViewKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ViewKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_viewkey_free(ptr);\n    }\n    /**\n    * Create a new view key from a private key\n    *\n    * @param {PrivateKey} private_key Private key\n    * @returns {ViewKey} View key\n    * @param {PrivateKey} private_key\n    * @returns {ViewKey}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.privatekey_to_view_key(private_key.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Create a new view key from a string representation of a view key\n    *\n    * @param {string} view_key String representation of a view key\n    * @returns {ViewKey} View key\n    * @param {string} view_key\n    * @returns {ViewKey}\n    */\n    static from_string(view_key) {\n        const ptr0 = passStringToWasm0(view_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.viewkey_from_string(ptr0, len0);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a view key\n    *\n    * @returns {string} String representation of a view key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.viewkey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the address corresponding to a view key\n    *\n    * @returns {Address} Address\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.address_from_view_key(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Get the underlying scalar of a view key.\n    * @returns {Scalar}\n    */\n    to_scalar() {\n        const ret = wasm.graphkey_sk_tag(this.__wbg_ptr);\n        return Scalar.__wrap(ret);\n    }\n    /**\n    * Decrypt a record ciphertext with a view key\n    *\n    * @param {string} ciphertext String representation of a record ciphertext\n    * @returns {string} String representation of a record plaintext\n    * @param {string} ciphertext\n    * @returns {string}\n    */\n    decrypt(ciphertext) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.viewkey_decrypt(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_new_71801a555ad9f2aa = function() { return handleError(function () {\n        const ret = new XMLHttpRequest();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_overrideMimeType_ee9c51919ceb418b = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).overrideMimeType(getStringFromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_open_c9eb0cf2c9d95679 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4, arg5) {\n        getObject(arg0).open(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4), arg5 !== 0);\n    }, arguments) };\n    imports.wbg.__wbg_send_80d29985093c1ec5 = function() { return handleError(function (arg0) {\n        getObject(arg0).send();\n    }, arguments) };\n    imports.wbg.__wbg_response_7c2e2759084f7279 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).response;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_status_d485fb5a478426fb = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_new_72fb9a18b5ae2624 = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_1f9b04f170055d33 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_new_ab6fd82b10560829 = function() { return handleError(function () {\n        const ret = new Headers();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_0d76b0581eca6298 = function() { return handleError(function () {\n        const ret = new AbortController();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_signal_a61f78a3478fd9bc = function(arg0) {\n        const ret = getObject(arg0).signal;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_append_7bfcb4937d1d5e29 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_Response_849eb93e75734b6e = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Response;\n        } catch (_) {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_status_61a01141acd3cf74 = function(arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    };\n    imports.wbg.__wbg_url_5f6dc4009ac5f99d = function(arg0, arg1) {\n        const ret = getObject(arg1).url;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_headers_9620bfada380764a = function(arg0) {\n        const ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_iterator_2cee6dadfd956dfa = function() {\n        const ret = Symbol.iterator;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_get_e3c254076557e348 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(getObject(arg0), getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbg_call_27c0f87801dedf93 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_next_40fc327bfc8770e6 = function(arg0) {\n        const ret = getObject(arg0).next;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_next_196c84450b364254 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).next();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_done_298b57d23c0fc80c = function(arg0) {\n        const ret = getObject(arg0).done;\n        return ret;\n    };\n    imports.wbg.__wbg_value_d93c65011f51a456 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_abort_2aa7521d5690750e = function(arg0) {\n        getObject(arg0).abort();\n    };\n    imports.wbg.__wbg_stringify_8887fe74e1c50d81 = function() { return handleError(function (arg0) {\n        const ret = JSON.stringify(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_call_b3ca7c6051f9bec1 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_executionresponse_new = function(arg0) {\n        const ret = ExecutionResponse.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_log_0373a28c0a891b83 = function(arg0, arg1) {\n        console.log(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_bigint_from_u64 = function(arg0) {\n        const ret = BigInt.asUintN(64, arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_transaction_new = function(arg0) {\n        const ret = Transaction.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_66ae46612e7f0234 = function(arg0) {\n        const ret = new Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_d4638f722068f043 = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbg_keypair_new = function(arg0) {\n        const ret = KeyPair.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_module = function() {\n        const ret = __wbg_init.__wbindgen_wasm_module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_spawnWorker_bf2b4274ab1ad344 = function(arg0, arg1, arg2, arg3) {\n        const ret = spawnWorker(getObject(arg0), getObject(arg1), getObject(arg2), arg3 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_new_16b304a2cfa7ff4a = function() {\n        const ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_push_a5b05aedc7234f9f = function(arg0, arg1) {\n        const ret = getObject(arg0).push(getObject(arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_arrayBuffer_29931d52c7206b02 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).arrayBuffer();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_63b92bc8671ed464 = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_c20a40f15020d68a = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_plaintext_new = function(arg0) {\n        const ret = Plaintext.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_field_new = function(arg0) {\n        const ret = Field.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_ciphertext_new = function(arg0) {\n        const ret = Ciphertext.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_bigint_from_i64 = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_bigint_from_i128 = function(arg0, arg1) {\n        const ret = arg0 << BigInt(64) | BigInt.asUintN(64, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_bigint_from_u128 = function(arg0, arg1) {\n        const ret = BigInt.asUintN(64, arg0) << BigInt(64) | BigInt.asUintN(64, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_recordciphertext_new = function(arg0) {\n        const ret = RecordCiphertext.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_buffer_12d079cc21e14bdb = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_recordplaintext_new = function(arg0) {\n        const ret = RecordPlaintext.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_group_new = function(arg0) {\n        const ret = Group.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_verifyingkey_new = function(arg0) {\n        const ret = VerifyingKey.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_address_new = function(arg0) {\n        const ret = Address.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_signature_new = function(arg0) {\n        const ret = Signature.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_transition_new = function(arg0) {\n        const ret = Transition.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_81740750da40724f = function(arg0, arg1) {\n        try {\n            var state0 = {a: arg0, b: arg1};\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_419(a, state0.b, arg0, arg1);\n                } finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return addHeapObject(ret);\n        } finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbg_new_abda76e883ba8a5f = function() {\n        const ret = new Error();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stack_658279fe44541cf6 = function(arg0, arg1) {\n        const ret = getObject(arg1).stack;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_error_f851667af71bcfc6 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_randomFillSync_5c9c955aa56b6049 = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).randomFillSync(takeObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_subarray_a1f73cd4b5b42fe1 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_3aa56aa6edec874c = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_set_a47bac70306a19a7 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_crypto_1d1f22824a6a080c = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_process_4a72847cc503995b = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_f686565e586dd935 = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_104a2ff8d6ea03a2 = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbg_require_cca90b1a94a0255b = function() { return handleError(function () {\n        const ret = module.require;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_msCrypto_eb05e62b530a1508 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_e9b4878cebadb3d3 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_cd7af8117672b8b8 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_get_bd8e338fbd5f5cc8 = function(arg0, arg1) {\n        const ret = getObject(arg0)[arg1 >>> 0];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_self_ce0dbfc45cf2f5be = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_c6fb939a7f436783 = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_d1e6af4856ba331b = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_207b558942527489 = function() { return handleError(function () {\n        const ret = global.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_e258087cd0daa0ea = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_has_0af94d20077affa2 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.has(getObject(arg0), getObject(arg1));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_fetch_bc7c8e27076a5c84 = function(arg0) {\n        const ret = fetch(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_fetch_921fad6ef9e883dd = function(arg0, arg1) {\n        const ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_rethrow = function(arg0) {\n        throw takeObject(arg0);\n    };\n    imports.wbg.__wbg_then_a73caa9a87991566 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_0c86a60e8fcfe9f6 = function(arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_queueMicrotask_481971b0d87f3dd4 = function(arg0) {\n        queueMicrotask(getObject(arg0));\n    };\n    imports.wbg.__wbg_queueMicrotask_3cbae2ec6b6cd3d6 = function(arg0) {\n        const ret = getObject(arg0).queueMicrotask;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_resolve_b0083a7967828ec8 = function(arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_5d743fc9058ba01a = function() {\n        const ret = Atomics.waitAsync;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_8cccba86b0f574cb = function(arg0) {\n        const ret = new Int32Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_46d5c36955b71a79 = function(arg0, arg1, arg2) {\n        const ret = Atomics.waitAsync(getObject(arg0), arg1, arg2);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_async_19c0400d97cc72fe = function(arg0) {\n        const ret = getObject(arg0).async;\n        return ret;\n    };\n    imports.wbg.__wbg_value_571d60108110e917 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_link_fc1eedd35dc7e0a6 = function(arg0) {\n        const ret = \"data:application/javascript,\" + encodeURIComponent(`onmessage = function (ev) {\n            let [ia, index, value] = ev.data;\n            ia = new Int32Array(ia.buffer);\n            let result = Atomics.wait(ia, index, value);\n            postMessage(result);\n        };\n        `);\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_new_d1187ae36d662ef9 = function() { return handleError(function (arg0, arg1) {\n        const ret = new Worker(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setonmessage_503809e5bb51bd33 = function(arg0, arg1) {\n        getObject(arg0).onmessage = getObject(arg1);\n    };\n    imports.wbg.__wbg_of_6a70eed8d41f469c = function(arg0, arg1, arg2) {\n        const ret = Array.of(getObject(arg0), getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_postMessage_7380d10e8b8269df = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).postMessage(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_data_3ce7c145ca4fbcdc = function(arg0) {\n        const ret = getObject(arg0).data;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithstrandinit_3fd6fba4083ff2d0 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_responseText_c67ed2d48db10769 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg1).responseText;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    }, arguments) };\n    imports.wbg.__wbindgen_closure_wrapper6326 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 624, __wbg_adapter_40);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper6352 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 624, __wbg_adapter_40);\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, maybe_memory) {\n    imports.wbg.memory = maybe_memory || new WebAssembly.Memory({initial:25,maximum:65536,shared:true});\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedBigInt64Memory0 = null;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n\n    const imports = __wbg_get_imports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nvar exports = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Address: Address,\n    Ciphertext: Ciphertext,\n    ComputeKey: ComputeKey,\n    Execution: Execution,\n    ExecutionResponse: ExecutionResponse,\n    Field: Field,\n    GraphKey: GraphKey,\n    Group: Group,\n    KeyPair: KeyPair,\n    Metadata: Metadata,\n    OfflineQuery: OfflineQuery,\n    Plaintext: Plaintext,\n    PrivateKey: PrivateKey,\n    PrivateKeyCiphertext: PrivateKeyCiphertext,\n    Program: Program,\n    ProgramManager: ProgramManager,\n    ProvingKey: ProvingKey,\n    RecordCiphertext: RecordCiphertext,\n    RecordPlaintext: RecordPlaintext,\n    Scalar: Scalar,\n    Signature: Signature,\n    Transaction: Transaction,\n    Transition: Transition,\n    VerifyingKey: VerifyingKey,\n    ViewKey: ViewKey,\n    default: __wbg_init,\n    initSync: initSync,\n    initThreadPool: initThreadPool,\n    runRayonThread: runRayonThread,\n    verifyFunctionExecution: verifyFunctionExecution\n});\n\nconst wasm_path = \"aleo_wasm.wasm\";\n\n            \n            var Cargo = async (opt = {}) => {\n                let {importHook, serverPath, initializeHook} = opt;\n\n                let final_path = wasm_path;\n\n                if (serverPath != null) {\n                    final_path = serverPath + /[^\\/\\\\]*$/.exec(final_path)[0];\n                }\n\n                if (importHook != null) {\n                    final_path = importHook(final_path);\n                }\n\n                if (initializeHook != null) {\n                    await initializeHook(__wbg_init, final_path);\n\n                } else {\n                    await __wbg_init(final_path);\n                }\n\n                return exports;\n            };\n\nexport { Cargo as default };\n//# sourceMappingURL=aleo_wasm.js.map\n"],"names":["logAndThrow","message","console","error","Error","parseJSON","json","JSON","parse","key","value","context","Number","isInteger","BigInt","source","async","get","url","options","response","fetch","ok","status","post","method","AleoNetworkClient","host","headers","account","constructor","this","setAccount","getAccount","setHost","fetchData","fetchRaw","text","findUnspentRecords","startHeight","endHeight","privateKey","amounts","maxMicrocredits","nonces","records","Array","start","end","resolvedPrivateKey","latestHeight","failures","totalRecordValue","_privateKey","PrivateKey","from_string","viewKey","to_view_key","blockHeight","getLatestHeight","blocks","getBlockRange","i","length","transactions","j","confirmedTransaction","type","transaction","execution","transitions","k","transition","program","outputs","l","output","record","RecordCiphertext","fromString","isOwner","recordPlaintext","decrypt","nonce","includes","serialNumber","serialNumberString","getTransitionId","push","microcredits","amounts_found","warn","toString","getBlock","height","getDeploymentTransactionIDForProgram","Program","replace","getDeploymentTransactionForProgram","transaction_id","getTransaction","getDeploymentTransactioObjectnForProgram","getTransactionObject","getLatestBlock","getLatestCommittee","getProgram","programId","getProgramObject","inputProgram","getProgramImports","imports","importList","getImports","import_id","hasOwnProperty","programSource","nestedImports","getProgramImportNames","getProgramMappingNames","getProgramMappingValue","mappingName","keyString","Plaintext","getProgramMappingPlaintext","getStateRoot","transactionId","Transaction","getTransactions","getTransactionsInMempool","inputOrOutputID","submitTransaction","transaction_string","body","Object","assign","submitSolution","solution","KEY_STORE","Metadata","baseUrl","convert","metadata","verifyingKey","VerifyingKey","name","locator","prover","verifier","CREDITS_PROGRAM_KEYS","bond_public","bond_validator","claim_unbond_public","fee_private","fee_public","inclusion","join","set_validator_state","split","transfer_private","transfer_private_to_public","transfer_public","transfer_public_as_signer","transfer_public_to_private","unbond_public","getKey","PRIVATE_TRANSFER_TYPES","Set","VALID_TRANSFER_TYPES","PRIVATE_TRANSFER","PRIVATE_TO_PUBLIC_TRANSFER","PUBLIC_TRANSFER","PUBLIC_TRANSFER_AS_SIGNER","PUBLIC_TO_PRIVATE_TRANSFER","AleoKeyProviderParams","proverUri","verifierUri","cacheKey","params","AleoKeyProvider","cache","cacheOption","keyUris","fetchBytes","data","arrayBuffer","Uint8Array","Map","useCache","clearCache","clear","cacheKeys","keyId","keys","provingKey","set","toBytes","containsKeys","has","deleteKeys","delete","getKeys","debug","provingKeyBytes","verifyingKeyBytes","ProvingKey","fromBytes","functionKeys","proverUrl","verifierUrl","fetchCreditsKeys","fetchRemoteKeys","getVerifyingKey","fetchProvingKey","keyPair","verifying_key","proving_key","bondPublicKeys","bondValidatorKeys","claimUnbondPublicKeys","transferKeys","visibility","joinKeys","splitKeys","feePrivateKeys","feePublicKeys","e","inner","unBondPublicKeys","ProgramManager","keyProvider","networkClient","recordProvider","setKeyProvider","setRecordProvider","deploy","fee","privateFee","recordSearchParams","feeRecord","programObject","id","log","feeKeys","deploymentPrivateKey","getCreditsRecord","undefined","feeProvingKey","feeVerifyingKey","tx","ProgramManager$1","buildDeploymentTransaction","buildExecutionTransaction","programName","functionName","inputs","keySearchParams","offlineQuery","executionPrivateKey","execute","run","function_name","proveExecution","executeFunctionOffline","recordOne","recordTwo","joinProvingKey","joinVerifyingKey","RecordPlaintext","buildJoinTransaction","splitAmount","amountRecord","splitProvingKey","splitVerifyingKey","buildSplitTransaction","synthesizeKeys","function_id","synthesizeKeyPair","buildTransferTransaction","amount","recipient","transferType","validateTransferType","transferProvingKey","transferVerifyingKey","requiresAmountRecord","buildTransferPublicTransaction","buildTransferPublicAsSignerTransaction","transfer","buildBondPublicTransaction","staker_address","validator_address","withdrawal_address","scaledAmount","Math","trunc","creditsProgram","additionalOptions","executeOptions","bondPublic","buildBondValidatorTransaction","commission","adjustedCommission","bondValidator","buildUnbondPublicTransaction","unbondPublic","buildClaimUnbondPublicTransaction","claimUnbondPublic","buildSetValidatorStateTransaction","validator_state","setValidatorState","verifyExecution","executionResponse","getExecution","getFunctionId","verifyFunctionExecution","createProgramFromSource","getCreditsProgram","verifyProgram","findCreditsRecord","spawnWorker","module","memory","address","Promise","resolve","worker","Worker","addEventListener","event","setTimeout","unref","capture","once","postMessage","wasm","heap","fill","getObject","idx","heap_next","dropObject","takeObject","ret","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachedUint8Memory0","getUint8Memory0","buffer","getStringFromWasm0","ptr","len","slice","addHeapObject","obj","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encode","encodeString","arg","view","buf","read","written","passStringToWasm0","malloc","realloc","subarray","mem","offset","code","charCodeAt","isLikeNone","x","cachedInt32Memory0","getInt32Memory0","Int32Array","debugString","val","description","isArray","builtInMatches","exec","call","className","stringify","_","stack","CLOSURE_DTORS","FinalizationRegistry","register","unregister","state","__wbindgen_export_3","dtor","a","b","makeMutClosure","arg0","arg1","f","cnt","real","args","original","__wbg_adapter_40","arg2","_dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h1503081f6025e61c","_assertClass","instance","klass","passArray8ToWasm0","verifyFunctionExecution$1","retptr","__wbindgen_add_to_stack_pointer","Execution$1","VerifyingKey$1","Program$1","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","__wbg_ptr","r0","r1","cachedBigInt64Memory0","getBigInt64Memory0","BigInt64Array","getArrayU8FromWasm0","runRayonThread","receiver","initThreadPool$1","num_threads","initThreadPool","handleError","apply","__wbindgen_exn_store","__wbg_adapter_419","arg3","wasm_bindgen__convert__closures__invoke2_mut__hc5c49be524f0cde8","AddressFinalization","__wbg_address_free","Address","__wrap","create","prototype","__destroy_into_raw","free","from_private_key","private_key","PrivateKey$1","address_from_private_key","from_view_key","view_key","ViewKey$1","address_from_view_key","from_compute_key","compute_key","ComputeKey","address_from_compute_key","address_from_string","to_string","deferred1_0","deferred1_1","address_to_string","__wbindgen_free","verify","signature","Signature$1","address_verify","CiphertextFinalization","__wbg_ciphertext_free","Ciphertext","Group$1","ptr1","ciphertext_decrypt","Plaintext$1","decryptSymmetric","transition_view_key","Field$1","ciphertext_decryptSymmetric","fromBytesLe","bytes","ciphertext_fromBytesLe","ciphertext","ciphertext_fromString","ciphertext_toBytes","ciphertext_toString","ComputeKeyFinalization","__wbg_computekey_free","computekey_from_private_key","Address$1","sk_prf","computekey_sk_prf","Scalar$1","pk_sig","computekey_pk_sig","pr_sig","computekey_pr_sig","ExecutionFinalization","__wbg_execution_free","Execution","execution_toString","execution_fromString","globalStateRoot","execution_globalStateRoot","proof","execution_proof","execution_transitions","ExecutionResponseFinalization","__wbg_executionresponse_free","ExecutionResponse","getOutputs","executionresponse_getOutputs","executionresponse_getExecution","executionresponse_getKeys","KeyPair","getProvingKey","executionresponse_getProvingKey","ProvingKey$1","executionresponse_getVerifyingKey","executionresponse_getFunctionId","executionresponse_getProgram","FieldFinalization","__wbg_field_free","Field","field","field_fromString","toPlaintext","field_toPlaintext","field_toString","random","field_random","add","other","field_add","subtract","field_subtract","multiply","field_multiply","divide","field_divide","pow","field_pow","inverse","field_inverse","zero","field_zero","one","field_one","double","field_double","equals","field_equals","GraphKeyFinalization","__wbg_graphkey_free","GraphKey","graphkey_from_view_key","graph_key","graphkey_from_string","graphkey_to_string","sk_tag","graphkey_sk_tag","GroupFinalization","__wbg_group_free","Group","group","group_fromString","group_toString","toXCoordinate","group_toXCoordinate","group_toPlaintext","group_random","group_add","group_subtract","scalarMultiply","scalar","group_scalarMultiply","group_double","group_inverse","group_equals","group_zero","generator","group_generator","KeyPairFinalization","__wbg_keypair_free","keypair_new","keypair_provingKey","keypair_verifyingKey","MetadataFinalization","__wbg_metadata_free","__wbg_get_metadata_name","__wbg_set_metadata_name","__wbg_get_metadata_locator","__wbg_set_metadata_locator","__wbg_get_metadata_prover","__wbg_set_metadata_prover","__wbg_get_metadata_verifier","__wbg_set_metadata_verifier","__wbg_get_metadata_verifyingKey","__wbg_set_metadata_verifyingKey","metadata_baseUrl","metadata_bond_public","metadata_bond_validator","metadata_claim_unbond_public","metadata_fee_private","metadata_fee_public","metadata_inclusion","metadata_join","metadata_set_validator_state","metadata_split","metadata_transfer_private","metadata_transfer_private_to_public","metadata_transfer_public","metadata_transfer_public_as_signer","metadata_transfer_public_to_private","metadata_unbond_public","OfflineQueryFinalization","__wbg_offlinequery_free","OfflineQuery","block_height","state_root","offlinequery_new","addBlockHeight","offlinequery_addBlockHeight","addStatePath","commitment","state_path","len1","offlinequery_addStatePath","offlinequery_toString","s","offlinequery_fromString","PlaintextFinalization","__wbg_plaintext_free","find","plaintext_find","encrypt","randomizer","plaintext_encrypt","Ciphertext$1","encryptSymmetric","plaintext_encryptSymmetric","plaintext","plaintext_fromString","plaintext_fromBytesLe","toBytesLe","plaintext_toBytesLe","plaintext_toString","plaintextType","plaintext_plaintextType","toObject","plaintext_toObject","PrivateKeyFinalization","__wbg_privatekey_free","privatekey_new","from_seed_unchecked","seed","privatekey_from_seed_unchecked","privatekey_from_string","privatekey_to_string","privatekey_to_view_key","to_address","privatekey_to_address","sign","privatekey_sign","newEncrypted","secret","privatekey_newEncrypted","PrivateKeyCiphertext$1","toCiphertext","privatekey_toCiphertext","fromPrivateKeyCiphertext","privatekey_fromPrivateKeyCiphertext","PrivateKeyCiphertextFinalization","__wbg_privatekeyciphertext_free","PrivateKeyCiphertext","encryptPrivateKey","decryptToPrivateKey","privatekeyciphertext_decryptToPrivateKey","privatekeyciphertext_fromString","ProgramFinalization","__wbg_program_free","program_fromString","program_toString","hasFunction","program_hasFunction","getFunctions","program_getFunctions","getFunctionInputs","program_getFunctionInputs","getMappings","program_getMappings","getRecordMembers","record_name","program_getRecordMembers","getStructMembers","struct_name","program_getStructMembers","program_getCreditsProgram","program_id","program_address","isEqual","program_isEqual","program_getImports","ProgramManagerFinalization","__wbg_programmanager_free","fee_credits","fee_record","fee_proving_key","fee_verifying_key","offline_query","RecordPlaintext$1","ptr2","len2","ptr3","ptr4","ptr5","OfflineQuery$1","programmanager_buildDeploymentTransaction","estimateDeploymentFee","programmanager_estimateDeploymentFee","estimateProgramNameCost","programmanager_estimateProgramNameCost","r2","asUintN","_function","prove_execution","len4","programmanager_executeFunctionOffline","len3","ptr6","ptr7","ptr8","programmanager_buildExecutionTransaction","estimateExecutionFee","programmanager_estimateExecutionFee","estimateFinalizeFee","programmanager_estimateFinalizeFee","record_1","record_2","join_proving_key","join_verifying_key","programmanager_buildJoinTransaction","split_amount","amount_record","split_proving_key","split_verifying_key","programmanager_buildSplitTransaction","amount_credits","transfer_type","transfer_proving_key","transfer_verifying_key","ptr9","programmanager_buildTransferTransaction","programmanager_synthesizeKeyPair","ProvingKeyFinalization","__wbg_provingkey_free","isBondPublicProver","provingkey_isBondPublicProver","isBondValidatorProver","provingkey_isBondValidatorProver","isClaimUnbondPublicProver","provingkey_isClaimUnbondPublicProver","isFeePrivateProver","provingkey_isFeePrivateProver","isFeePublicProver","provingkey_isFeePublicProver","isInclusionProver","provingkey_isInclusionProver","isJoinProver","provingkey_isJoinProver","isSetValidatorStateProver","provingkey_isSetValidatorStateProver","isSplitProver","provingkey_isSplitProver","isTransferPrivateProver","provingkey_isTransferPrivateProver","isTransferPrivateToPublicProver","provingkey_isTransferPrivateToPublicProver","isTransferPublicProver","provingkey_isTransferPublicProver","isTransferPublicAsSignerProver","provingkey_isTransferPublicAsSignerProver","isTransferPublicToPrivateProver","provingkey_isTransferPublicToPrivateProver","isUnbondPublicProver","provingkey_isUnbondPublicProver","checksum","provingkey_checksum","copy","provingkey_copy","provingkey_fromBytes","string","provingkey_fromString","provingkey_toBytes","v1","provingkey_toString","RecordCiphertextFinalization","__wbg_recordciphertext_free","recordciphertext_fromString","recordciphertext_toString","recordciphertext_decrypt","recordciphertext_isOwner","tag","recordciphertext_tag","RecordPlaintextFinalization","__wbg_recordplaintext_free","recordplaintext_commitment","recordplaintext_fromString","getMember","input","recordplaintext_getMember","owner","recordplaintext_owner","toJsObject","recordplaintext_toJsObject","recordplaintext_toString","recordplaintext_microcredits","recordplaintext_nonce","deferred4_0","deferred4_1","recordplaintext_serialNumberString","r3","recordplaintext_tag","ScalarFinalization","__wbg_scalar_free","Scalar","scalar_toString","scalar_toPlaintext","scalar_fromString","scalar_random","scalar_add","scalar_subtract","scalar_multiply","scalar_divide","scalar_double","scalar_pow","scalar_inverse","scalar_one","SignatureFinalization","__wbg_signature_free","Signature","signature_to_address","challenge","signature_response","signature_verify","signature_from_string","signature_to_string","TransactionFinalization","__wbg_transaction_free","transaction_fromString","transaction_fromBytesLe","transaction_toString","transaction_toBytesLe","constainsSerialNumber","serial_number","transaction_constainsSerialNumber","constainsCommitment","transaction_constainsCommitment","findRecord","transaction_findRecord","RecordCiphertext$1","baseFeeAmount","transaction_baseFeeAmount","feeAmount","transaction_feeAmount","priorityFeeAmount","transaction_priorityFeeAmount","isDeploy","transaction_isDeploy","isExecute","transaction_isExecute","isFee","transaction_isFee","deployedProgram","transaction_deployedProgram","transaction_execution","ownedRecords","transaction_ownedRecords","transaction_records","summary","convert_to_js","transaction_summary","transactionType","transaction_transactionType","transaction_transitions","verifyingKeys","transaction_verifyingKeys","TransitionFinalization","__wbg_transition_free","Transition","transition_id","transition_fromString","transition_fromBytesLe","transition_toString","transition_toBytesLe","transition_programId","transition_functionName","containsCommitment","transition_containsCommitment","containsSerialNumber","transition_containsSerialNumber","transition_findRecord","transition_ownedRecords","transition_records","transition_inputs","transition_outputs","tpk","tcm","transition_tcm","scm","transition_scm","VerifyingKeyFinalization","__wbg_verifyingkey_free","bondPublicVerifier","verifyingkey_bondPublicVerifier","bondValidatorVerifier","verifyingkey_bondValidatorVerifier","claimUnbondPublicVerifier","verifyingkey_claimUnbondPublicVerifier","feePrivateVerifier","verifyingkey_feePrivateVerifier","feePublicVerifier","verifyingkey_feePublicVerifier","inclusionVerifier","verifyingkey_inclusionVerifier","joinVerifier","verifyingkey_joinVerifier","setValidatorStateVerifier","verifyingkey_setValidatorStateVerifier","splitVerifier","verifyingkey_splitVerifier","transferPrivateVerifier","verifyingkey_transferPrivateVerifier","transferPrivateToPublicVerifier","verifyingkey_transferPrivateToPublicVerifier","transferPublicVerifier","verifyingkey_transferPublicVerifier","transferPublicAsSignerVerifier","verifyingkey_transferPublicAsSignerVerifier","transferPublicToPrivateVerifier","verifyingkey_transferPublicToPrivateVerifier","unbondPublicVerifier","verifyingkey_unbondPublicVerifier","isBondPublicVerifier","verifyingkey_isBondPublicVerifier","isBondValidatorVerifier","verifyingkey_isBondValidatorVerifier","isClaimUnbondPublicVerifier","verifyingkey_isClaimUnbondPublicVerifier","isFeePrivateVerifier","verifyingkey_isFeePrivateVerifier","isFeePublicVerifier","verifyingkey_isFeePublicVerifier","isInclusionVerifier","verifyingkey_isInclusionVerifier","isJoinVerifier","verifyingkey_isJoinVerifier","isSetValidatorStateVerifier","verifyingkey_isSetValidatorStateVerifier","isSplitVerifier","verifyingkey_isSplitVerifier","isTransferPrivateVerifier","verifyingkey_isTransferPrivateVerifier","isTransferPrivateToPublicVerifier","verifyingkey_isTransferPrivateToPublicVerifier","isTransferPublicVerifier","verifyingkey_isTransferPublicVerifier","isTransferPublicAsSignerVerifier","verifyingkey_isTransferPublicAsSignerVerifier","isTransferPublicToPrivateVerifier","verifyingkey_isTransferPublicToPrivateVerifier","isUnbondPublicVerifier","verifyingkey_isUnbondPublicVerifier","verifyingkey_checksum","verifyingkey_copy","verifyingkey_fromBytes","verifyingkey_fromString","verifyingkey_toBytes","verifyingkey_toString","ViewKeyFinalization","__wbg_viewkey_free","ViewKey","viewkey_from_string","viewkey_to_string","to_scalar","deferred3_0","deferred3_1","viewkey_decrypt","__wbg_load","Response","WebAssembly","instantiateStreaming","instantiate","Instance","__wbg_get_imports","wbg","__wbindgen_object_drop_ref","__wbg_new_71801a555ad9f2aa","XMLHttpRequest","arguments","__wbg_overrideMimeType_ee9c51919ceb418b","overrideMimeType","__wbg_open_c9eb0cf2c9d95679","arg4","arg5","open","__wbg_send_80d29985093c1ec5","send","__wbg_response_7c2e2759084f7279","__wbg_status_d485fb5a478426fb","__wbg_new_72fb9a18b5ae2624","__wbindgen_string_new","__wbg_set_1f9b04f170055d33","Reflect","__wbg_new_ab6fd82b10560829","Headers","__wbindgen_object_clone_ref","__wbg_new_0d76b0581eca6298","AbortController","__wbg_signal_a61f78a3478fd9bc","signal","__wbg_append_7bfcb4937d1d5e29","append","__wbg_instanceof_Response_849eb93e75734b6e","result","__wbg_status_61a01141acd3cf74","__wbg_url_5f6dc4009ac5f99d","__wbg_headers_9620bfada380764a","__wbg_iterator_2cee6dadfd956dfa","Symbol","iterator","__wbg_get_e3c254076557e348","__wbindgen_is_function","__wbg_call_27c0f87801dedf93","__wbindgen_is_object","__wbg_next_40fc327bfc8770e6","next","__wbg_next_196c84450b364254","__wbg_done_298b57d23c0fc80c","done","__wbg_value_d93c65011f51a456","__wbg_abort_2aa7521d5690750e","abort","__wbg_stringify_8887fe74e1c50d81","__wbindgen_string_get","__wbg_call_b3ca7c6051f9bec1","__wbg_executionresponse_new","ExecutionResponse$1","__wbg_log_0373a28c0a891b83","__wbindgen_bigint_from_u64","__wbg_transaction_new","Transaction$1","__wbg_newwithlength_66ae46612e7f0234","__wbg_set_d4638f722068f043","__wbg_keypair_new","__wbindgen_module","__wbg_init","__wbindgen_wasm_module","__wbindgen_memory","__wbg_spawnWorker_bf2b4274ab1ad344","__wbindgen_cb_drop","__wbg_new_16b304a2cfa7ff4a","__wbg_push_a5b05aedc7234f9f","__wbg_arrayBuffer_29931d52c7206b02","__wbg_new_63b92bc8671ed464","__wbg_length_c20a40f15020d68a","__wbg_plaintext_new","__wbg_field_new","__wbg_ciphertext_new","__wbindgen_number_new","__wbindgen_bigint_from_i64","__wbindgen_bigint_from_i128","__wbindgen_bigint_from_u128","__wbg_recordciphertext_new","__wbg_buffer_12d079cc21e14bdb","__wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb","__wbg_recordplaintext_new","__wbg_group_new","__wbg_verifyingkey_new","__wbg_address_new","__wbg_signature_new","__wbg_transition_new","Transition$1","__wbg_new_81740750da40724f","state0","cb0","__wbg_new_abda76e883ba8a5f","__wbg_stack_658279fe44541cf6","__wbg_error_f851667af71bcfc6","deferred0_0","deferred0_1","__wbg_randomFillSync_5c9c955aa56b6049","randomFillSync","__wbg_subarray_a1f73cd4b5b42fe1","__wbg_getRandomValues_3aa56aa6edec874c","getRandomValues","__wbg_set_a47bac70306a19a7","__wbg_crypto_1d1f22824a6a080c","crypto","__wbg_process_4a72847cc503995b","process","__wbg_versions_f686565e586dd935","versions","__wbg_node_104a2ff8d6ea03a2","node","__wbindgen_is_string","__wbg_require_cca90b1a94a0255b","require","__wbg_msCrypto_eb05e62b530a1508","msCrypto","__wbg_newwithlength_e9b4878cebadb3d3","__wbg_length_cd7af8117672b8b8","__wbg_get_bd8e338fbd5f5cc8","__wbg_self_ce0dbfc45cf2f5be","self","__wbg_window_c6fb939a7f436783","window","__wbg_globalThis_d1e6af4856ba331b","globalThis","__wbg_global_207b558942527489","global","__wbindgen_is_undefined","__wbg_newnoargs_e258087cd0daa0ea","Function","__wbg_has_0af94d20077affa2","__wbg_fetch_bc7c8e27076a5c84","__wbg_fetch_921fad6ef9e883dd","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","__wbg_then_a73caa9a87991566","then","__wbg_then_0c86a60e8fcfe9f6","__wbg_queueMicrotask_481971b0d87f3dd4","queueMicrotask","__wbg_queueMicrotask_3cbae2ec6b6cd3d6","__wbg_resolve_b0083a7967828ec8","__wbg_waitAsync_5d743fc9058ba01a","Atomics","waitAsync","__wbg_new_8cccba86b0f574cb","__wbg_waitAsync_46d5c36955b71a79","__wbg_async_19c0400d97cc72fe","__wbg_value_571d60108110e917","__wbindgen_link_fc1eedd35dc7e0a6","encodeURIComponent","__wbg_new_d1187ae36d662ef9","__wbg_setonmessage_503809e5bb51bd33","onmessage","__wbg_of_6a70eed8d41f469c","of","__wbg_postMessage_7380d10e8b8269df","__wbg_data_3ce7c145ca4fbcdc","__wbg_newwithstrandinit_3fd6fba4083ff2d0","Request","__wbg_responseText_c67ed2d48db10769","responseText","__wbindgen_closure_wrapper6326","__wbindgen_closure_wrapper6352","__wbg_init_memory","maybe_memory","Memory","initial","maximum","shared","__wbg_finalize_init","exports","__wbindgen_start","initSync","Module","URL","freeze","__proto__","Metadata$1","default","wasm_path","opt","importHook","serverPath","initializeHook","final_path"],"sourceRoot":""}