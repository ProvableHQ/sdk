export const executeTransaction = '{"type":"execute","id":"at1659war3z5t4wppr9h5rck3kpf5gmzf80xpud2hz8yuv3ds286u8s5lxh7c","execution":{"transitions":[{"id":"au17tn7sj8ywgg02melfh8mtsdrvr63z5k9gexagc478rejyp3w7q9qxfx7z6","program":"puzzle_arcade_coin_v001.aleo","function":"mint","inputs":[{"type":"public","id":"8270810521484911625112554982337338864935357860651826051684964871745393294042field","value":"aleo15sq744cm7dktgs73nn76e9dzj0pecyepe6qpjmeh05kylva4jg8qf9n9ge"},{"type":"public","id":"4575027690961186223652944521623745902600814120833621438807414620127639448668field","value":"1000000u64"}],"outputs":[{"type":"record","id":"6601842756832595700550356294123653730742948877912987042229716808083817596459field","checksum":"5062430203063356807847438506000770884656113117950337142360103911384470732056field","value":"record1qyqsq098e30xzmk3r99pzpmrcmrfh5tncewwzdgyx93yxsnq69fxz9sgqyrxzmt0w4h8ggcqqgqsq8ntqf37luu2nhaeas7qlq7gthug5kcmk2fcf3pm8uf875lz6ccfdywwf8g55p2lssye8ehwxtl8d76gynqaq7ml5s4dguxg3rs5wsyq52hq72"}],"tpk":"1607964622748471919440330478795163782437732099532604541664497619753994045319group","tcm":"847503920995797121862828111592398987072218963085962261207266349613895092180field","scm":"5713435921917019040572885748455116720616001991905041025594018041827076402171field"}],"global_state_root":"sr1uwx36xp95j7p2w7yadnj5ups6n8ktf0uwnvq0yauk2fefa2lsqysj4ydym","proof":"proof1qyqsqqqqqqqqqqqpqqqqqqqqqqqqwl66tmy9nzuz3ykg9xcpngmgfkxs6kf0zd2njt3vzdncge3uc5gqhz5aq92dwnr8ry9lu7fc8l5qqym0md7xkvk5qvltg2cmgc8lesfavxjyynp8m5sdwp9apq75vluvxxhqgnltywh43zp2r2anq5l5jqxenxqzp68crzjkfkllqy3pseguf7e4rtva4dccaacfgphq0x5ukk4lgzpdrhffh56sjjhrn7tfdkq42jwjrqv7pkectpnzc60u4ar0v2205m5hmcl24gcmr6q0we8fjupvs0xag4jt3wq2c26vpd7capspq3jvdylspluz6eufpx5q6gmnddx6uqm5g2f775r6p2uqe5t74s9tyqap7926nemq9s6qllm5waeszwush664wttpkc3r2xmflfy5r3d357nz0490nvmfn2pqacllmqnju9fd0m97jlld5smyvkyfwhtnsz62q7gtlx3ak257pep9jnyk5lugl5k7wt4mx6utxlp3l93vttfrjmc44sju32pfqnsthcnwp264dq8f0es2pz5yul64666kcue24ufeh7nxeyvjpulvta89jz6dkfzmrgnfgfgw65dft6seunhfhskr2gqyxlgc2jamcdsx4wnxggyn2vqlsezxac3rx56h9vw8mjrrpult5mmzacc26lv7zdpe3xg2fg22spgqsj5j66lzf3rkfhkz7ql0qfqhmw3dausfu0y677hpxthawy57ry89hag8yhdt8f8my7y0tlmyejvprgq69ana5eljw94lkksdud6scr0tr940urqftqywy2cym6yc6hff3aqlejz5ghtfdawetdcc84djqekg9400fz6h3l5l746a794dvtp8e6j8zl5z3xdggtrsgjwtg09sggz50h29qhwl56vdxv94j8gjewe8w5ctx2jmw5llnuttet4q0qqpqen24g39k7ln2d6w03zjk9zx566hn0mt3khskp7qk3g5lq5at5gnycuvgll02ak2fy0strcaurpwwplenjst3a25vleqlzdxxcyuyyxe5vl0lckd95dy6rss2sk0f7fw8hzvyefwg583veztqa2d9sg6p6sp8ra44f9rsc39z9zpztn0sqe5hkwtn2e0qdye2jzhchnwlm6svr2phqg3whpt3ej66nfzlj436f3suramv2sykw44gjh7q892qtcvqvqqqqqqqqqqpfcge0yyu6rvmktfslcvcmfm3mk4y3ngw03zxuam6qvclc09w87ufy6lym9wsu09734kx0d5f5tfqqqqucqz5ax7x8ddysek2kmu8cn3w6dqu8xf9tp2g9sew2vst530d705wlvv32pdqtnc8zjvtfmf725qqychc8kasqeft3575qq3v977syaak5j7qwkqux36umjt9xpgceuqalkhfgnnxd3sm4tflld9ef5hjcy9y0u7xy8xfm4hnctzvf23yedmu93ew9pcxrak8ssx40pc45zxqqqq94maf4"},"fee":{"transition":{"id":"au17ruxv9lgyc9r8ry72feq2dvukpyt0qmhp648qtkvxplnex7mmvzqvs7jf0","program":"credits.aleo","function":"fee_public","inputs":[{"type":"public","id":"2857075909811966273248114664812182277685354141121132361741553916429123320689field","value":"1449u64"},{"type":"public","id":"4095481960635608001176558539568862060430570697615096310772303148074416971125field","value":"0u64"},{"type":"public","id":"4331277641684651355445846833955413094644827521582315388405139541197216789244field","value":"1471442956713731556455575787580046168427032545671114373095796924821174474332field"}],"outputs":[{"type":"future","id":"1284488568170329868180693924120309631178056866257455108841198811483973130242field","value":"{\\n  program_id: credits.aleo,\\n  function_name: fee_public,\\n  arguments: [\\n    aleo193cgzzpr5lcwq6rmzq4l2ctg5f4mznead080mclfgrc0e5k0w5pstfdfps,\\n    1449u64\\n  ]\\n}"}],"tpk":"1459551963926237749695253042528222267316827324542606050781185281459449486502group","tcm":"1960482517436921007100929744436748815928399310579329137811605688908348968736field","scm":"1613191919762957281003855895868519342839714495622392528901736670716120128919field"},"global_state_root":"sr1uwx36xp95j7p2w7yadnj5ups6n8ktf0uwnvq0yauk2fefa2lsqysj4ydym","proof":"proof1qyqsqqqqqqqqqqqpqqqqqqqqqqqws834tlcqydg43qy2qzfww25ppxvdzcuqmem54k6yhrd8lc492l6z50dl6a6s66pp7kscn8cazkvqq9yr9jymtyk9ucejv04myqhmczwy6feg4hyelzhqyehzpajvjmuvq7cn8v85shmy3mehmze4e9s6jqqhaxawal2cwt9talqkkkvp9w3dg80m8ddsq2w36z76jqas58j8ve6s4ghw3jxgxw77yjg3agft4cq8npaxa5pkkaurn9f4zdeswxhzxcr52qmusdv0p5jyht40e7ru3ljetuq2tdcv4dsp7gja0hm05k5pze5f75qhw26p3t0vmpcw8h6637qcxsfenenzjryunet5aprx8rtckdjapvt68amlwfskmtu9rzfqppfr0l08v2wqv5g23tz4rw4l64z85daym6mccws9qy8yf9tav24p3x02sn3dlcj83rgft0hnfs3fqr3kq7y4lecdfeqqfawq3xph3w3t3c8ghzskgrd5x98wj0dw4m55quj04s3a88tq5q2zykfws90xeq0xw3k0evz22qqaa706e9umam999fuqeks6zwstug5qqslh6j6hhmxzjypjxlv2wh5k60s9mxujnvqgx9hja9quft93x8qn93ju8008elj5rgdnrhefyrw5ytc2u3v4unrm2qphnn86vyq4wjjgvvq0ggcp0hss9msjs6fd9r2hq2gs0yy04fzse37cm8d470vv0gyhl5guvcr4z5lhjsm709twrmm3r7gw3zj88hyl4eqxzc8rllpcp2dymr92xz4y8yzjzwzdfu8cexmr4nvfs7ktupt2el92ht5w0a0als4da54ypexuvxz6egcvd0jafx9059khmml47lnq9qmjas9ya3m55eqndcgsmwa38kku806t97dx4hffeexg26eukn3ly7w90tff8za7kenpg7gr4ht2txppsa0ee9ceca3y6c9ze64gk56ry4gct70rkq57dyt9zgxa2urlz9tl4mzftaav0dsszqyn6xkymvqjvpzz6e6u8yt8tr89xrhnqlc0skvvyt34dvr9g2laav7d09szn0u9mzwf5f3mgul5zk5npdkj8rr35png2ju0lsz2jxuc07w9yawwnvr0hr27l8kmwzee6rqqdmuc5wam8xcmlw4gr8qjd753932vh4dcemh97v2lr63kjm48gmsqqvqqqqqqqqqqqy55a0dnshhzavcyuf5qpjd9v3wg32ygk6cd5vttk3pcg0capxcg725h3hmp6wl3nl8fma45aeu0qqqvldz4rwfpjvfp9g7wyzuwa6kvnsh5qptzht87q2ypmrzu0wa5wvxwasqvag00laxjnfwmnehykrcpqysuspnsh2t5qencjpqd0kyfvrvmw2z6unam0cvrrr0kzxcyvlypr8lqlt8des67rec0v4w2sur5gajd0n003qupz8sgqla6juv8rs0jlmsrhprypn2dwydp37wty8ycsqqq6rp8sd"}}';
export const deployTransaction = '{"type":"deploy","id":"at1v2n8krgmlmax4n0695s997uul6nd2f5l2shvmemukq067kacrg8qzzf5kt","owner":{"address":"aleo1mgjcqhnar38zvschjwxr830pwk57ywnce8rp7smf8c3yp2xexvgq40d4fx","signature":"sign1kxwcg0kdxeduag2wwaxzqv5s3kavm0sry88h4wlxaa9g52f0ggqj0gk7uwxkjpjyawkknfp97sjfa8kgzdjwh6ns3ju7t5w8xzc9wqa6xq3s6sjztquzwulp903h8ez9wgystuw4ex0fp7dhjahh6l7vzqp5t5sent5yawr9056h0su4gperdp9nljk0vhsq43jsu7rh2a3qc4vwp3r"},"deployment":{"edition":0,"program":"import credits.aleo;\\n\\nprogram token_registry.aleo;\\n\\nrecord Token:\\n    owner as address.private;\\n    amount as u128.private;\\n    token_id as field.private;\\n    external_authorization_required as boolean.private;\\n    authorized_until as u32.private;\\n\\nstruct TokenMetadata:\\n    token_id as field;\\n    name as u128;\\n    symbol as u128;\\n    decimals as u8;\\n    supply as u128;\\n    max_supply as u128;\\n    admin as address;\\n    external_authorization_required as boolean;\\n    external_authorization_party as address;\\n\\nstruct TokenOwner:\\n    account as address;\\n    token_id as field;\\n\\nstruct Balance:\\n    token_id as field;\\n    account as address;\\n    balance as u128;\\n    authorized_until as u32;\\n\\nstruct Allowance:\\n    account as address;\\n    spender as address;\\n    token_id as field;\\n\\nmapping registered_tokens:\\n    key as field.public;\\n    value as TokenMetadata.public;\\n\\nmapping balances:\\n    key as field.public;\\n    value as Balance.public;\\n\\nmapping authorized_balances:\\n    key as field.public;\\n    value as Balance.public;\\n\\nmapping allowances:\\n    key as field.public;\\n    value as u128.public;\\n\\nmapping roles:\\n    key as field.public;\\n    value as u8.public;\\n\\nfunction transfer_public:\\n    input r0 as field.public;\\n    input r1 as address.public;\\n    input r2 as u128.public;\\n    cast self.caller r0 into r3 as TokenOwner;\\n    hash.bhp256 r3 into r4 as field;\\n    cast r1 r0 into r5 as TokenOwner;\\n    hash.bhp256 r5 into r6 as field;\\n    async transfer_public r0 r1 r2 self.caller r4 r6 into r7;\\n    output r7 as token_registry.aleo/transfer_public.future;\\n\\nfinalize transfer_public:\\n    input r0 as field.public;\\n    input r1 as address.public;\\n    input r2 as u128.public;\\n    input r3 as address.public;\\n    input r4 as field.public;\\n    input r5 as field.public;\\n    get authorized_balances[r4] into r6;\\n    get registered_tokens[r0] into r7;\\n    lte block.height r6.authorized_until into r8;\\n    not r7.external_authorization_required into r9;\\n    or r8 r9 into r10;\\n    assert.eq r10 true ;\\n    sub r6.balance r2 into r11;\\n    cast r0 r3 r11 r6.authorized_until into r12 as Balance;\\n    set r12 into authorized_balances[r4];\\n    get registered_tokens[r0] into r13;\\n    ternary r13.external_authorization_required 0u32 4294967295u32 into r14;\\n    cast r0 r1 0u128 r14 into r15 as Balance;\\n    get.or_use balances[r5] r15 into r16;\\n    get.or_use authorized_balances[r5] r15 into r17;\\n    ternary r13.external_authorization_required r16.token_id r17.token_id into r18;\\n    ternary r13.external_authorization_required r16.account r17.account into r19;\\n    ternary r13.external_authorization_required r16.balance r17.balance into r20;\\n    ternary r13.external_authorization_required r16.authorized_until r17.authorized_until into r21;\\n    cast r18 r19 r20 r21 into r22 as Balance;\\n    add r22.balance r2 into r23;\\n    cast r0 r1 r23 r22.authorized_until into r24 as Balance;\\n    branch.eq r13.external_authorization_required false to end_then_00;\\n    set r24 into balances[r5];\\n    branch.eq true true to end_otherwise_01;\\n    position end_then_00;\\n    set r24 into authorized_balances[r5];\\n    position end_otherwise_01;\\n\\nfunction transfer_public_as_signer:\\n    input r0 as field.public;\\n    input r1 as address.public;\\n    input r2 as u128.public;\\n    cast self.signer r0 into r3 as TokenOwner;\\n    hash.bhp256 r3 into r4 as field;\\n    cast r1 r0 into r5 as TokenOwner;\\n    hash.bhp256 r5 into r6 as field;\\n    async transfer_public_as_signer r0 r1 r2 self.signer r4 r6 into r7;\\n    output r7 as token_registry.aleo/transfer_public_as_signer.future;\\n\\nfinalize transfer_public_as_signer:\\n    input r0 as field.public;\\n    input r1 as address.public;\\n    input r2 as u128.public;\\n    input r3 as address.public;\\n    input r4 as field.public;\\n    input r5 as field.public;\\n    get authorized_balances[r4] into r6;\\n    get registered_tokens[r0] into r7;\\n    lte block.height r6.authorized_until into r8;\\n    not r7.external_authorization_required into r9;\\n    or r8 r9 into r10;\\n    assert.eq r10 true ;\\n    sub r6.balance r2 into r11;\\n    cast r0 r3 r11 r6.authorized_until into r12 as Balance;\\n    set r12 into authorized_balances[r4];\\n    get registered_tokens[r0] into r13;\\n    ternary r13.external_authorization_required 0u32 4294967295u32 into r14;\\n    cast r0 r1 0u128 r14 into r15 as Balance;\\n    get.or_use balances[r5] r15 into r16;\\n    get.or_use authorized_balances[r5] r15 into r17;\\n    ternary r13.external_authorization_required r16.token_id r17.token_id into r18;\\n    ternary r13.external_authorization_required r16.account r17.account into r19;\\n    ternary r13.external_authorization_required r16.balance r17.balance into r20;\\n    ternary r13.external_authorization_required r16.authorized_until r17.authorized_until into r21;\\n    cast r18 r19 r20 r21 into r22 as Balance;\\n    add r22.balance r2 into r23;\\n    cast r0 r1 r23 r22.authorized_until into r24 as Balance;\\n    branch.eq r13.external_authorization_required false to end_then_02;\\n    set r24 into balances[r5];\\n    branch.eq true true to end_otherwise_03;\\n    position end_then_02;\\n    set r24 into authorized_balances[r5];\\n    position end_otherwise_03;\\n\\nfunction transfer_private:\\n    input r0 as address.private;\\n    input r1 as u128.private;\\n    input r2 as Token.record;\\n    sub r2.amount r1 into r3;\\n    cast r2.owner r3 r2.token_id r2.external_authorization_required r2.authorized_until into r4 as Token.record;\\n    ternary r2.external_authorization_required 0u32 4294967295u32 into r5;\\n    cast r0 r1 r2.token_id r2.external_authorization_required r5 into r6 as Token.record;\\n    async transfer_private r2.external_authorization_required r2.authorized_until into r7;\\n    output r4 as Token.record;\\n    output r6 as Token.record;\\n    output r7 as token_registry.aleo/transfer_private.future;\\n\\nfinalize transfer_private:\\n    input r0 as boolean.public;\\n    input r1 as u32.public;\\n    lte block.height r1 into r2;\\n    not r0 into r3;\\n    or r2 r3 into r4;\\n    assert.eq r4 true ;\\n\\nfunction transfer_private_to_public:\\n    input r0 as address.public;\\n    input r1 as u128.public;\\n    input r2 as Token.record;\\n    sub r2.amount r1 into r3;\\n    cast r2.owner r3 r2.token_id r2.external_authorization_required r2.authorized_until into r4 as Token.record;\\n    cast r0 r2.token_id into r5 as TokenOwner;\\n    hash.bhp256 r5 into r6 as field;\\n    async transfer_private_to_public r2.token_id r0 r1 r2.authorized_until r2.external_authorization_required r6 into r7;\\n    output r4 as Token.record;\\n    output r7 as token_registry.aleo/transfer_private_to_public.future;\\n\\nfinalize transfer_private_to_public:\\n    input r0 as field.public;\\n    input r1 as address.public;\\n    input r2 as u128.public;\\n    input r3 as u32.public;\\n    input r4 as boolean.public;\\n    input r5 as field.public;\\n    lte block.height r3 into r6;\\n    not r4 into r7;\\n    or r6 r7 into r8;\\n    assert.eq r8 true ;\\n    get registered_tokens[r0] into r9;\\n    ternary r9.external_authorization_required 0u32 4294967295u32 into r10;\\n    cast r0 r1 0u128 r10 into r11 as Balance;\\n    get.or_use balances[r5] r11 into r12;\\n    get.or_use authorized_balances[r5] r11 into r13;\\n    ternary r9.external_authorization_required r12.token_id r13.token_id into r14;\\n    ternary r9.external_authorization_required r12.account r13.account into r15;\\n    ternary r9.external_authorization_required r12.balance r13.balance into r16;\\n    ternary r9.external_authorization_required r12.authorized_until r13.authorized_until into r17;\\n    cast r14 r15 r16 r17 into r18 as Balance;\\n    add r18.balance r2 into r19;\\n    cast r0 r1 r19 r18.authorized_until into r20 as Balance;\\n    branch.eq r9.external_authorization_required false to end_then_04;\\n    set r20 into balances[r5];\\n    branch.eq true true to end_otherwise_05;\\n    position end_then_04;\\n    set r20 into authorized_balances[r5];\\n    position end_otherwise_05;\\n\\nfunction transfer_public_to_private:\\n    input r0 as field.public;\\n    input r1 as address.private;\\n    input r2 as u128.public;\\n    input r3 as boolean.public;\\n    ternary r3 0u32 4294967295u32 into r4;\\n    cast r1 r2 r0 r3 r4 into r5 as Token.record;\\n    cast self.caller r0 into r6 as TokenOwner;\\n    hash.bhp256 r6 into r7 as field;\\n    async transfer_public_to_private r0 r2 self.caller r3 r7 into r8;\\n    output r5 as Token.record;\\n    output r8 as token_registry.aleo/transfer_public_to_private.future;\\n\\nfinalize transfer_public_to_private:\\n    input r0 as field.public;\\n    input r1 as u128.public;\\n    input r2 as address.public;\\n    input r3 as boolean.public;\\n    input r4 as field.public;\\n    get registered_tokens[r0] into r5;\\n    assert.eq r5.external_authorization_required r3 ;\\n    get authorized_balances[r4] into r6;\\n    get registered_tokens[r0] into r7;\\n    lte block.height r6.authorized_until into r8;\\n    not r7.external_authorization_required into r9;\\n    or r8 r9 into r10;\\n    assert.eq r10 true ;\\n    sub r6.balance r1 into r11;\\n    cast r0 r2 r11 r6.authorized_until into r12 as Balance;\\n    set r12 into authorized_balances[r4];\\n\\nfunction join:\\n    input r0 as Token.record;\\n    input r1 as Token.record;\\n    is.eq r0.token_id r1.token_id into r2;\\n    assert.eq r2 true ;\\n    add r0.amount r1.amount into r3;\\n    lt r0.authorized_until r1.authorized_until into r4;\\n    ternary r4 r0.authorized_until r1.authorized_until into r5;\\n    cast r0.owner r3 r0.token_id r0.external_authorization_required r5 into r6 as Token.record;\\n    output r6 as Token.record;\\n\\nfunction split:\\n    input r0 as Token.record;\\n    input r1 as u128.private;\\n    gte r0.amount r1 into r2;\\n    assert.eq r2 true ;\\n    cast r0.owner r1 r0.token_id r0.external_authorization_required r0.authorized_until into r3 as Token.record;\\n    sub r0.amount r1 into r4;\\n    cast r0.owner r4 r0.token_id r0.external_authorization_required r0.authorized_until into r5 as Token.record;\\n    output r3 as Token.record;\\n    output r5 as Token.record;\\n\\nfunction initialize:\\n    async initialize into r0;\\n    output r0 as token_registry.aleo/initialize.future;\\n\\nfinalize initialize:\\n    contains registered_tokens[3443843282313283355522573239085696902919850365217539366784739393210722344986field] into r0;\\n    assert.eq r0 false ;\\n    cast 3443843282313283355522573239085696902919850365217539366784739393210722344986field 1095517519u128 1095517519u128 6u8 0u128 10000000000000000u128 wrapped_credits.aleo false token_registry.aleo into r1 as TokenMetadata;\\n    set r1 into registered_tokens[3443843282313283355522573239085696902919850365217539366784739393210722344986field];\\n\\nfunction register_token:\\n    input r0 as field.public;\\n    input r1 as u128.public;\\n    input r2 as u128.public;\\n    input r3 as u8.public;\\n    input r4 as u128.public;\\n    input r5 as boolean.public;\\n    input r6 as address.public;\\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r7;\\n    assert.eq r7 true ;\\n    cast r0 r1 r2 r3 0u128 r4 self.caller r5 r6 into r8 as TokenMetadata;\\n    async register_token r8 into r9;\\n    output r9 as token_registry.aleo/register_token.future;\\n\\nfinalize register_token:\\n    input r0 as TokenMetadata.public;\\n    contains registered_tokens[r0.token_id] into r1;\\n    assert.eq r1 false ;\\n    set r0 into registered_tokens[r0.token_id];\\n\\nfunction update_token_management:\\n    input r0 as field.public;\\n    input r1 as address.public;\\n    input r2 as address.public;\\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r3;\\n    assert.eq r3 true ;\\n    async update_token_management r0 r1 r2 self.caller into r4;\\n    output r4 as token_registry.aleo/update_token_management.future;\\n\\nfinalize update_token_management:\\n    input r0 as field.public;\\n    input r1 as address.public;\\n    input r2 as address.public;\\n    input r3 as address.public;\\n    get registered_tokens[r0] into r4;\\n    assert.eq r3 r4.admin ;\\n    cast r0 r4.name r4.symbol r4.decimals r4.supply r4.max_supply r1 r4.external_authorization_required r2 into r5 as TokenMetadata;\\n    set r5 into registered_tokens[r0];\\n\\nfunction set_role:\\n    input r0 as field.public;\\n    input r1 as address.public;\\n    input r2 as u8.public;\\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r3;\\n    assert.eq r3 true ;\\n    is.eq r2 1u8 into r4;\\n    is.eq r2 2u8 into r5;\\n    or r4 r5 into r6;\\n    is.eq r2 3u8 into r7;\\n    or r6 r7 into r8;\\n    assert.eq r8 true ;\\n    cast r1 r0 into r9 as TokenOwner;\\n    hash.bhp256 r9 into r10 as field;\\n    async set_role r0 r2 self.caller r10 into r11;\\n    output r11 as token_registry.aleo/set_role.future;\\n\\nfinalize set_role:\\n    input r0 as field.public;\\n    input r1 as u8.public;\\n    input r2 as address.public;\\n    input r3 as field.public;\\n    get registered_tokens[r0] into r4;\\n    assert.eq r2 r4.admin ;\\n    set r1 into roles[r3];\\n\\nfunction remove_role:\\n    input r0 as field.public;\\n    input r1 as address.public;\\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r2;\\n    assert.eq r2 true ;\\n    cast r1 r0 into r3 as TokenOwner;\\n    hash.bhp256 r3 into r4 as field;\\n    async remove_role r0 self.caller r4 into r5;\\n    output r5 as token_registry.aleo/remove_role.future;\\n\\nfinalize remove_role:\\n    input r0 as field.public;\\n    input r1 as address.public;\\n    input r2 as field.public;\\n    get registered_tokens[r0] into r3;\\n    assert.eq r1 r3.admin ;\\n    remove roles[r2];\\n\\nfunction mint_public:\\n    input r0 as field.public;\\n    input r1 as address.public;\\n    input r2 as u128.public;\\n    input r3 as u32.public;\\n    cast self.caller r0 into r4 as TokenOwner;\\n    hash.bhp256 r4 into r5 as field;\\n    cast r1 r0 into r6 as TokenOwner;\\n    hash.bhp256 r6 into r7 as field;\\n    async mint_public r0 r1 r2 r3 self.caller r5 r7 into r8;\\n    output r8 as token_registry.aleo/mint_public.future;\\n\\nfinalize mint_public:\\n    input r0 as field.public;\\n    input r1 as address.public;\\n    input r2 as u128.public;\\n    input r3 as u32.public;\\n    input r4 as address.public;\\n    input r5 as field.public;\\n    input r6 as field.public;\\n    get registered_tokens[r0] into r7;\\n    is.eq r4 r7.admin into r8;\\n    not r8 into r9;\\n    branch.eq r9 false to end_then_06;\\n    get roles[r5] into r10;\\n    is.eq r10 1u8 into r11;\\n    is.eq r10 3u8 into r12;\\n    or r11 r12 into r13;\\n    assert.eq r13 true ;\\n    branch.eq true true to end_otherwise_07;\\n    position end_then_06;\\n    position end_otherwise_07;\\n    add r7.supply r2 into r14;\\n    lte r14 r7.max_supply into r15;\\n    assert.eq r15 true ;\\n    cast r0 r1 0u128 r3 into r16 as Balance;\\n    get.or_use balances[r6] r16 into r17;\\n    get.or_use authorized_balances[r6] r16 into r18;\\n    ternary r7.external_authorization_required r17.token_id r18.token_id into r19;\\n    ternary r7.external_authorization_required r17.account r18.account into r20;\\n    ternary r7.external_authorization_required r17.balance r18.balance into r21;\\n    ternary r7.external_authorization_required r17.authorized_until r18.authorized_until into r22;\\n    cast r19 r20 r21 r22 into r23 as Balance;\\n    add r23.balance r2 into r24;\\n    cast r0 r1 r24 r23.authorized_until into r25 as Balance;\\n    branch.eq r7.external_authorization_required false to end_then_08;\\n    set r25 into balances[r6];\\n    branch.eq true true to end_otherwise_09;\\n    position end_then_08;\\n    set r25 into authorized_balances[r6];\\n    position end_otherwise_09;\\n    cast r0 r7.name r7.symbol r7.decimals r14 r7.max_supply r7.admin r7.external_authorization_required r7.external_authorization_party into r26 as TokenMetadata;\\n    set r26 into registered_tokens[r0];\\n\\nfunction mint_private:\\n    input r0 as field.public;\\n    input r1 as address.private;\\n    input r2 as u128.public;\\n    input r3 as boolean.public;\\n    input r4 as u32.public;\\n    cast r1 r2 r0 r3 r4 into r5 as Token.record;\\n    cast self.caller r0 into r6 as TokenOwner;\\n    hash.bhp256 r6 into r7 as field;\\n    async mint_private r0 r2 r3 r4 self.caller r7 into r8;\\n    output r5 as Token.record;\\n    output r8 as token_registry.aleo/mint_private.future;\\n\\nfinalize mint_private:\\n    input r0 as field.public;\\n    input r1 as u128.public;\\n    input r2 as boolean.public;\\n    input r3 as u32.public;\\n    input r4 as address.public;\\n    input r5 as field.public;\\n    get registered_tokens[r0] into r6;\\n    is.eq r4 r6.admin into r7;\\n    not r7 into r8;\\n    branch.eq r8 false to end_then_010;\\n    get roles[r5] into r9;\\n    is.eq r9 1u8 into r10;\\n    is.eq r9 3u8 into r11;\\n    or r10 r11 into r12;\\n    assert.eq r12 true ;\\n    branch.eq true true to end_otherwise_011;\\n    position end_then_010;\\n    position end_otherwise_011;\\n    add r6.supply r1 into r13;\\n    lte r13 r6.max_supply into r14;\\n    assert.eq r14 true ;\\n    assert.eq r6.external_authorization_required r2 ;\\n    is.eq r3 0u32 into r15;\\n    not r6.external_authorization_required into r16;\\n    or r15 r16 into r17;\\n    assert.eq r17 true ;\\n    cast r0 r6.name r6.symbol r6.decimals r13 r6.max_supply r6.admin r6.external_authorization_required r6.external_authorization_party into r18 as TokenMetadata;\\n    set r18 into registered_tokens[r0];\\n\\nfunction burn_public:\\n    input r0 as field.public;\\n    input r1 as address.public;\\n    input r2 as u128.public;\\n    cast r1 r0 into r3 as TokenOwner;\\n    hash.bhp256 r3 into r4 as field;\\n    cast self.caller r0 into r5 as TokenOwner;\\n    hash.bhp256 r5 into r6 as field;\\n    async burn_public r3 r2 self.caller r6 r4 into r7;\\n    output r7 as token_registry.aleo/burn_public.future;\\n\\nfinalize burn_public:\\n    input r0 as TokenOwner.public;\\n    input r1 as u128.public;\\n    input r2 as address.public;\\n    input r3 as field.public;\\n    input r4 as field.public;\\n    get registered_tokens[r0.token_id] into r5;\\n    is.neq r2 r5.admin into r6;\\n    branch.eq r6 false to end_then_012;\\n    get roles[r3] into r7;\\n    is.eq r7 2u8 into r8;\\n    is.eq r7 3u8 into r9;\\n    or r8 r9 into r10;\\n    assert.eq r10 true ;\\n    branch.eq true true to end_otherwise_013;\\n    position end_then_012;\\n    position end_otherwise_013;\\n    sub r5.supply r1 into r11;\\n    cast r5.token_id r5.name r5.symbol r5.decimals r11 r5.max_supply r5.admin r5.external_authorization_required r5.external_authorization_party into r12 as TokenMetadata;\\n    set r12 into registered_tokens[r0.token_id];\\n    cast r0.token_id r0.account 0u128 0u32 into r13 as Balance;\\n    get.or_use authorized_balances[r4] r13 into r14;\\n    gte r14.balance 0u128 into r15;\\n    branch.eq r15 false to end_then_014;\\n    gt r14.balance r1 into r16;\\n    branch.eq r16 false to end_then_116;\\n    sub r14.balance r1 into r17;\\n    cast r0.token_id r0.account r17 r14.authorized_until into r18 as Balance;\\n    set r18 into authorized_balances[r4];\\n    branch.eq true true to end_otherwise_117;\\n    position end_then_116;\\n    cast r0.token_id r0.account 0u128 r14.authorized_until into r19 as Balance;\\n    set r19 into authorized_balances[r4];\\n    sub r1 r14.balance into r20;\\n    is.eq r20 0u128 into r21;\\n    branch.eq r21 false to end_then_218;\\n    branch.eq true true to end_otherwise_219;\\n    position end_then_218;\\n    get balances[r4] into r22;\\n    sub r22.balance r20 into r23;\\n    cast r0.token_id r0.account r23 r22.authorized_until into r24 as Balance;\\n    set r24 into balances[r4];\\n    position end_otherwise_219;\\n    position end_otherwise_117;\\n    branch.eq true true to end_otherwise_015;\\n    position end_then_014;\\n    get balances[r4] into r25;\\n    sub r25.balance r1 into r26;\\n    cast r0.token_id r0.account r26 r25.authorized_until into r27 as Balance;\\n    set r27 into balances[r4];\\n    position end_otherwise_015;\\n\\nfunction burn_private:\\n    input r0 as Token.record;\\n    input r1 as u128.public;\\n    sub r0.amount r1 into r2;\\n    cast r0.owner r2 r0.token_id r0.external_authorization_required r0.authorized_until into r3 as Token.record;\\n    cast self.caller r0.token_id into r4 as TokenOwner;\\n    hash.bhp256 r4 into r5 as field;\\n    async burn_private r0.token_id r1 self.caller r5 into r6;\\n    output r3 as Token.record;\\n    output r6 as token_registry.aleo/burn_private.future;\\n\\nfinalize burn_private:\\n    input r0 as field.public;\\n    input r1 as u128.public;\\n    input r2 as address.public;\\n    input r3 as field.public;\\n    get registered_tokens[r0] into r4;\\n    is.eq r2 r4.admin into r5;\\n    not r5 into r6;\\n    branch.eq r6 false to end_then_020;\\n    get roles[r3] into r7;\\n    is.eq r7 2u8 into r8;\\n    is.eq r7 3u8 into r9;\\n    or r8 r9 into r10;\\n    assert.eq r10 true ;\\n    branch.eq true true to end_otherwise_021;\\n    position end_then_020;\\n    position end_otherwise_021;\\n    sub r4.supply r1 into r11;\\n    cast r0 r4.name r4.symbol r4.decimals r11 r4.max_supply r4.admin r4.external_authorization_required r4.external_authorization_party into r12 as TokenMetadata;\\n    set r12 into registered_tokens[r0];\\n\\nfunction prehook_public:\\n    input r0 as TokenOwner.public;\\n    input r1 as u128.public;\\n    input r2 as u32.public;\\n    hash.bhp256 r0 into r3 as field;\\n    async prehook_public r0 r1 r2 self.caller r3 into r4;\\n    output r4 as token_registry.aleo/prehook_public.future;\\n\\nfinalize prehook_public:\\n    input r0 as TokenOwner.public;\\n    input r1 as u128.public;\\n    input r2 as u32.public;\\n    input r3 as address.public;\\n    input r4 as field.public;\\n    get registered_tokens[r0.token_id] into r5;\\n    assert.eq r5.external_authorization_required true ;\\n    is.eq r3 r5.external_authorization_party into r6;\\n    assert.eq r6 true ;\\n    cast r0.token_id r0.account 0u128 0u32 into r7 as Balance;\\n    get.or_use balances[r4] r7 into r8;\\n    get.or_use authorized_balances[r4] r7 into r9;\\n    lt r9.authorized_until block.height into r10;\\n    add r8.balance r9.balance into r11;\\n    ternary r10 r11 r8.balance into r12;\\n    ternary r10 0u128 r9.balance into r13;\\n    sub r12 r1 into r14;\\n    add r13 r1 into r15;\\n    cast r0.token_id r0.account r15 r2 into r16 as Balance;\\n    set r16 into authorized_balances[r4];\\n    cast r0.token_id r0.account r14 r8.authorized_until into r17 as Balance;\\n    set r17 into balances[r4];\\n\\nfunction prehook_private:\\n    input r0 as Token.record;\\n    input r1 as u128.private;\\n    input r2 as u32.private;\\n    sub r0.amount r1 into r3;\\n    cast r0.owner r3 r0.token_id r0.external_authorization_required r0.authorized_until into r4 as Token.record;\\n    cast r0.owner r1 r0.token_id r0.external_authorization_required r2 into r5 as Token.record;\\n    async prehook_private r0.token_id self.caller into r6;\\n    output r4 as Token.record;\\n    output r5 as Token.record;\\n    output r6 as token_registry.aleo/prehook_private.future;\\n\\nfinalize prehook_private:\\n    input r0 as field.public;\\n    input r1 as address.public;\\n    get registered_tokens[r0] into r2;\\n    is.eq r1 r2.external_authorization_party into r3;\\n    assert.eq r3 true ;\\n\\nfunction approve_public:\\n    input r0 as field.public;\\n    input r1 as address.public;\\n    input r2 as u128.public;\\n    cast self.caller r1 r0 into r3 as Allowance;\\n    hash.bhp256 r3 into r4 as field;\\n    async approve_public r2 r4 into r5;\\n    output r5 as token_registry.aleo/approve_public.future;\\n\\nfinalize approve_public:\\n    input r0 as u128.public;\\n    input r1 as field.public;\\n    get.or_use allowances[r1] 0u128 into r2;\\n    add r2 r0 into r3;\\n    set r3 into allowances[r1];\\n\\nfunction unapprove_public:\\n    input r0 as field.public;\\n    input r1 as address.public;\\n    input r2 as u128.public;\\n    cast self.caller r1 r0 into r3 as Allowance;\\n    hash.bhp256 r3 into r4 as field;\\n    async unapprove_public r2 r4 into r5;\\n    output r5 as token_registry.aleo/unapprove_public.future;\\n\\nfinalize unapprove_public:\\n    input r0 as u128.public;\\n    input r1 as field.public;\\n    get allowances[r1] into r2;\\n    sub r2 r0 into r3;\\n    set r3 into allowances[r1];\\n\\nfunction transfer_from_public:\\n    input r0 as field.public;\\n    input r1 as address.public;\\n    input r2 as address.public;\\n    input r3 as u128.public;\\n    cast r1 self.caller r0 into r4 as Allowance;\\n    hash.bhp256 r4 into r5 as field;\\n    cast r1 r0 into r6 as TokenOwner;\\n    hash.bhp256 r6 into r7 as field;\\n    cast r2 r0 into r8 as TokenOwner;\\n    hash.bhp256 r8 into r9 as field;\\n    async transfer_from_public r0 r1 r2 r3 r5 r7 r9 into r10;\\n    output r10 as token_registry.aleo/transfer_from_public.future;\\n\\nfinalize transfer_from_public:\\n    input r0 as field.public;\\n    input r1 as address.public;\\n    input r2 as address.public;\\n    input r3 as u128.public;\\n    input r4 as field.public;\\n    input r5 as field.public;\\n    input r6 as field.public;\\n    get allowances[r4] into r7;\\n    sub r7 r3 into r8;\\n    set r8 into allowances[r4];\\n    get authorized_balances[r5] into r9;\\n    get registered_tokens[r0] into r10;\\n    lte block.height r9.authorized_until into r11;\\n    not r10.external_authorization_required into r12;\\n    or r11 r12 into r13;\\n    assert.eq r13 true ;\\n    sub r9.balance r3 into r14;\\n    cast r0 r1 r14 r9.authorized_until into r15 as Balance;\\n    set r15 into authorized_balances[r5];\\n    get registered_tokens[r0] into r16;\\n    ternary r16.external_authorization_required 0u32 4294967295u32 into r17;\\n    cast r0 r2 0u128 r17 into r18 as Balance;\\n    get.or_use balances[r6] r18 into r19;\\n    get.or_use authorized_balances[r6] r18 into r20;\\n    ternary r16.external_authorization_required r19.token_id r20.token_id into r21;\\n    ternary r16.external_authorization_required r19.account r20.account into r22;\\n    ternary r16.external_authorization_required r19.balance r20.balance into r23;\\n    ternary r16.external_authorization_required r19.authorized_until r20.authorized_until into r24;\\n    cast r21 r22 r23 r24 into r25 as Balance;\\n    add r25.balance r3 into r26;\\n    cast r0 r2 r26 r25.authorized_until into r27 as Balance;\\n    branch.eq r16.external_authorization_required false to end_then_022;\\n    set r27 into balances[r6];\\n    branch.eq true true to end_otherwise_023;\\n    position end_then_022;\\n    set r27 into authorized_balances[r6];\\n    position end_otherwise_023;\\n\\nfunction transfer_from_public_to_private:\\n    input r0 as field.public;\\n    input r1 as address.public;\\n    input r2 as address.private;\\n    input r3 as u128.public;\\n    input r4 as boolean.public;\\n    ternary r4 0u32 4294967295u32 into r5;\\n    cast r2 r3 r0 r4 r5 into r6 as Token.record;\\n    cast r1 self.caller r0 into r7 as Allowance;\\n    hash.bhp256 r7 into r8 as field;\\n    cast r1 r0 into r9 as TokenOwner;\\n    hash.bhp256 r9 into r10 as field;\\n    async transfer_from_public_to_private r0 r1 r3 r4 r8 r10 into r11;\\n    output r6 as Token.record;\\n    output r11 as token_registry.aleo/transfer_from_public_to_private.future;\\n\\nfinalize transfer_from_public_to_private:\\n    input r0 as field.public;\\n    input r1 as address.public;\\n    input r2 as u128.public;\\n    input r3 as boolean.public;\\n    input r4 as field.public;\\n    input r5 as field.public;\\n    get registered_tokens[r0] into r6;\\n    assert.eq r6.external_authorization_required r3 ;\\n    get allowances[r4] into r7;\\n    sub r7 r2 into r8;\\n    set r8 into allowances[r4];\\n    get authorized_balances[r5] into r9;\\n    get registered_tokens[r0] into r10;\\n    lte block.height r9.authorized_until into r11;\\n    not r10.external_authorization_required into r12;\\n    or r11 r12 into r13;\\n    assert.eq r13 true ;\\n    sub r9.balance r2 into r14;\\n    cast r0 r1 r14 r9.authorized_until into r15 as Balance;\\n    set r15 into authorized_balances[r5];\\n","verifying_keys":[["transfer_public",["verifier1qygqqqqqqqqqqqr32gqqqqqqqqq825sqqqqqqqqqcmzqqqqqqqqqpkhqqqqqqqqqqrj8kqqqqqqqqqqvqqqqqqqqqqqpv0cxuwgvvr8zu0qvq5t6vj7vssv3aaj2r7sfehtvwe33nddup7jmaeu2pkv6zll656y579tv5wupknlzdum3pp7zjqd45wprdtswvcs3q06dngn4l4u253c3zwpn5y8rjt0yt5xk2m49c2f9we3zzwssq5676m26nnajgntrlejh5a5yme2l4rq870ltqyysh6ks3tjqxqgfy953rvxck3unay2yqxekgwt0qxmfrmnuc6c7850hfrhecl63z5d7r6c8f9fn5xzny0natgq0rtmgyhlysx78aq6ggdpp3ej9v0e2qqf8w4yf4smjrpdcnd5wjhmv94gzl0t3g88wsannkw0jk3drj24df8msdls0frj0ujygqsq9k55j7qqwla30x9rglr3lkyfrn26qu6q9x2ms0jp4anuacx8uyx35pam6f53tcru86h6vv58rhrxft69ugrvqx5pghc6l6sn9eypx69gerwtk6ljxe835kfrl7x9qqwwxnvxqg8lksm82ahfph86xc3z5n230d7scqjw5vqcn6s3zzy6ac865vm2sg2m9dyafrhtf0ujpsm0dcur953g2ux8rhvsthe5k2rnysf2d54l4qqc3lm2nfxy2zlwaqy447fnexle4jdq35096chtjy3lkwshmqx37mwn7dxl8ljm88xns6te4k9nxmqygaeyadav74q5xg8vrcq36dpqssnxu3h6lfh8hslxhnxkcwmjxt9mygu58mrj7p7ttzuuj5gh02sqr0m3ynltleefn2z77588akxm9gew5tcpmvqcnu464g0p2007d9cae262wdsyha0anlnr7vzx5p6gqwsavgmvkf0jh70qsnpyqasgzfjw3rax2z630zp7ez6qmrhxeemdjvwrekaa02uwj6xapz28reqjcr844ctmayahcs4r4h4af6eevv5pxj2jqete3gnxlmkvv3mu4q6fhhdkqqqqqqqqqqwmvgg5","certificate1qyqsqqqqqqqqqqqhucsq3ysfuyptwl5zkh5j65z5cu05pskmrm452vzwl505xndn4m6gz3hn3m5utfxyhsprrqkqlwqqqvn7tlv"]],["transfer_public_as_signer",["verifier1qygqqqqqqqqqqqr32gqqqqqqqqq825sqqqqqqqqqcmzqqqqqqqqqpkhqqqqqqqqqqrj8kqqqqqqqqqqvqqqqqqqqqqqt8c0jfjvcgv3lw2xfud6ms9q8d6jvcgw5p0mkx9qhfwe7rmc5tsgrgl5987zryrtr0sx4azedj6gpr6jrdk64u7pwjr4myfg0ruj8c8h8n85cfkuegwunx9h9jf5mntj73z5v83m8t2ercewgj2ec696gq5676m26nnajgntrlejh5a5yme2l4rq870ltqyysh6ks3tjqxqgfy953rvxck3unay2yqxekgwt0q86gq60gha7f55j4s5czl7fjv5dqdckuzn4659xq3jacyugv2cf0l9vsksxzv52gqe87wcev6dh44qq9xtmjr3jde9h7nxu8jn4xzavrsvgpn7s5x23uh2xm854xp54ptyrg6438wykpsu4eplep5xqrz7qwla30x9rglr3lkyfrn26qu6q9x2ms0jp4anuacx8uyx35pam6f53tcru86h6vv58rhrxft69ugrvq3awjwmjuxy9px3tamr78dvlwckw8edy8rf2fj7kpp7wffcjnzcwvk3ur2swkg99r2k7huy9slvxgp3qqmkqqu0g39c95dn44fxhn8jn7p5whsumcxvg0g8dvucx2v3vvjqf4lgtlvv8rdqq6dkqanzt4syc3lm2nfxy2zlwaqy447fnexle4jdq35096chtjy3lkwshmqx37mwn7dxl8ljm88xns6te4k9nxmqxmunw3kz9py8x27v4hthwlkgplwk5yauqnlnypexpj0xdkjpy0qwxfznsvmrxm54l6czvzpy74xkqvgemrmuahfrq9aqtdmvytac93hh9kfeu9asm3k5qzeyqc3755ckez9ukuccwkp0zw82lsa4qqfj5qwsavgmvkf0jh70qsnpyqasgzfjw3rax2z630zp7ez6qmrhxeemdjvwrekaa02uwj6xapz28reqjczdu8kgsxyf30huwr68y2l5xhaxh96xrueuvf0dh4wm8ug58r7vyujdhqqqqqqqqqql4fskz","certificate1qyqsqqqqqqqqqqxwrxuq4t6m0z49pvkyx00ly5yw8jnwzt7q3cvsz6et42snm6uy4p6ncfvz3egcmvdcwnsdnev4hxqqq7xertv"]],["transfer_private",["verifier1qysqqqqqqqqqqqrupcqsqqqqqqq2srspqqqqqqqqnqnqyqqqqqqqpjqcqgqqqqqqqzztyqgqqqqqqqqvqqqqqqqqqqqz6rmtnyay2pspz49msr634pu9pa6s9vr9zd87gd88228nrpx2cu7qhcpyh08ruwa4tc9qj8agm6vqzcevsp9yqqffzdc6sfenfuy6u3cdx2kvhw0673w33ut9pv62k0zewymds7zhzw839lpr87k06x2gzhwdq9ve3swq2qg5k62znqnapwyelr4lm5mwn28u0qy8xzau4s6cs8nqnnhhy7u9d6tzdzzglmvwszm7sk7hvdwqjf4yy9l8y9p4ulc9vm74stln8r2xna48wyw5xve2wmktqyxweka97apg8gnjhe6kxq2vpmvw4gakzcqarr9dh609ky3q9h9mvmdz5pd6yzu2yx63r4ssplh5lwk26sdluhcwvqgud5jad2q462vdgfxtasu79ccs0unkw9msck7vtnqnckl9l06tz56get9r7swalxstzm222yvcxuw8v8gs0yuplu0q72thvkcg5dspq520922vlxfnfddvdjhdxnsgwq3avmx0es9tdhlmsgq0smhwgedvjyne6gzgqaa3ds8y79unxytlf8ddu9p8p5n6tffgyufu3xezq457ph4zrkxtplx95wrv90kk5gwut3me3e65qz0cvcds0w256ny46j88pz664lyt0mgd555zgks2q39nhtv78gsdvsux36mva74s8ffrynuar4uxhqy06pnp5m9c96svxwd72zfhczsuusr779equhz8xdcvjpj7yqzp75cd00d45kn8e8cferam6f2cgkquvcysk6443qftkp8qqegytn8ydrlw8yl006u3sv2ah02x32hvatl2phxhk5m9a7k7fh7metxd3fqqn0gxc4j06s20tt46qq2jrqhs0499zqxsl0zetqnft7rd2zqkvu9lyd4ejp8lucpud40weuqkyavgztf0y82wr5g80uj3jah435uw49ktnv3ca3kwvmusuw2phqh6tqv9de0szqqqqqqqqqvrtll","certificate1qyqsqqqqqqqqqqzlvnda2my8rmz5fren33ldcfmaml0584etsyywt8ne66lcwggyf7myezkwjmqumcz5xuw4tdp8yqqqquykepd"]],["transfer_private_to_public",["verifier1qygqqqqqqqqqqqzqevqqqqqqqqqx0jcqqqqqqqqqwzwqzqqqqqqqqk5eqyqqqqqqqpxyyqgqqqqqqqqvqqqqqqqqqqq84l423cf8a8yeujypax58e0eugaf2qvxcap0xarlfmz9yvvxya46a4sc6dluv0en36zf7hs7v7xvqccdrw5lp53hf3jq96wg4gpdyev5yse6643dlf653n26489v0ssczl5f3q2dps8w2u43s3rhcwj4qzltf6575k7gxvkv8hva6yl7x0nw3jd4kfa8w9gmd94uwmphl2dgx3rf88ngyaxkfsccmy4n4jeqzsymknlqra0ptxgu0h8uue0plm7l3tf8hs7l3rf634lqd3kzjm0ykkcqhf8j29p4za6f8fnep2c8zcq03v58rmdku6xs2fes4ahmdjtfn5jj8kvzjy4x0lkyn95dym2n3y2naesy3jcg2u2srw6hfecq7pyqr0tg356uu7gsdd8cshfawurg8akha0kmq3hgq96ycc4j2alhzpd7x4fz88fsgn5lzjv4hlal5jegpyyc3hf9wwcf84yjrjcjh8304q7e9cqld0qvuvyteqr9r7s0n7h5eq296mj6unykd98zqps0dmmjcpqn9lumy4w9s9kgck3nwys9s7nc5ku449x0gvzw0hnz27gttcvkxnkc74u6z904g6w65n6x39wuvqypc76rz2jn7knqn630p8jtlrgjk7vazxhqcg7gc9sekc9a3frzg5aeu5lsulssdkxcn0ruj9lfltqxl92qau7y9u6rawxlh33apapvrg7fq30jwqxgyz9ng0snqrkwuvvllyvpf67e4xyk8s46xjjdf05q9jv25aarwpzs2dnaa2qjxvsnsnunvd04zmhnpaedtn7rpuy77sa94usm603u0539utf0wl0pc6cvqdu993g9m5y378mnef5uyg79w5fc950dlpal4jag66dwe4eln75skhyrql0q5yr7a6y46qwjly9kgp6se266s4nz200ngk8d8jemnrdd3t734fhmph658xqahgwhuz654uy8qzqqqqqqqqgxvrqa","certificate1qyqsqqqqqqqqqq9s7qku3j723ugjtgtad99vyj2wlf48m8accnf93d455ndmyrhgx3j567qpkklhfn572ddu392yzjqsqcqxn6p"]],["transfer_public_to_private",["verifier1qygqqqqqqqqqqqrnjcqqqqqqqqqge9sqqqqqqqqqv42qzqqqqqqqq0r2qyqqqqqqqrcwcqqqqqqqqqqvqqqqqqqqqqqpx3awtk2vtqng3l3sztryttkewhv5vjgvy2kr842u0ermkuxnxenws0yd8hdhjsnrmkm5pgj2ckgpwer8sfcs4d380ryn6vve3mxgtfd3z7m7n9e06nxt5ahcs34p69qwyv53avg0724xyrh63t0qfwcsp4accpdzp4pggwj4vwl0grq8lnv7dnkjn700snvzusg2u7qhrfrwhkuslqh4fr8snqf0mwtg2gr2syeynv6wqcjwhppdqmjlrw4rj2fc0zggqu3zndf3esg0p4e903ezp380nytlpxy8wwlehytr7xqmxqyf0gp57kwt7p48q6aet9l9akvhk35rgrf4n8e24dmlmc4hympmevkpwt4564k35msat5y8m0vmt5q5zm8pjn9ks6cvgrdr6jkmmamd9t24lwnvdvekkzhx7fxs44yeapvr9fxtrvaue7jdsurnfg6zvxcpjwqmynsgn3m335zdj7ly6sa8vl4tvghg89c6vjnm9rjr35nsxl7vukumfuawa09ykagpuq4e9qqqr89swwwsntqdg50rufu457fluqpzqq49hxlzyfxj4qfpd75624egnrlhsgag3dayzx0h5uv26smuqqmzztsvueqvlfwxsnyefv7a0kg0qgnk4k8lutvpulw5cdsnct5flwzm2qunhhzdwn6sp7fhs9m6hq98506xchxlsnxrvfxjsuq5jc4pkxl3pkppjnf639nul6eudzrae5tg4ngeurglyjs9vljq9xgewsqdfpmx84gf26lgp7pyzxal2hkv3tdv8mdhv89czuz3l7pfl56796wkz70tazx6p8whvajl80sds7qqgnhrpgg3lqwnqxncqmz4qaskyt9wz0zumng4pzwpnlx62svrn3c3a2lxu0zddv7228fpe8se5ezcztnupqzhg3c3lwalrw8e6q92heg6hnge9p3afgcfqen9jn0nqtw90lqqqqqqqqqqq23eq44","certificate1qyqsqqqqqqqqqqym2ncr0tr4mvymqj36p6tqp5e7ntp6y3pat9nr3xrsxrexgt7m7zsgjqm20lhguv69vl0wf8w5tjqqq5z8exw"]],["join",["verifier1qygqqqqqqqqqqqzk75qqqqqqqqqg0agqqqqqqqqqv0zqzqqqqqqqqc9dqyqqqqqqqq9gxqgqqqqqqqqvqqqqqqqqqqqdjr35uzk85eq74g2r3uw69pncj52mm6kcrl93yn73sfs7yfxd68lra4nvnlsexfjgumetgk276v5p3x8yvj790t5v6nrusnuqv5j866y3jr857wt5a0l359xxug9mys9qcww3pnhtm794zjrms8tqv6fcpc8c9nrh7vejechj2uv7jnlz9257a6z5ecl8yucpu4c5cq6tr2hgu30p3nhmerw2wq5rm9my3lg5qqzerauy9rwxwkxxmrgplkdx2gfseplg9hxfc35ky2wacgvf6a540cdugu5rphhwmm34ke4u8n406qymrygknwpqvm7mhfkwjkrc58y5u97s5aw74smzt4ukxhpuad7hgdhd7et8epa2rdzf596jjq6wnyqnv3lfyucvcdhhx357j2v4ye4g04ttvc42zlmugqy30x5fjmnnewh3dc6tjtnvxu76thkah2lg4yuqp50zjje872w34gnwt5fl4gjryy36f5lkmrw7rll9v48r8k2dtukky0qp7840l44k7tj7yn4k2kxcq9a7mesnmkz2q4a9a4k04pcl9p4a5pwu74909cjefm53vfy258v8rx52ecrpvfy9tg096798lpsmqrhnwgp4xvetatcz3mhd7xj95qe5swc07d7yjhv7zld8l0fedkklrp8w7fumv392dcuhpf2a4qk2uq0nff4hh2fmpqeltf4v2ffjykxds6g8ytaauzch3c46pndpltx83swpwwwyqpu4f5pf0zqa3dfnggqucuyslfhm2p2kadp34qpnyna0arcnkq9h7g36skj5y3xlkz20pkupfkxk64752puwszr75d2kx6yq3nhzvla2f0y606wvv69z04z2ej3jlmqpx8k45xfs8k6ye3c0wygvdtm8whd4tan53lznt2pykdusqqjn5lg9tfnlp8cvvj9n4gtz4ucuzw4450puqevcaszhcwpm8rst4dzszqqqqqqqqz0ls3g","certificate1qyqsqqqqqqqqqqxa46ys625t2hv3h3daz6r5t8rzgrwmxdv5supt7wqjtgs853jkrx5rxgksqz3vemuxkwq0kkrmcqqqqpjtuya"]],["split",["verifier1qygqqqqqqqqqqq8eq5qsqqqqqqqr2pspqqqqqqqqvsrsyqqqqqqqqv0zqyqqqqqqqpk6jqgqqqqqqqqvqqqqqqqqqqq9p5raynwuxsu2kha5kk8qjlt6vejc069e3kac7ne6vpaqfpnuw5e2jhluu6qvnx7408rhvjnpj9gqn5yumvyvm3x25dx8tgddcgj7t70eaay9aemm03lgpxp772q4u6cv6l0ts76ks5ra366cwjra7fagz4z837rmjaxvjxsc94sx9gt480vahnqm0ntwu8n26mgf0a5ejthscpgfwvunflpq9cyjkfk4dxvesrsrqzquggpan9x7y4wnp9x02f5p4fle5h7qnuzvx8wyq56qpky7pdsagdvps8rqj37qpex75wy5uqq270r0c27zp5438k849y5fgm03xxzv8fdkjetfu8pkqzy970g4fdpgdu5hj6fsc7dvjdxnkq8mhsq09lukdmkt3e3recv8wjnjnvcfg7kzqhxnew2zzm0cnzv4h98z5lasnjr7699jm2x7hgxyjwh6pqqqr89ptxc7mr24sc7drp0ps2qz0gh0qjutunvkaswe0jsn0244v3jg3uysfglenzjn4ajurru80arsztqpdgr98gu4gpvy3dkfvnhscw955jkvazzp7vr93pgr28yg57tghswgfala782f58nx0s34fmy6sq4hyulmmfa0fh5fv240jlgkx079gn0fzrpcmnvqmmnladywt8jlqrrzx6jwhz0r0wscfn9y5ah3fqym93yx4n93l57qwpvqkn48ld0ulh35y4rn7p4cjv4at0ppgz34lj3ppxq6jxc8frhw4cclencl9sqcg03ygr9z5aygaakcx77tacvcv5fcywytx5tp3amp82njh3n6w5w8eddhvxrgag26ce6zjqdyltvpq946dx339kda0m7kx7kd5kvljvw8lpznxduqfuflmpe8jx5ta7vhmzkuv7kdfd2yfzy3uetn8e4grwrg30wa20jzd865m9m9pl9y5af5quzke7uzazvv5q3j4n60lmwy2dfqzqqqqqqqqc74m8f","certificate1qyqsqqqqqqqqqqxpglmsj6yycw8e34w6dxmkrfusggu853pek8u5axdynmvhu89wfqyl2fftt0rchyapaywn8ud3djqsqprzsv7"]],["initialize",["verifier1qygqqqqqqqqqqqq5ycqqqqqqqqqqvfsqqqqqqqqqw49qqqqqqqqqpk6uqqqqqqqqqrln2qqqqqqqqqqvqqqqqqqqqqq28c5qkxsz699ds72k2mx68w7rya7us8lspk8wxvalynxzlw58xmrft8rqz6emp2rmzzktarnm9kuq9hq27mlrk3cy6ht7cg98rnq0hhqscf4w9ksjaahmq7zmmq0j48jrupr2rnak3x3dt2l9jyl4qxxgpl39sylwl86srm2u3s3ksddgp5rrta7llmw0ttd5wvuvkrzxvw06e4v9z9xwfm6kyn89kls0yvnhszl3t9wn264achfvg6k2w64nrn06dq8sd0z0gvest2s4jncrzw7m8vjfj7tk9u9huqpydvrzl25f9q8gyll5gps94eq2pnqg2pg7v7v3u5cvlzsh9yg7xj06yglpyjf62hkz8w863yaxg8nwhq74kehmy6qxztxkg32u6cqcc76hwlg0xlju7dhmszmks8g5gc7jmgauaz75fr8dhqeppq6r80t3e9ldqevs2e5qlvl2cuz5d9gehdrhg5u5v7v2pjrf7ma88myprrvps7shqkz6423ssa8hjddpa34cjuzf63nrd7egpm479ul7lnk3q0lus75qx9lnjj776fwv2wk36mk6tx8yqy9n29wz5pnl8k0ptdzztm8ggxryz3nrq9ft2slsgkgzv8qwgcvrvg2g37fgmmg09lgvclfj5fw4whtcmt7e7wplhuyx8s5wg4g88q3rc74efqxwqnkypyghrv3jn6hngdsrkxyy6ur5drwaf3d4lkufwr0g558706ezw02chwtcadz9neyj64lfdvql55ljzpwfyyl3mzq2yx03g0p3d904ges6adtp7eun043plxqrw03r9m9tmr0j5h6rsjvc22jh6csqa4sjdnfaxez33vhj3g24yhwhx4gx2pvadcrvmwatt8kfpvaz0l8jeaywkvnz9jlw5g0a4jw93xnszj2dckxdhzq6mkw3vqqdh70qzerp7qz6fyj4mqj7e7x79sd3zj0kxyuqqqqqqqqqq5cf4st","certificate1qyqsqqqqqqqqqq9cyh2mjemc0sp2g9k6ng5w6cu4f93fqvmzv5g4s4cjsaerp40exh6ms2zntjaqexa58whwd04da6qqqg304nw"]],["register_token",["verifier1qygqqqqqqqqqqq8j8cqqqqqqqqqwj0sqqqqqqqqqvx5sqqqqqqqqpmh4qqqqqqqqqpqy7qqqqqqqqqqvqqqqqqqqqqqzfmsu2e6427j04cl7clcpsx60tv5dna6w45pzx0h62mr6aevrgglk28ln7gvs2qur2g4jncse83yqy4j07fqxefacd0v62q7htggyvy4smjdeglf9fw49lp09atvn0dpa0rzftcysyqs0wdftjwv0kgysrnlkndmf3mfzr5a43rm00vkfq78ftzvmv46vjjl26e64sx0rlvff2vuwnhdvq62lnay8t6mc9gats8ek0hasruckm757mc672kse3ztda7l652u5g34uqu72m6lwzv3krpevnpcrt7jhdvt4jxdr840zgq9jcter7ae8vl3fnxm53r2ys4pf5723y7h9xptvjchva7p40zye9mpmtg3l5d039xm2wfuvrs8h9vqxssgkdcrxds9lkpk3gszqr6zae8608mq6ucdpfwyhu8tuzknf0jkl0mjwkddesdqdypnt9xgtwwvp0g6vhrsgzwzr3ddq6upwleygng8h4nwzavusky092fdgj832t7lqj2lffh4qelswvwah87x2523qpj43aqxp0792en68sjyr9hvyn9uk6tya7pld78jntrc05ya6madlqqfgn36zasyx8tfecwm5k4e0q9pdhquphnu5k2jydd8m4qt0m4pm6km0dt9gr20qk5t5p7ppqphupfkxfsf347t9u8v8f26x84yr3qwucy2fdx5azw6d88ztwze0526zt7mggp6ehdkesl0x6l5quw3l7degxqp85stjk5u4j5hpc862jgqd8dcur7yc0xmk50m3ff2422ls4c59zaj62h0ha4udgt8cs7gu45yjtalcujhj9reqcf92zglddgyppn7sl9z2c36urk8s68a8z57aafgfu76xdkhf4c3m9p0vllskxha4puws6dyvceq5g8qc6r60jadsr4u6x09cacehsvtywx4nr3lk8huhycfp3gkq6wfjv6d6qjpv5f02setsqqqqqqqqqf6a96w","certificate1qyqsqqqqqqqqqqz9trae2j33d7z4uk32234saw89n8t5zha4f9tg5vgd93ga34ggepkwden6t097gq3vjxumffnkmzqqqy04z5n"]],["update_token_management",["verifier1qygqqqqqqqqqqq8wxuqqqqqqqqqwvdcqqqqqqqqqg6ysqqqqqqqqpwaaqqqqqqqqqpc55qqqqqqqqqqvqqqqqqqqqqqpnhta6enxfrcpcjyam2trhmezqc6ywpplmldy6vuslsaeh0lntnm7artp6fjvn8pk8mvuq27qvacppexjr65nt8w6qhx7e6rnj970s4fwzg96th5fjk635ddr9kwug0jmtrq23m248x62etsmm6pl3atcqyn72cz8gzjp5cwm9485zlsfkt8awae064y89d83m89mqekqukl4gehprfpm2av5ae647yxwn0jfqye7wpfg3dk92rgl0wz3yfw46z3kchsrzld65dpu29rt9c293zmy42uh7ga4kca29uq0mg38t4n4gq8wc8cnk9ny3ggcjl2gljrjr70jrygyrkqt8cuv48pnn0plkup3y0hjq2vgtyf6ch3mfxcmpm2t8vqscmsqwwwf64y55pquyqs4gewdka9ruk7p68fg9fw755tj3nvcvph0cpv06ju9ru0mzk5dquref5uqxx0a7t0az4256cps7a4n7jectxtrhaxmtk0vnwd6kav8whzes7av2lj32ct8ef0gqstk8m9jvncgpj09efw2xs5u02u49xq3sgssuwd5yw43raurq2gtd0f7mwe70l7wzvj5ke5n8jm8zwdqfgqy4shyszh8jp92mk0mnptmeayrzdthaj0u987hh55dpwchqenllaaq55vyvyx50f7hdt6gfdvsfdsl96sreqy3wsjaucyzzvanvt7aeehhan538t2qulldru94vlvqtm655y7mfdjqd45tm8k47swmpaqtta7x8sqd0hfeztt9ukkvx4ww0rjtszrexzfzhl84ncrgu4muyed2cxfvlgwq9y03r8ksjh2fmexy6edlmfvpz7dx4fkaag58ffamy3dlgccvnnl9zflw2y9w5u6vtwkj2cehepxvhpl8z9z76pfj40g07wx2ty0sp4ful7ndfp37vdd88a7fmprg97p52fx56e90kzul5t9e5yqr605qxfxsqqqqqqqqqeux90u","certificate1qyqsqqqqqqqqqqynrl9hv3uhtdyyne9fe9486vqcdnhg7064uf5vu8c38fq77x7pgxh86ewa0ns6x35733rpghzaawqqqrmsjr8"]],["set_role",["verifier1qygqqqqqqqqqqq8kgqqqqqqqqqq0gsqqqqqqqqqqykvqqqqqqqqqqmacqqqqqqqqqzp9uqqqqqqqqqqvqqqqqqqqqqqf7d6q5590advpkce5cf6zqleg27ugd84qjl3686909dlnckuc6m8838gt7kcvqejdnmeydkt8g9qqdl7amxnfsh0e9rdsyw9prz0gnt7dx9tw7x67lp85gymq7se5sgghde439g8kqx0hlvvd0hswsg0cpz6n6ga8xpdu0c9hrl8vj9setdk9jtj66j6mcj53ft3zdcshcaug9ygdmskueujs79qwefquzps0s8ydgj2r6ct9dec25x6svl904fpes0axls2zpkep95lmd2exlqed86dg3km0002mrhcpc77uvjzwyqyjyt0ldvqy06d44r5pa50768uth5wt4cydgye29m3chflqqgmedgaxw8ns38tqqka7rqjggakn0jqs4pvdat3mvvjs6dx86n9t44u40gy5jp3yenk88avxfnzw39fs7vwkugxfw4fph8u29670rrdwvguqreslx4ly8a4xn0wc9mj3dszadnpg4dcfmjq7sc8sp632lnxrk9dge0qclh2x3vygulrj7m2vj5ngr2jzq5vfqec7clqxvnfdr8vdce47flrtvrz8evdkwrn69uncf9z2ldug0h7skr4xshlxfp7cjzpqq8qgttzprs42yp3l35rqv7lnscwf32s8qksp9yayjlv4xuqc6ju4vf8lhma2gyzmun390uz45the0qg3cwtyhylt5c609fnugaeskt5azkn64vmkuvfdsatvnrntvl3zktfwuja3x0xzmnfp6l45tm0ayuq757kjuukj896hqrxwlg4f0pnv8mpqkdp928nfp9p6eczqsfahcz2rzvvcu46myuuzunkhj4sezduqsfqah5mymgy33ha0eal5tuut2lm7la303dk7v7n0hez80vlwux3u5mk3kcrqczsmtc733xmfl0aqqnm48g5me38uujsa8q29dn9qv90hkt0ym4ncw6xp4m8aly9me9ts5atqqqqqqqqqqtug8ye","certificate1qyqsqqqqqqqqqq99m2xzyak37q6eqdqzm49pvhna5x9cayqcw6yxak7xwld4t9y7p26rrq7k0kfkh7en24vhq45dmgqqq3y0h8d"]],["remove_role",["verifier1qygqqqqqqqqqqqqr8uqqqqqqqqqqq0cqqqqqqqqqmk8sqqqqqqqqqe92qqqqqqqqqzv9cqqqqqqqqqqvqqqqqqqqqqqxj46pqn2tecwd8nvcze2rc6hmvvdgfujmw9lkdcwalw27degleusyh249ueh63muwsev4p20r2wsqtlj7gf4rzuwnjpvjglm89m6qt3t0caesdermmz2tm77l7eargyrm0wwl6dm6ntw9nrutk494ls2qzacpwyyvf52pm9545s6uzfr2y5x8ve4ark5t52q4waf67ktzxqaa6545jp795y6nga3z26jla3vfqych0jjj5hxjqf044l4vxzyp2wpu2mr9fs3un7fm2n294afmecqh84xtdj4qcfg28a0y38nrzmxrtqvj6wx7lva7zmm8vhn5lx3kftcwgcsp8em8h3732zzu9tglcw5ccms2gu8fdksyyqef7hl3hqaq8gqxynw0gmsvcv70jjmdkv3ewyfvrw95sqhfwc5lrzja28g6rlywvgmjd6h93wt0hxxykz4cqjxptfgpcmj8khlp3wfxvz4wcxvwatwu0433n9rpf8wrnxnf4mt5pascfc0082ur458jxj6kfpc3c24stu6sry7ykxvmej8a2gd965y58ld2enx5m94yncktpgwr9qz6xtpz58kxqxrzp598eljmafekge7v4ykgqqmuwxsnm78x5hzqd8vuj275xjdlfsu543f8dnskxjtklutxpy82h7a8wg0ejfn6x6cfj7c2y0c2aq8vgug5rqv5lckm0vd2hhue3e9hul8mzsgkk0fapkefdy8u63yz357hf6qkanjryy94dyus4n5qcyqtt80kggytld3g7gy96ae2k3wchnu3w5szlhncex2fz4v6etrwc76n8979y8wtxnmaml2c20u0yscp293e5mvsl2tuwcrlezmlpf06es80zk29hwqcf6hr8gw30yzkuh9mn9zlxkegy7wm4egndughgg4qqysfdxhjpkq2ufeew88hyrsfht2yhljr2w0wgjss5q0zn6j599khqp2sqqqqqqqqqflxwmw","certificate1qyqsqqqqqqqqqqrlhd2ghgx6d3nt2s8tk9z60p0895d9nl9c9n2fza4zzqwwzr362kp3nzr3xgs0zzclkz20cg4uwgqsqmdtk72"]],["mint_public",["verifier1qygqqqqqqqqqqqr52sqqqqqqqqq8s4qqqqqqqqqqxnxsqqqqqqqqq500qqqqqqqqqrr86qqqqqqqqqqvqqqqqqqqqqqz4pndn6d7p3e5c08caj09kprycj9uegq5ek5xtqr8jdku854xvxx3lkzlk8me72d47ea6k25cs3yqwfu9w3ag5uetjcprekv0wntsgvyqdqpv4l49svgeyh0ktwgy2rt8c5jyxzhqefrwuncjhdj6yvgsp8athz2xw9c8rl8tuak8wj23f2pugp2gu4lvxph9ht98gh8z93zdsmzk0fnu288c3zu6sckrp9vssxs4h8nwjejses8e0eqvgygf6dxp96w70r9fclmgjtt42mddvnze0fn65s0z3peqg9amnx4t7sa6sq2h088hpnndp9ex84q6w9267e6t2arm958cc3fap9008ganjcfy5du6nay620q7ykg926kj33vhq2qtyqqn5f8slyyspetwqr0vg23rxvyp36lk5uec0hm9zh4r5k0hzrsgmrfk6ymwuvqzpuyd0hdj94cqrensm33uf4xt3r73zv9ut76zrdq42jwh6c4x8ytqsj08858vrzgan6grsyqxawas8j85kay3z8ecqefjt2dr2rs8uvnrk94qhxdwhnfxr7fyzj07hsxnk0a739hquvl5glu5pl4u0aw9xemxfwg7nl52qxu8zlllzv02f0w9yz53strszlggqdry7eaqwv0ecmjzwfhwe2ymppxwmsqf9rex4neqkwhmg4z8hq06upxp32jk6k7ehvnznrp3hcq97ysg66h50pv7uynf3s87xk2qxsy8tsjvwcyng752tdx5j66s9gqawmyzejz4uf5a74ltggxkex7jyk0kzp8qv4l7p60aa4lvyja3yrpskes0a2qg76g40r5dn5zg7huqyvz5tzml2e64sewhaaaur9n8r00v9qvnv9fp8a5vswuy36a3f3t7wgvljvr3d7pdg5aklh52la0sreccx9sptayhyevafavcd0crj6hfuwktjwqjt6jn2z56x8ujrnhuy4hqqqqqqqqqq43hk9s","certificate1qyqsqqqqqqqqqqxyr2udfznsr05x5qzv7sr3ctvdqmyw3r654v0e8tsuzs89ju2952vv476jt4wtlcq3k4l095n3dsqqqtw8w60"]],["mint_private",["verifier1qygqqqqqqqqqqqrknqqqqqqqqqqglxqqqqqqqqqql4wqzqqqqqqqp2rcqyqqqqqqqrw7uqqqqqqqqqqvqqqqqqqqqqqfdzqrcd0n2esskpw2r7p0n6akvs26m679qk404j5078wvjjqwf4fe58egdqlqjkju7ts89eth99vpes3gnu3slyfwzpqenafad9mn4rqa4n92lhjhpxekkz2rl54842x4uk9jtsksrhz84srj60nxnrsqqlqv3t4dxwcyhm23rgc2kf9c53pdymy2j5lqtll0vnz9z8f84heg8m83lclxtewfmfg8xm6wxyyhq8r09fz2scex9rc6ek8j6cm9jy3pc048t78w5qnd456zsnw2pcxmpjry94r7cmch9c653t42nyqcqqqyd0ccx6m6x07s6725l66aqsq79lmge4ll7uh804hvhq4a5yugwhm34w7ckwgetd5387v46784tkqljuh49auq3sgd430wnggjm759jyvcq8s5dzveprzs0298sh7hqxqk8xjw8a2ykpcn6djlcrrmx9spn6t9aghrp6srgxw68f94lf7fy47h9tmv5rdhfxy3gtww4jcaw9gkxkj05wkufcs94spx24k92u5gr82zj0fj50g920excrhsxamxch52t363uzng48hs8vykdl6654t3vhwmlnqj8dezz50wq09cu629qrzqxexrsdhxfx8ym9kkzg799qwuxay4s4kw0y26ch326kkz6qy25uy4hhwwwwuw4fjmkq7av53kdqgg2uz82e09s3nltyudlla33vkkty24wjdyqe3va5qjrp940d2dq42hfa0jgfdzatdekyu7ucuanzqjqm97nt2qvvswr7xlwpcn655p8xgv0f2vd27e5vkhc725jewxvz8lnuz7y0hjjx660l7ej9tcydgqqdffwttcxeusxvuv9edz7apu8aum7ux4njg0u74dlqsfmfj44kjs4dnjwlxmw4xjtyggl7cftyyspvcz8grkxux95np9e8xhramrkdalmtc56uhx673h27zru92hdlsxhxlsqqqqqqqqqjewvsm","certificate1qyqsqqqqqqqqqq945hhccj8ns9exu2j8kaegumjza5pcw6a4snq0jtvx29zyxwzwjdlqagvufvt5ks832dplkgfnguqqqlfmnew"]],["burn_public",["verifier1qygqqqqqqqqqqqr32gqqqqqqqqq825sqqqqqqqqqcmzqqqqqqqqqpkhqqqqqqqqqqrj8kqqqqqqqqqqvqqqqqqqqqqqx8kxpqx55v6kds2kff94dxfp0gdcu5d4fwsz8txt4y9jlwcfedlr2zjcemaculjfk0d0rw2h9dgsqvlham5v4q5zqppqczh4dsh6nepauwvpwsg5q9grrrg8unwzwz23vh8c4tgcwq4wvlmdracx9t94cqduu0v62kpfmz0etusqsh46kchzekrn8k3szpqq3n60f7uu7wh0dnkge9cwpsxar3d9tqvspw76mq9n6waws0djg5szzmnle0aash48da0xpp84en2jk2u02tj4wrras5j9u7593fr9lszw7g5vs50ufrqpukfe8z5gfezphsra8meff2w0ry0aezz5m8gdzw8lw58rewz7fghnk56wpl3zxf3tr4wavl4yhxxqz5anw4usgaegmtag8ctpdec5k4penkn9shmvzlutl693hmgnk4yp2wmr38qvem0uzptvt7740dkuqf7mec8egwm03yw06cjf94jym5z5snq8wsqc49swaruhm2w74sahhlf0epgx3xk7l0dptvqkvnu9gpns3g4wk654j3tullt7pmsnju3qw8m9tkdw6795eyyd0ykr3jn0cz2gh686a323pspm82su9v4tpqzn35kdhesumzyafx2r8c6y3ske5gjn79g9cx95jucss2976uyu56a75eaz9rlsmdcj5xrvpakj69q9jeq967juvnzxyeu9qx9v0aejgz25h7ssqwkycaxqlhn6k25vlq3p26cl4skent6d3fhefckmw9vqy3qec90rdmp6rncdqjlp3ssn29f69sk6c86xfhhy9unfyz7n442ue9ljsga9q8nhwnla90mvusdyq2e8z0lc7jlsrytn8h3sqypxe5lqj2tpshtnasdq2pp60eedz4uswq9ctwn5s6lyvs3hgrj4cccacp4j4qyp09uq9s5r8cmvw7hhqmdln0t2n2zl96grsf2rmzwtq4zjrrakqqqqqqqqqqfn6zc0","certificate1qyqsqqqqqqqqqqqcjhw3w5rd54nyf9v9fnh0tpshnrue8ehwykpp9gcsd8spcm4m3zcw2l5stmnvkaa6hwzmdjernuqqq32hju7"]],["burn_private",["verifier1qygqqqqqqqqqqqzrevqqqqqqqqqxmjcqqqqqqqqqu6tqzqqqqqqqp0vtqyqqqqqqqr6yyqgqqqqqqqqvqqqqqqqqqqq9fy36tgc46lp00s9ncz0mf9m494snmce92huqqey2dwhnezuven2ws0hh2s2xmjpu52lvnnsgrryqav3w5e0465a8vygrkmzmasr9v3ymcqy4rcdacfs908s279309nqga5e2wlw44etqd66zz03mj7fqp23a9z6yg5x9esrwmhqgat5ct9fuphxp60hnvxs3sxm55nhqr5qenr7ghq3ecumxyyt9qtvm24fdsr40wjclwcph8z2le0qhf5anekx4kv7furckr5hex0fegvjyhcdzp00frmg3z43csjdfmmmjap0qmq0r6xmxzrz3rtqrh3djqnx5ftydcvpp6rc8gtlunmamh5ar7vpxpmldumzlyf5j9k6gaeqemame37qhvtew4ynp385kdxql6fd838pw45zp3zum36m9y4xtfmx4xhwwsakqe6vutqcehlxclrw4kfah9uyq9uuewky3ttv83knd5sjyajj98dm2pl37ppktguhd00zd7hjnt9chzf5y9z2vxqsjtdskweanfzjqqkyawzht56jcdtuslkycdkap7tmj905mnlvw2pumxstf4hd2c32rfxv2jjg04n3c5jh94phff9szspq279a7q5dq6wm36xs5wq67u4dvgk3qhjkcre28eetthufaks4h2jf6f4qe7drk3ursg80s2ml72qpcfm0s62awfsad3j7x2qgvhxk0wdtu7kl7rrv09elmhavtur7xelz4yf273dy79yr0xnsr3hg07qqprdc0dm6ra85na9v8tqcq48qqc2gl7xhc7yr5vhmhhyfptfslhut6ad4769rza2wenx4yfv45r8uqxenrry9z2vus0m2h48jkwdqelzqpy2d6w6l3lq44zujldrquyn0jw8plmfyej5gcywj0w8g8qygcra4cs6g2nzzzwyx8n8ue07n3vtzpujn9n75kascpglqymgfr60t3wy9qzqqqqqqqqfy0tau","certificate1qyqsqqqqqqqqqqrhdwvwlagrdxzqgwpp4u8pyvx65jmw7ejvqaw9ceu377w6l9zullvavxndevn4pk7jmjdqf9ynp5qsqm97qxz"]],["prehook_public",["verifier1qygqqqqqqqqqqqyvgvqqqqqqqqqgsscqqqqqqqqqmw3sqqqqqqqqq7wvqqqqqqqqqzqxqqqqqqqqqqqvqqqqqqqqqqq2jwwylmryjhz0ptfqlry7d57xvkkdv4veg6sp7nqchl38v7uhe98r9zwpm73h3h95xa0es7xjhxsqfx87dnyns7gutur5cvjzhlg60tqxxg8lk0y98jl35qr8evctm00wv0lzdxy5hrp4ekz5cxcn5vcqz90muz4el37t37g4vx54sahv6m27f3yus094jqa9j7r5lr4w3gxsthqmhumzgvvfapux00gmr7jtsxk58x292gxs422wec0v0vqhvkaq0ev8jlvp47z9552k4utdrdqw2cge5c8hs7dy3nrrw3df33894qvm22newmnx6twfe5ghnfwg4jft9fhkmp5vvwa5hrvvzn0d52lvajt2k7tsrknn7rryhhz7kq99s5qp7ptp72qa6gq3q9mphx4nq2knvcv0jzur8py7d7haslwtzsxwy4uru6w25q96x6vq42832gqy32gpzqu6pls0nyny2jprgltlwpwsktvn6p8vur9xnnfcy6sx8jrcwuy3et7f3e4lwpvc7q3u6zqypjgsrsevylcd3zkup5gehrtp5g64ra90a5sy5y5ekf3j5hsx9hzqjlvhmxkx8lvjvqc9nhzt0c05ytu3qqatrcrfrm0t445whvdajuad9jx6f8htt4c7dq0ssch6d0w68n3emy0cq8aruxfhqcgp8hgjpt59hqrhlwpz55qdmyfawmt038ymxd3y29ydsn76uls2fzp3k0nrsp9jnws46mwklw5vy29f3svq0excsgqtgxumd7ssu760f25shycs75g5l9k8kegmms24uqz9qlt54v9xkjv387n5prkz54cmuw8kfeamu7cpzvm6lxht0rt6mjqgrxp6p6e4djspyl7w4t7nsydn76rknalftx3987vc4txkcf8nae8qusy9fwnqpd9s6mmeldrzl4g2zdyh66rc3qg8nuhjktvtrssy4qu39tp6jnvpdfdqqqqqqqqqqjdea44","certificate1qyqsqqqqqqqqqqxywjqwvqfgjcddcfy0evrdmfspx0z49t5ggd5cfa7n88t3mnjt8tyje7lfyz86zy4m86ycdx9f4uqqqq4m7zt"]],["prehook_private",["verifier1qysqqqqqqqqqqqynpcqsqqqqqqqvqrspqqqqqqqq75nsyqqqqqqqp3c6qgqqqqqqqzztyqgqqqqqqqqvqqqqqqqqqqqz6vrjdzwutcupdqfkcry6g5x485s46nq48uhj87u9q2r4dgkfc8xz3hhtmwsgnypuxww75mssx45p2klvzps69nxeg66l6ptd8nl028x2lu940lhnsvhgd3wurkk2ld9gtp38u976gnjx4jarqwkg53yqqd3284p8ra0qz6wkam3zucdh4fyh6cx7zgawny9gxrm5uv66jtrcmjwqaxgn6vvxfj7309j2nhr3sqd7v35lxvrufsaa86wperu3gpqpnyh2p25drt6fe2a4ffclzzdqyf32ldcuvm335hcl7tx6sst3cq0pu4p5cly2m7rdus6zuv22ntwjpezfskjrrktnw3rjhx3jgzynnr5ach0942q0cv5xpnepz66fwsqhxysxxw5q4nhqq7u8azv5pxqdhmpypw3yh7qy4atr0plwgrsq6s4e74np8avkwnucpjapnh3t5k5q0vsm3m6xhz403pkc57gkdg8e0y5mvhd8c0spl4hgwsg25glddkzqknlfgakj84t2z3qenleu4emqp52vxsx9pdcmmxjs3zptpfk724r4dh7403z9qenxqdrkeun3650jkex3jf7w0clx7cpn9nmcmwmlqruj4qyndqzq8h66kzfu2zkmujg6h6nznuqnj4j4ukknfz28y44rekkg5xh8sw3gqj534znn2hvg0qya45hmgxamajwm5gunu9rdts9wtrdpdd5un98achkrat23m3qxlvc2tfmakemwqhap86pelm3pn7qye30wzmmpvjjj7tgq0ruzzhy6qesqaze6t89mm3nyq9st4cs6v9dkgtuuzyzphw7vtwdyuf87xusp7c09zppmewdlpxnn4lpwgugn0c428xr3667m80tuj367c77g3m07lwaqj85ktk75ekquc7je946qr3nkcumfhw5cyuvh99j33slwn0etzlkwf59u0vpr59cmfstzzer5a9wqzqqqqqqqqdklfq7","certificate1qyqsqqqqqqqqqq8h8za2rp7acnwx3k7qr7fh7dkpup6mpkg304sc0kccurn3xwyk0h9asgc73t4q5y9pfngeg3z5yzqqqpjaynl"]],["approve_public",["verifier1qygqqqqqqqqqqq95fgqqqqqqqqqtgjsqqqqqqqqqs6kqqqqqqqqqqkkzqqqqqqqqqpuhqqqqqqqqqqqvqqqqqqqqqqqzj394vazm38xp56z3l7xr96e0avyjajgjxk9xrlwxj3gjleakemc3p3nx90fct4tyz6n9uv644qgqvcax2xjt7ae6jg6zwdg7d9we9efk7rdw32zwhw3v2v9x44r02hwnj6ehqt6cxjrnhv4gsucgekqqp7dr3j2ev8qqp49um47966ehnfmyetdwwxwl859awju7avard4xx902vxrag6fkxhknzdruu7va9q80pk57xcttgw7uqkz75uyxwqs7hwrvf63qa9rw2lrh8nehheh5mpuxqvuw5hm70j8yxhjf52syqdqryum0x3gne3l6ugyxrpjnkaaejhr2n6sfz3ly32h32tk6ejf3fhgnstk5za629y78gk68vcepmqjqjm40p9kljcf22hd79uhlp4sdfsu5njj8xp5f5a2c5n3uamvrd4afc5xqfj945z6snsv7k44d4unypx20y982djdc0a46g2vvuq4dezm2gl34mk5t27u92w8epxv4c8t2dmsqjnezp34ppk6zk3tlccdycz5vmm0v65fp95en6v22mdl7xw24762ulzrxwac4sf7r0hsf43p793dartlr5ckplx400tpkg63v5s8exu3c259fkug8zlqkkul2ag9k94tnxtxvm6wfg4z69ymzddw3jswkdnj66dsjae6rj6cz4c925qqz8z5yekprd740u2xenvdyxdj9vnnkc3lx2ds3ymeeyrc5jw8fr37r43d8fly4c72gun5rus43ytuqjfu43dl9u2luqk4vgclaxhvmrvddpjpm7mljumqjdz02ucan0czmsgfa42ux47nc032ns408s6pypmtqez5fq7lzvw5hvxs6y9h43nckz949y6ca3z9lruvvppnmypwuch7us4qga7p8ha6ty5pxkxqncpwwjs5p663lqfa9jcjg4jzuwgtph0r4pv8n67yt543vyzdq6te6lepssqqqqqqqqqz3l5zn","certificate1qyqsqqqqqqqqqqyzj8tz39t4k3vx9jjjtn09uc9pf6y4dlk4gaplzgqdvcjs4j4254p6j5ad2mds8l2n50wx7qmwnvqqqmqyz33"]],["unapprove_public",["verifier1qygqqqqqqqqqqq95fgqqqqqqqqqtgjsqqqqqqqqqs6kqqqqqqqqqqkkzqqqqqqqqqpuhqqqqqqqqqqqvqqqqqqqqqqqdfnldv73j83wvjc9n6az6jdu2n002ymqaqrhfmmq3tz669nd66zrksm2lgf3xrja8u70z79d4ysgqjk2v4h7ljyjgx8ahq0fl8wn0myje7peqh4ftfdqz4yq69edz3ggrqgdr5nlr60j4dg4fy99q5wnsp7dr3j2ev8qqp49um47966ehnfmyetdwwxwl859awju7avard4xx902vxrag6fkxhknzdruu7va9qyff847f6qwl80uhw0k9rnx0qj429res34r074jdl84xq68ernxsfzhkplslhek2sff8dsh3huk80qg8p6t330q5mu92678ktx6jchp2gxh89g68wn6wd5v27vx3e5m2pqanecr7fv3u65j9de7pyg8jvxqzm40p9kljcf22hd79uhlp4sdfsu5njj8xp5f5a2c5n3uamvrd4afc5xqfj945z6snsv7k44d4unyppyh5ye33jn56sl8usmr2m8as8upnsk9pauy9wjygw40wp8n0snk4y8vt4q3tgqm2nylqz89nvq0sqhqat6ttxll5p5qg5nvrvawazuytytuevwgydhpwpugp38esls29544fy0l787f839s0edmgaqahsrexu3c259fkug8zlqkkul2ag9k94tnxtxvm6wfg4z69ymzddw3jswkdnj66dsjae6rj6cz4c925qq9vklzyur22dyt5vqqvncha7w7cjznsd4pcpe9sfrv5dcdu5tx5ky6jn0078t8jklvvgewz46nl8jqyk7yevwhykz4xpmzvrlu7e2rwmgvukj2tf28zq9hucxdtv4mgnyxfmjhf2ap8l5uaphn8yfd7tecqmtqez5fq7lzvw5hvxs6y9h43nckz949y6ca3z9lruvvppnmypwuch7us4qga7p8ha6ty5pxkxqncqtgthwqwx4y9666rx2tmqw7nzglg4ahnkfaw20dtaz9702m0xh0vy33qqqqqqqqqq9zjdxw","certificate1qyqsqqqqqqqqqqphugs89v7djwls7ctxj4hvel5k85pggd5jdapvr2zg06fy995wvgha6as4f29tzxek5l06zl2yksqqq9ldkjq"]],["transfer_from_public",["verifier1qygqqqqqqqqqqqxgdgqqqqqqqqqd26sqqqqqqqqqvyqqzqqqqqqqpegwqyqqqqqqqzn2sqqqqqqqqqqvqqqqqqqqqqqrgjf7k9g6rr5d4pdg4t0qnwyxwpxlnkr5pk2y27p42aqruz7dztfzd2wcnmnsfm5d64fk09e0yr5qyclsgkgw83f8lrvtsl0e3xzk0ffccqpdr64k0x8q3r7utfhdqmgaaqth5v8uj930rm8euwflvhqqp2pg2na879rp3qudglp03naw9x4fa6dzw4p9t5jlvq4wkel2gu8k9p8alct0v3dk67ldsvvj2j9qs8vn7hvdncw6575hhzlat2thkr0kvxnkxnwc9kzpgxydxdgfgpslthslepk0qk8ulh5qr2cxvv93yq8n2z2vaf74f9wx2lhs2gmk2qsrrpdmjr45p9hs3ay4228shg2pjnyagl5nq0q6zmhupdcac3gwxwqfflrd3cqxwhyaymjyq6lkqjfnlslp4edfafy3583lc0ncwnlclk77fvv4m4jpzjkkpgwsk9sjdecqqdfukvw09szh7rw6l47yuy9tp92u0p3f94pu7v49eq90sela4amgcyrhavglut0spfxk83m53kpspet4he2kur4900nya0dak5l2hcsgva2eu3s22gfl2xeg36zvztn3fet7uzl7qqfta3qmxds6d2zzq8fkqzvm28vtqy3kcmvv4qvuq54kacgnc95ssfcja8r53maxf5twlpg9kvmx4cncjgnc00ggrsk3vqdfaf0ulw6kc55dgydmsq5tteqyvqkf2jxkz2rr8hhvlmmzf3ygxdsnr3deyencrkus566nyus5dkqrnsgna0nqhmuyg0mflh2dhl49jhyw0xqutt7tt6h7gewll42gnwyn26cezmhu8g2kwftyc59juk5pvct8qxkcxn95gj9kltxmmdadfp68wcccy6tpjr5cp794auu9nc0xh9tzm7esjjjxpmh6fxwc7qgcqz42jj3m2c7gqcglukxrzs8r6x30vr3e4qx39ldt96ej5xjz9zwxhwysqqqqqqqqq69v486","certificate1qyqsqqqqqqqqqqywt3kl073jwa6phg44nn5r5ysv7zru6syckl9xy9mcv23c5rzv5c2n3rfu4ct274juyl7z3hzkhkqqqeqvdss"]],["transfer_from_public_to_private",["verifier1qygqqqqqqqqqqqx24cqqqqqqqqqwetsqqqqqqqqqqzgqzqqqqqqqq3ucqyqqqqqqqzepjqgqqqqqqqqvqqqqqqqqqqqvj9mzuwdc2vsy7y674l855pmhrlsfjf2yewd3vvxl9akh3fxqtrnr2sx466gws92hq0atwldlffvqfm08ql7sqxh8dwkzp6ts6vtphv6hmj89tq5hnmansyjhlq55xah5z93fp3n9ns3azj8dz2axpvgqp6l4k3mez28qexdwxg0slhtgzx57hk9zh7psqxnu54w37gvjx3nrel4vm526r6hf7knve9wv9qarqxdppejj8h4v8r5m76hyad7s0kral3t5rpezhytucgvzwqr0r0r275ntpuk3fpw7eaetwxupdz6gqqxt2ujkqkfhdl3yg4sun6uf2zvx9vkmh9k2y5gxwqfdcdj6qk3vjjn44rg30nj26h9mhfz3dj2uzyqs8alxz5e7ywsag0490qxfy5c9sdlvyxvyn0hald56tz02x85skd3gjvvfhewymh2jp3tdlysfuzuq53hfcm66uhmqz68mm432l3kmcznc3lxk7f6tlsrwgv8p8we67v7v7xy37wd8z6n8wkgu77afxf6czul4ctvfwzrlzg6pavy7s9ltts0a9ft3f6guvuscc5chws3fe2xxcszcfv0cgkpzuhg8f3pzpesfs86c053u8e7tr6jhf9g0pxe7vwm5fsqrkn6ytkmh88wet4z8peqywn5hgl7ryup6hn7hxtzr59ejwqtzstwzr0yrzdn9s8mycw92guhmatgzg070u4mdmvuunluav7srhas3w5vrethyus3mge6tap3kd6qnva5a3zlf8tyrgl83eh5jy59dq6wwq46usrl3p995eljsdjd4f7jpel4syultaz9ks3v7rynv6supgv4lrgecm5srglmffenk0vcw2aunsks38cw9p50454r4d0krx42jmwllykpd90df7s3pe9jzgpqgpwpxd6jwr4c2drtz9wdt8lrkhc6nnwlgg7za7gw2qeadexgfv50x3rwsqqqqqqqqqvqgyy2","certificate1qyqsqqqqqqqqqqz03aym43ld30ryp9x0zq59y2kvw65ycp5ttl0ll72j0q905juexzc0g7yjvv9w3z7qkjh7efzz2jqqqthftqn"]]]},"fee":{"transition":{"id":"au15su0w2ntw0m3m6esrpsn2qr8gd7k8agyjhw7e4sl30safu992v8ss2xvuy","program":"credits.aleo","function":"fee_public","inputs":[{"type":"public","id":"4204621360079531345924164626937619166045633684764009904150285352606157294663field","value":"75798350u64"},{"type":"public","id":"4735952515899317750664065480769415405047337445011285358998869614339923087468field","value":"0u64"},{"type":"public","id":"5334314194126344724134730353523431566409568078871284993701941218344284892420field","value":"7219828396534389733733442787671942045312203808091523682877515319252858785481field"}],"outputs":[{"type":"future","id":"6174508564661104955080204863722384082623898596601834669252840681217993530846field","value":"{\\n  program_id: credits.aleo,\\n  function_name: fee_public,\\n  arguments: [\\n    aleo1mgjcqhnar38zvschjwxr830pwk57ywnce8rp7smf8c3yp2xexvgq40d4fx,\\n    75798350u64\\n  ]\\n}"}],"tpk":"2027543674195242663337742133501773784411198927637377797704373036741782384715group","tcm":"997104720953711142107147047071806792302946972417712248013297291566700066824field","scm":"8400595953876995264554804889824421621333978905052559491209753497117901891982field"},"global_state_root":"sr1a0uv94c0224sgy56r7fxwalh77dy67w327ahcdduqxglx3j0supqaykkvn","proof":"proof1qyqsqqqqqqqqqqqpqqqqqqqqqqq9z8dp4t232hgt85c5dsxsv8vd3r7sz26su9ec48g979djme82mssyj825938a835c330mqgdwk0ypqyjhwpgw0sjkww227dygndxsf23tnl6wgnx5pp48jh9rfv4kewcr8wptakq9wvyshdc9qexlt6m5jqtcenv29u4xvgj2c0hmew32nt24uvgnvdjnqf2cu7l0m7cy4537u7nqdheksf5dx38qtgaljs3j7gqrx8uj3dxyu94pr789p44d44757a30ac6tv6gq3ygmsvz82dsjv2f8h5lj7y6c827e2n9dqndg94cqh7nvx7kc94haqjv8uyhzp52hcxwhgax07gj4d649taaumzvny66ql3s3a739gqy9wfmfd5mc7l0gq3gyks8rm78tud0d5pvc0kmq42aremt7yjp9vy9rrx69y76vm5fxa29pqtczlsthxx8a0v67w762sqnfutzqg4akywa42dehjlc7s43dx6s6yry4qyhpzxkemmja3q6u37wg4dc5z662n8cthv9czmj3jqftppk0hx3a3d5k8ukl4huwgqma4wr89d4nxz8pcqpxpzx8ztnmhc7w5m0ph96dweewqv4fyu3xm7qfj274yg7kfnxm3wnwpjc0pjeh0cc3gafx7p4trrw496egkt2k7lr6tjgdtee5vz97pc2a9r9lmfvpuyfq7dva95qrdvkrq5apep883g0uxj3vuz8qsykfe3uaz7gtjyph9ygycry8tu7nnuysmxqczm5mz753d79ysecgqnvjaeek5q02uz2egw7tgnt3kd6mpcc57yjyd8mtlhhp489pxspz2nr8rhadeuy9p5jvx0t2mkqkr7a7w75z6gt2j5ajcxuurhrns76lrrawttvz29xqya8gx33fq5gce3vpkmfvt0dpzj6f9ykvts7rlcxvesqkrkz435sdwauj69dxcp9fg2x3fgen2wstlcc7t6p7mp07d6j2tvetvgzfqqx6ldxucxq0qn33rtsheh7umme6zhzmdpklg0dyhh49g9n28kpkup8zgc7fgj7n5fllufz9c3f3gh49qy2aqeqr9fg99hgyqvrrhqm7pw0e9mklv7v254r84424phxucl2gpx3hjgy5q8am38gwug025pxp95jyw99gcjt8yzqcyjc25mwf2ml9av39fa4998ktglduh30pvlcgqvqqqqqqqqqqpeq5luz4wutddrrc2whkaze0kkv757lqjlw7nly3ezl97dxufq9m5zpyfafhfhat3vv3k67z2gn9qyq2jlusmp92fyshvpff9v2p4ym2x90zy0v57jtc29edhh8ejf3depnrcqde3kdwew8sjxuvhj4hl65qq9xe5efg20gf5q2l0vc8yaaerzflelxa6j3sn2tmfszve8zh7rjq27xqn4g3lt93rt8pf9282z8eu49ekyukal64v8rtyd7y9gapktz42f5rf4agqcn0ym34mf3twh8eqqqqa8fq22"}}';