{"version":3,"file":"523.bundle.js","mappings":"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","sources":["webpack://aleo-website/../../src/account.ts","webpack://aleo-website/../../src/utils.ts","webpack://aleo-website/../../src/network-client.ts","webpack://aleo-website/../../src/function-key-provider.ts","webpack://aleo-website/../../src/offline-key-provider.ts","webpack://aleo-website/../../src/record-provider.ts","webpack://aleo-website/../../src/managed-worker.ts","webpack://aleo-website/../../src/program-manager.ts","webpack://aleo-website/../../src/browser.ts","webpack://aleo-website/aleo_wasm.js","webpack://aleo-website/../node_modules/comlink/dist/esm/comlink.mjs"],"sourcesContent":["import {\n  Address,\n  PrivateKey,\n  Signature,\n  ViewKey,\n  PrivateKeyCiphertext,\n  RecordCiphertext,\n} from \"./browser\";\n\ninterface AccountParam {\n  privateKey?: string;\n  seed?: Uint8Array;\n}\n\n/**\n * Key Management class. Enables the creation of a new Aleo Account, importation of an existing account from\n * an existing private key or seed, and message signing and verification functionality.\n *\n * An Aleo Account is generated from a randomly generated seed (number) from which an account private key, view key,\n * and a public account address are derived. The private key lies at the root of an Aleo account. It is a highly\n * sensitive secret and should be protected as it allows for creation of Aleo Program executions and arbitrary value\n * transfers. The View Key allows for decryption of a user's activity on the blockchain. The Address is the public\n * address to which other users of Aleo can send Aleo credits and other records to. This class should only be used\n * environments where the safety of the underlying key material can be assured.\n *\n * @example\n * // Create a new account\n * const myRandomAccount = new Account();\n *\n * // Create an account from a randomly generated seed\n * const seed = new Uint8Array([94, 91, 52, 251, 240, 230, 226, 35, 117, 253, 224, 210, 175, 13, 205, 120, 155, 214, 7, 169, 66, 62, 206, 50, 188, 40, 29, 122, 40, 250, 54, 18]);\n * const mySeededAccount = new Account({seed: seed});\n *\n * // Create an account from an existing private key\n * const myExistingAccount = new Account({privateKey: 'myExistingPrivateKey'})\n *\n * // Sign a message\n * const hello_world = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n * const signature = myRandomAccount.sign(hello_world)\n *\n * // Verify a signature\n * myRandomAccount.verify(hello_world, signature)\n */\nexport class Account {\n  _privateKey: PrivateKey;\n  _viewKey: ViewKey;\n  _address: Address;\n\n  constructor(params: AccountParam = {}) {\n    try {\n      this._privateKey = this.privateKeyFromParams(params);\n    } catch (e) {\n      console.error(\"Wrong parameter\", e);\n      throw new Error(\"Wrong Parameter\");\n    }\n    this._viewKey = ViewKey.from_private_key(this._privateKey);\n    this._address = Address.from_private_key(this._privateKey);\n  }\n\n  /**\n   * Attempts to create an account from a private key ciphertext\n   * @param {PrivateKeyCiphertext | string} ciphertext\n   * @param {string} password\n   * @returns {PrivateKey}\n   *\n   * @example\n   * const ciphertext = PrivateKey.newEncrypted(\"password\");\n   * const account = Account.fromCiphertext(ciphertext, \"password\");\n   */\n  public static fromCiphertext(ciphertext: PrivateKeyCiphertext | string, password: string) {\n    try {\n      ciphertext = (typeof ciphertext === \"string\") ? PrivateKeyCiphertext.fromString(ciphertext) : ciphertext;\n      const _privateKey = PrivateKey.fromPrivateKeyCiphertext(ciphertext, password);\n      return new Account({ privateKey: _privateKey.to_string() });\n    } catch(e) {\n      throw new Error(\"Wrong password or invalid ciphertext\");\n    }\n  }\n\n  private privateKeyFromParams(params: AccountParam) {\n    if (params.seed) {\n      return PrivateKey.from_seed_unchecked(params.seed);\n    }\n    if (params.privateKey) {\n      return PrivateKey.from_string(params.privateKey);\n    }\n    return new PrivateKey();\n  }\n\n  privateKey() {\n    return this._privateKey;\n  }\n\n  viewKey() {\n    return this._viewKey;\n  }\n\n  address() {\n    return this._address;\n  }\n\n  toString() {\n    return this.address().to_string()\n  }\n\n  /**\n   * Encrypt the account's private key with a password\n   * @param {string} ciphertext\n   * @returns {PrivateKeyCiphertext}\n   *\n   * @example\n   * const account = new Account();\n   * const ciphertext = account.encryptAccount(\"password\");\n   */\n  encryptAccount(password: string) {\n    return this._privateKey.toCiphertext(password);\n  }\n\n  /**\n   * Decrypts a Record in ciphertext form into plaintext\n   * @param {string} ciphertext\n   * @returns {Record}\n   *\n   * @example\n   * const account = new Account();\n   * const record = account.decryptRecord(\"record1ciphertext\");\n   */\n  decryptRecord(ciphertext: string) {\n    return this._viewKey.decrypt(ciphertext);\n  }\n\n  /**\n   * Decrypts an array of Records in ciphertext form into plaintext\n   * @param {string[]} ciphertexts\n   * @returns {Record[]}\n   *\n   * @example\n   * const account = new Account();\n   * const record = account.decryptRecords([\"record1ciphertext\", \"record2ciphertext\"]);\n   */\n  decryptRecords(ciphertexts: string[]) {\n    return ciphertexts.map((ciphertext) => this._viewKey.decrypt(ciphertext));\n  }\n\n  /**\n   * Determines whether the account owns a ciphertext record\n   * @param {RecordCipherText | string} ciphertext\n   * @returns {boolean}\n   *\n   * @example\n   * // Create a connection to the Aleo network and an account\n   * const connection = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n   * const account = Account.fromCiphertext(\"ciphertext\", \"password\");\n   *\n   * // Get a record from the network\n   * const record = connection.getBlock(1234);\n   * const recordCipherText = record.transactions[0].execution.transitions[0].id;\n   *\n   * // Check if the account owns the record\n   * if account.ownsRecord(recordCipherText) {\n   *     // Then one can do something like:\n   *     // Decrypt the record and check if it's spent\n   *     // Store the record in a local database\n   *     // Etc.\n   * }\n   */\n  ownsRecordCiphertext(ciphertext: RecordCiphertext | string) {\n    if (typeof ciphertext === 'string') {\n      try {\n        const ciphertextObject = RecordCiphertext.fromString(ciphertext);\n        return ciphertextObject.isOwner(this._viewKey);\n      }\n      catch (e) {\n        return false;\n      }\n    }\n    else {\n      return ciphertext.isOwner(this._viewKey);\n    }\n  }\n\n  /**\n   * Signs a message with the account's private key.\n   * Returns a Signature.\n   *\n   * @param {Uint8Array} message\n   * @returns {Signature}\n   *\n   * @example\n   * const account = new Account();\n   * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n   * account.sign(message);\n   */\n  sign(message: Uint8Array) {\n    return this._privateKey.sign(message);\n  }\n\n  /**\n   * Verifies the Signature on a message.\n   *\n   * @param {Uint8Array} message\n   * @param {Signature} signature\n   * @returns {boolean}\n   *\n   * @example\n   * const account = new Account();\n   * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n   * const signature = account.sign(message);\n   * account.verify(message, signature);\n   */\n  verify(message: Uint8Array, signature: Signature) {\n    return this._address.verify(message, signature);\n  }\n\n}\n","export function parseJSON(json: string): any {\n    function revive(key: string, value: any, context: any) {\n        if (Number.isInteger(value)) {\n            return BigInt(context.source);\n\n        } else {\n            return value;\n        }\n    }\n\n    return JSON.parse(json, revive as any);\n}\n\n\nexport async function get(url: URL | string, options?: RequestInit) {\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not get URL \" + url);\n    }\n\n    return response;\n}\n\n\nexport async function post(url: URL | string, options: RequestInit) {\n    options.method = \"POST\";\n\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not post URL \" + url);\n    }\n\n    return response;\n}\n","import { get, post, parseJSON } from \"./utils\";\nimport {\n  Account,\n  Block,\n  RecordCiphertext,\n  Program,\n  RecordPlaintext,\n  PrivateKey,\n  Transaction,\n  TransactionModel,\n  logAndThrow\n} from \"./browser\";\n\ntype ProgramImports = { [key: string]: string | Program };\n\ninterface AleoNetworkClientOptions {\n  headers?: { [key: string]: string };\n}\n\n/**\n * Client library that encapsulates REST calls to publicly exposed endpoints of Aleo nodes. The methods provided in this\n * allow users to query public information from the Aleo blockchain and submit transactions to the network.\n *\n * @param {string} host\n * @example\n * // Connection to a local node\n * const localNetworkClient = new AleoNetworkClient(\"http://localhost:3030\");\n *\n * // Connection to a public beacon node\n * const publicnetworkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n */\nclass AleoNetworkClient {\n  host: string;\n  headers: { [key: string]: string };\n  account: Account | undefined;\n\n  constructor(host: string, options?: AleoNetworkClientOptions) {\n    this.host = host + \"/%%NETWORK%%\";\n\n    if (options && options.headers) {\n      this.headers = options.headers;\n\n    } else {\n      this.headers = {\n        // This is replaced by the actual version by a Rollup plugin\n        \"X-Aleo-SDK-Version\": \"%%VERSION%%\",\n      };\n    }\n  }\n\n  /**\n   * Set an account to use in networkClient calls\n   *\n   * @param {Account} account\n   * @example\n   * const account = new Account();\n   * networkClient.setAccount(account);\n   */\n  setAccount(account: Account) {\n    this.account = account;\n  }\n\n  /**\n   * Return the Aleo account used in the networkClient\n   *\n   * @example\n   * const account = networkClient.getAccount();\n   */\n  getAccount(): Account | undefined {\n    return this.account;\n  }\n\n  /**\n   * Set a new host for the networkClient\n   *\n   * @param {string} host The address of a node hosting the Aleo API\n   * @param host\n   */\n  setHost(host: string) {\n    this.host = host + \"/%%NETWORK%%\";\n  }\n\n  async fetchData<Type>(\n      url = \"/\",\n  ): Promise<Type> {\n    try {\n      const response = await get(this.host + url, {\n        headers: this.headers\n      });\n\n      const text = await response.text();\n      return parseJSON(text);\n\n    } catch (error) {\n      throw new Error(\"Error fetching data.\");\n    }\n  }\n\n  /**\n   * Attempts to find unspent records in the Aleo blockchain for a specified private key\n   * @param {number} startHeight - The height at which to start searching for unspent records\n   * @param {number} endHeight - The height at which to stop searching for unspent records\n   * @param {string | PrivateKey} privateKey - The private key to use to find unspent records\n   * @param {number[]} amounts - The amounts (in microcredits) to search for (eg. [100, 200, 3000])\n   * @param {number} maxMicrocredits - The maximum number of microcredits to search for\n   * @param {string[]} nonces - The nonces of already found records to exclude from the search\n   *\n   * @example\n   * // Find all unspent records\n   * const privateKey = \"[PRIVATE_KEY]\";\n   * const records = networkClient.findUnspentRecords(0, undefined, privateKey);\n   *\n   * // Find specific amounts\n   * const startHeight = 500000;\n   * const amounts = [600000, 1000000];\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, amounts);\n   *\n   * // Find specific amounts with a maximum number of cumulative microcredits\n   * const maxMicrocredits = 100000;\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, undefined, maxMicrocredits);\n   */\n  async findUnspentRecords(\n      startHeight: number,\n      endHeight: number | undefined,\n      privateKey: string | PrivateKey | undefined,\n      amounts: number[] | undefined,\n      maxMicrocredits?: number | undefined,\n      nonces?: string[] | undefined,\n  ): Promise<Array<RecordPlaintext>> {\n    nonces = nonces || [];\n    // Ensure start height is not negative\n    if (startHeight < 0) {\n      throw new Error(\"Start height must be greater than or equal to 0\");\n    }\n\n    // Initialize search parameters\n    const records = new Array<RecordPlaintext>();\n    let start;\n    let end;\n    let resolvedPrivateKey: PrivateKey;\n    let failures = 0;\n    let totalRecordValue = BigInt(0);\n    let latestHeight: number;\n\n    // Ensure a private key is present to find owned records\n    if (typeof privateKey === \"undefined\") {\n      if (typeof this.account === \"undefined\") {\n        throw new Error(\"Private key must be specified in an argument to findOwnedRecords or set in the AleoNetworkClient\");\n      } else {\n        resolvedPrivateKey = this.account._privateKey;\n      }\n    } else {\n      try {\n        resolvedPrivateKey = privateKey instanceof PrivateKey ? privateKey : PrivateKey.from_string(privateKey);\n      } catch (error) {\n        throw new Error(\"Error parsing private key provided.\");\n      }\n    }\n    const viewKey = resolvedPrivateKey.to_view_key();\n\n    // Get the latest height to ensure the range being searched is valid\n    try {\n      const blockHeight = await this.getLatestHeight();\n      if (typeof blockHeight === \"number\") {\n        latestHeight = blockHeight;\n      } else {\n        throw new Error(\"Error fetching latest block height.\");\n      }\n    } catch (error) {\n      throw new Error(\"Error fetching latest block height.\");\n    }\n\n    // If no end height is specified or is greater than the latest height, set the end height to the latest height\n    if (typeof endHeight === \"number\" && endHeight <= latestHeight) {\n      end = endHeight\n    } else {\n      end = latestHeight;\n    }\n\n    // If the starting is greater than the ending height, return an error\n    if (startHeight > end) {\n      throw new Error(\"Start height must be less than or equal to end height.\");\n    }\n\n    // Iterate through blocks in reverse order in chunks of 50\n    while (end > startHeight) {\n      start = end - 50;\n      if (start < startHeight) {\n        start = startHeight;\n      }\n      try {\n        // Get 50 blocks (or the difference between the start and end if less than 50)\n        const blocks = await this.getBlockRange(start, end);\n        end = start;\n        // Iterate through blocks to find unspent records\n        for (let i = 0; i < blocks.length; i++) {\n          const block = blocks[i];\n          const transactions = block.transactions;\n          if (!(typeof transactions === \"undefined\")) {\n            for (let j = 0; j < transactions.length; j++) {\n              const confirmedTransaction = transactions[j];\n              // Search for unspent records in execute transactions of credits.aleo\n              if (confirmedTransaction.type == \"execute\") {\n                const transaction = confirmedTransaction.transaction;\n                if (transaction.execution && !(typeof transaction.execution.transitions == \"undefined\")) {\n                  for (let k = 0; k < transaction.execution.transitions.length; k++) {\n                    const transition = transaction.execution.transitions[k];\n                    // Only search for unspent records in credits.aleo (for now)\n                    if (transition.program !== \"credits.aleo\") {\n                      continue;\n                    }\n                    if (!(typeof transition.outputs == \"undefined\")) {\n                      for (let l = 0; l < transition.outputs.length; l++) {\n                        const output = transition.outputs[l];\n                        if (output.type === \"record\") {\n                          try {\n                            // Create a wasm record ciphertext object from the found output\n                            const record = RecordCiphertext.fromString(output.value);\n                            // Determine if the record is owned by the specified view key\n                            if (record.isOwner(viewKey)) {\n                              // Decrypt the record and get the serial number\n                              const recordPlaintext = record.decrypt(viewKey);\n\n                              // If the record has already been found, skip it\n                              const nonce = recordPlaintext.nonce();\n                              if (nonces.includes(nonce)) {\n                                continue;\n                              }\n\n                              // Otherwise record the nonce that has been found\n                              const serialNumber = recordPlaintext.serialNumberString(resolvedPrivateKey, \"credits.aleo\", \"credits\");\n                              // Attempt to see if the serial number is spent\n                              try {\n                                await this.getTransitionId(serialNumber);\n                              } catch (error) {\n                                // If it's not found, add it to the list of unspent records\n                                if (!amounts) {\n                                  records.push(recordPlaintext);\n                                  // If the user specified a maximum number of microcredits, check if the search has found enough\n                                  if (typeof maxMicrocredits === \"number\") {\n                                    totalRecordValue += recordPlaintext.microcredits();\n                                    // Exit if the search has found the amount specified\n                                    if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                      return records;\n                                    }\n                                  }\n                                }\n                                // If the user specified a list of amounts, check if the search has found them\n                                if (!(typeof amounts === \"undefined\") && amounts.length > 0) {\n                                  let amounts_found = 0;\n                                  if (recordPlaintext.microcredits() > amounts[amounts_found]) {\n                                      amounts_found += 1;\n                                      records.push(recordPlaintext);\n                                      // If the user specified a maximum number of microcredits, check if the search has found enough\n                                      if (typeof maxMicrocredits === \"number\") {\n                                        totalRecordValue += recordPlaintext.microcredits();\n                                        // Exit if the search has found the amount specified\n                                        if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                          return records;\n                                        }\n                                      }\n                                      if (records.length >= amounts.length) {\n                                        return records;\n                                      }\n                                  }\n                                }\n                              }\n                            }\n                          } catch (error) {\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // If there is an error fetching blocks, log it and keep searching\n        console.warn(\"Error fetching blocks in range: \" + start.toString() + \"-\" + end.toString());\n        console.warn(\"Error: \", error);\n        failures += 1;\n        if (failures > 10) {\n          console.warn(\"10 failures fetching records reached. Returning records fetched so far\");\n          return records;\n        }\n      }\n    }\n    return records;\n  }\n\n  /**\n   * Returns the contents of the block at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const block = networkClient.getBlock(1234);\n   */\n  async getBlock(height: number): Promise<Block> {\n    try {\n      const block = await this.fetchData<Block>(\"/block/\" + height);\n      return block;\n    } catch (error) {\n      throw new Error(\"Error fetching block.\");\n    }\n  }\n\n  /**\n   * Returns a range of blocks between the specified block heights\n   *\n   * @param {number} start\n   * @param {number} end\n   * @example\n   * const blockRange = networkClient.getBlockRange(2050, 2100);\n   */\n  async getBlockRange(start: number, end: number): Promise<Array<Block>> {\n    try {\n      return await this.fetchData<Array<Block>>(\"/blocks?start=\" + start + \"&end=\" + end);\n    } catch (error) {\n      const errorMessage = `Error fetching blocks between ${start} and ${end}.`;\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Returns the deployment transaction id associated with the specified program\n   *\n   * @param {Program | string} program\n   * @returns {TransactionModel}\n   */\n  async getDeploymentTransactionIDForProgram(program: Program | string): Promise<string> {\n    if (program instanceof Program) {\n      program = program.toString();\n    }\n    try {\n      const id = await this.fetchData<string>(\"/find/transactionID/deployment/\" + program);\n      return id.replace(\"\\\"\", \"\")\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the deployment transaction associated with a specified program\n   *\n   * @param {Program | string} program\n   * @returns {TransactionModel}\n   */\n  async getDeploymentTransactionForProgram(program: Program | string): Promise<TransactionModel> {\n    try {\n      const transaction_id = <string>await this.getDeploymentTransactionIDForProgram(program);\n      return <TransactionModel>await this.getTransaction(transaction_id);\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the contents of the latest block\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestBlock();\n   */\n  async getLatestBlock(): Promise<Block> {\n    try {\n      return await this.fetchData<Block>(\"/latest/block\") as Block;\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest committee\n   *\n   * @returns {Promise<object>} A javascript object containing the latest committee\n   */\n  async getLatestCommittee(): Promise<object> {\n    try {\n      return await this.fetchData<object>(\"/committee/latest\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest block height\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestHeight();\n   */\n  async getLatestHeight(): Promise<number> {\n    try {\n      return Number(await this.fetchData<bigint>(\"/latest/height\"));\n    } catch (error) {\n      throw new Error(\"Error fetching latest height.\");\n    }\n  }\n\n  /**\n   * Returns the source code of a program given a program ID\n   *\n   * @param {string} programId The program ID of a program deployed to the Aleo Network\n   * @return {Promise<string>} Source code of the program\n   *\n   * @example\n   * const program = networkClient.getProgram(\"hello_hello.aleo\");\n   * const expectedSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * assert.equal(program, expectedSource);\n   */\n  async getProgram(programId: string): Promise<string> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId)\n    } catch (error) {\n      throw new Error(\"Error fetching program\");\n    }\n  }\n\n  /**\n   * Returns a program object from a program ID or program source code\n   *\n   * @param {string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @return {Promise<Program>} Source code of the program\n   *\n   * @example\n   * const programID = \"hello_hello.aleo\";\n   * const programSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   *\n   * // Get program object from program ID or program source code\n   * const programObjectFromID = await networkClient.getProgramObject(programID);\n   * const programObjectFromSource = await networkClient.getProgramObject(programSource);\n   *\n   * // Both program objects should be equal\n   * assert.equal(programObjectFromID.to_string(), programObjectFromSource.to_string());\n   */\n  async getProgramObject(inputProgram: string): Promise<Program> {\n    try {\n      return Program.fromString(inputProgram);\n    } catch (error) {\n      try {\n        return Program.fromString(<string>(await this.getProgram(inputProgram)));\n      } catch (error) {\n        throw new Error(`${inputProgram} is neither a program name or a valid program`);\n      }\n    }\n  }\n\n  /**\n   *  Returns an object containing the source code of a program and the source code of all programs it imports\n   *\n   * @param {Program | string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @returns {Promise<ProgramImports>} Object of the form { \"program_id\": \"program_source\", .. } containing program id & source code for all program imports\n   *\n   * @example\n   * const double_test_source = \"import multiply_test.aleo;\\n\\nprogram double_test.aleo;\\n\\nfunction double_it:\\n    input r0 as u32.private;\\n    call multiply_test.aleo/multiply 2u32 r0 into r1;\\n    output r1 as u32.private;\\n\"\n   * const double_test = Program.fromString(double_test_source);\n   * const expectedImports = {\n   *     \"multiply_test.aleo\": \"program multiply_test.aleo;\\n\\nfunction multiply:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    mul r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * }\n   *\n   * // Imports can be fetched using the program ID, source code, or program object\n   * let programImports = await networkClient.getProgramImports(\"double_test.aleo\");\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program source code\n   * programImports = await networkClient.getProgramImports(double_test_source);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program object\n   * programImports = await networkClient.getProgramImports(double_test);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   */\n  async getProgramImports(inputProgram: Program | string): Promise<ProgramImports> {\n    try {\n      const imports: ProgramImports = {};\n\n      // Get the program object or fail if the program is not valid or does not exist\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n\n      // Get the list of programs that the program imports\n      const importList = program.getImports();\n\n      // Recursively get any imports that the imported programs have in a depth first search order\n      for (let i = 0; i < importList.length; i++) {\n        const import_id = importList[i];\n        if (!imports.hasOwnProperty(import_id)) {\n          const programSource = <string>await this.getProgram(import_id);\n          const nestedImports = <ProgramImports>await this.getProgramImports(import_id);\n          for (const key in nestedImports) {\n            if (!imports.hasOwnProperty(key)) {\n              imports[key] = nestedImports[key];\n            }\n          }\n          imports[import_id] = programSource;\n        }\n      }\n      return imports;\n    } catch (error: any) {\n      logAndThrow(\"Error fetching program imports: \" + error.message);\n    }\n  }\n\n  /**\n   * Get a list of the program names that a program imports\n   *\n   * @param {Program | string} inputProgram - The program id or program source code to get the imports of\n   * @returns {string[]} - The list of program names that the program imports\n   *\n   * @example\n   * const programImportsNames = networkClient.getProgramImports(\"double_test.aleo\");\n   * const expectedImportsNames = [\"multiply_test.aleo\"];\n   * assert.deepStrictEqual(programImportsNames, expectedImportsNames);\n   */\n  async getProgramImportNames(inputProgram: Program | string): Promise<string[]> {\n    try {\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n      return program.getImports();\n    } catch (error: any) {\n      throw new Error(\"Error fetching program imports with error: \" + error.message);\n    }\n  }\n\n  /**\n   * Returns the names of the mappings of a program\n   *\n   * @param {string} programId - The program ID to get the mappings of (e.g. \"credits.aleo\")\n   * @example\n   * const mappings = networkClient.getProgramMappingNames(\"credits.aleo\");\n   * const expectedMappings = [\"account\"];\n   * assert.deepStrictEqual(mappings, expectedMappings);\n   */\n  async getProgramMappingNames(programId: string): Promise<Array<string>> {\n    try {\n      return await this.fetchData<Array<string>>(\"/program/\" + programId + \"/mappings\")\n    } catch (error) {\n      throw new Error(\"Error fetching program mappings - ensure the program exists on chain before trying again\");\n    }\n  }\n\n  /**\n   * Returns the value of a program's mapping for a specific key\n   *\n   * @param {string} programId - The program ID to get the mapping value of (e.g. \"credits.aleo\")\n   * @param {string} mappingName - The name of the mapping to get the value of (e.g. \"account\")\n   * @param {string} key - The key of the mapping to get the value of (e.g. \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\")\n   * @return {Promise<string>} String representation of the value of the mapping\n   *\n   * @example\n   * // Get public balance of an account\n   * const mappingValue = networkClient.getMappingValue(\"credits.aleo\", \"account\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\");\n   * const expectedValue = \"0u64\";\n   * assert.equal(mappingValue, expectedValue);\n   */\n  async getProgramMappingValue(programId: string, mappingName: string, key: string): Promise<string> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId + \"/mapping/\" + mappingName + \"/\" + key)\n    } catch (error) {\n      throw new Error(\"Error fetching mapping value - ensure the mapping exists and the key is correct\");\n    }\n  }\n\n  /**\n   * Returns the latest state/merkle root of the Aleo blockchain\n   *\n   * @example\n   * const stateRoot = networkClient.getStateRoot();\n   */\n  async getStateRoot(): Promise<string> {\n    try {\n      return await this.fetchData<string>(\"/latest/stateRoot\");\n    } catch (error) {\n      throw new Error(\"Error fetching Aleo state root\");\n    }\n  }\n\n  /**\n   * Returns a transaction by its unique identifier\n   *\n   * @param {string} id\n   * @example\n   * const transaction = networkClient.getTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n   */\n  async getTransaction(id: string): Promise<TransactionModel> {\n    try {\n    return await this.fetchData<TransactionModel>(\"/transaction/\" + id);\n    } catch (error) {\n      throw new Error(\"Error fetching transaction.\");\n    }\n  }\n\n  /**\n   * Returns the transactions present at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const transactions = networkClient.getTransactions(654);\n   */\n  async getTransactions(height: number): Promise<Array<TransactionModel>> {\n    try {\n    return await this.fetchData<Array<TransactionModel>>(\"/block/\" + height.toString() + \"/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions.\");\n    }\n  }\n\n  /**\n   * Returns the transactions in the memory pool.\n   *\n   * @example\n   * const transactions = networkClient.getTransactionsInMempool();\n   */\n  async getTransactionsInMempool(): Promise<Array<TransactionModel>> {\n    try {\n      return await this.fetchData<Array<TransactionModel>>(\"/memoryPool/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions from mempool.\");\n    }\n  }\n\n  /**\n   * Returns the transition ID of the transition corresponding to the ID of the input or output.\n   * @param {string} inputOrOutputID - ID of the input or output.\n   *\n   * @example\n   * const transitionId = networkClient.getTransitionId(\"2429232855236830926144356377868449890830704336664550203176918782554219952323field\");\n   */\n  async getTransitionId(inputOrOutputID: string): Promise<string> {\n    try {\n      return await this.fetchData<string>(\"/find/transitionID/\" + inputOrOutputID);\n    } catch (error) {\n      throw new Error(\"Error fetching transition ID.\");\n    }\n  }\n\n  /**\n   * Submit an execute or deployment transaction to the Aleo network\n   *\n   * @param {Transaction | string} transaction  - The transaction to submit to the network\n   * @returns {string} - The transaction id of the submitted transaction or the resulting error\n   */\n  async submitTransaction(transaction: Transaction | string): Promise<string> {\n    const transaction_string = transaction instanceof Transaction ? transaction.toString() : transaction;\n    try {\n      const response = await post(this.host + \"/transaction/broadcast\", {\n        body: transaction_string,\n        headers: Object.assign({}, this.headers, {\n          \"Content-Type\": \"application/json\",\n        }),\n      });\n\n      try {\n        const text = await response.text();\n        return parseJSON(text);\n\n      } catch (error: any) {\n        throw new Error(`Error posting transaction. Aleo network response: ${error.message}`);\n      }\n    } catch (error: any) {\n      throw new Error(`Error posting transaction: No response received: ${error.message}`);\n    }\n  }\n}\n\nexport { AleoNetworkClient, AleoNetworkClientOptions, ProgramImports }\n","import {\n    ProvingKey,\n    VerifyingKey,\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    Key,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PUBLIC_TRANSFER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    PUBLIC_TRANSFER_AS_SIGNER\n} from \"./browser\";\nimport { get } from \"./utils\";\n\ntype FunctionKeyPair = [ProvingKey, VerifyingKey];\ntype CachedKeyPair = [Uint8Array, Uint8Array];\ntype AleoKeyProviderInitParams = {\n    proverUri?: string;\n    verifierUri?: string;\n    cacheKey?: string;\n};\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface KeySearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * AleoKeyProviderParams search parameter for the AleoKeyProvider. It allows for the specification of a proverUri and\n * verifierUri to fetch keys via HTTP from a remote resource as well as a unique cacheKey to store the keys in memory.\n */\nclass AleoKeyProviderParams implements KeySearchParams {\n    name: string | undefined;\n    proverUri: string | undefined;\n    verifierUri: string | undefined;\n    cacheKey: string | undefined;\n\n    /**\n     * Create a new AleoKeyProviderParams object which implements the KeySearchParams interface. Users can optionally\n     * specify a url for the proverUri & verifierUri to fetch keys via HTTP from a remote resource as well as a unique\n     * cacheKey to store the keys in memory for future use. If no proverUri or verifierUri is specified, a cachekey must\n     * be provided.\n     *\n     * @param { AleoKeyProviderInitParams } params - Optional search parameters\n     */\n    constructor(params: {proverUri?: string, verifierUri?: string, cacheKey?: string, name?: string}) {\n        this.proverUri = params.proverUri;\n        this.verifierUri = params.verifierUri;\n        this.cacheKey = params.cacheKey;\n        this.name = params.name;\n    }\n}\n\n/**\n * KeyProvider interface. Enables the retrieval of public proving and verifying keys for Aleo Programs.\n */\ninterface FunctionKeyProvider {\n    /**\n     * Get bond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the bond_public function\n     */\n    bondPublicKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get bond_validator function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the bond_validator function\n     */\n    bondValidatorKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void;\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the unbond_public function\n     */\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a search object which implements the KeySearchParams interface\n     * class IndexDbSearch implements KeySearchParams {\n     *     db: string\n     *     keyId: string\n     *     constructor(params: {db: string, keyId: string}) {\n     *         this.db = params.db;\n     *         this.keyId = params.keyId;\n     *     }\n     * }\n     *\n     * // Create a new object which implements the KeyProvider interface\n     * class IndexDbKeyProvider implements FunctionKeyProvider {\n     *     async functionKeys(params: KeySearchParams): Promise<FunctionKeyPair> {\n     *         return new Promise((resolve, reject) => {\n     *             const request = indexedDB.open(params.db, 1);\n     *\n     *             request.onupgradeneeded = function(e) {\n     *                 const db = e.target.result;\n     *                 if (!db.objectStoreNames.contains('keys')) {\n     *                     db.createObjectStore('keys', { keyPath: 'id' });\n     *                 }\n     *             };\n     *\n     *             request.onsuccess = function(e) {\n     *                 const db = e.target.result;\n     *                 const transaction = db.transaction([\"keys\"], \"readonly\");\n     *                 const store = transaction.objectStore(\"keys\");\n     *                 const request = store.get(params.keyId);\n     *                 request.onsuccess = function(e) {\n     *                     if (request.result) {\n     *                         resolve(request.result as FunctionKeyPair);\n     *                     } else {\n     *                         reject(new Error(\"Key not found\"));\n     *                     }\n     *                 };\n     *                 request.onerror = function(e) { reject(new Error(\"Error fetching key\")); };\n     *             };\n     *\n     *             request.onerror = function(e) { reject(new Error(\"Error opening database\")); };\n     *         });\n     *     }\n     *\n     *     // implement the other methods...\n     * }\n     *\n     *\n     * const keyProvider = new AleoKeyProvider();\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const searchParams = new IndexDbSearch({db: \"keys\", keyId: \"credits.aleo:transferPrivate\"});\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(searchParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair>;\n\n    /**\n     * Get fee_private function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get fee_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get join function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get split function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair>;\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    unBondPublicKeys(): Promise<FunctionKeyPair>;\n\n}\n\n\n/**\n * AleoKeyProvider class. Implements the KeyProvider interface. Enables the retrieval of Aleo program proving and\n * verifying keys for the credits.aleo program over http from official Aleo sources and storing and retrieving function\n * keys from a local memory cache.\n */\nclass AleoKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n    cacheOption: boolean;\n    keyUris: string;\n\n    async fetchBytes(\n        url = \"/\",\n    ): Promise<Uint8Array> {\n        try {\n        const response = await get(url);\n        const data = await response.arrayBuffer();\n        return new Uint8Array(data);\n        } catch (error: any) {\n            throw new Error(\"Error fetching data.\" + error.message);\n        }\n    }\n\n    constructor() {\n        this.keyUris = KEY_STORE;\n        this.cache = new Map<string, CachedKeyPair>();\n        this.cacheOption = false;\n    }\n\n    /**\n     * Use local memory to store keys\n     *\n     * @param {boolean} useCache whether to store keys in local memory\n     */\n    useCache(useCache: boolean) {\n        this.cacheOption = useCache;\n    }\n\n    /**\n     * Clear the key cache\n     */\n    clearCache() {\n        this.cache.clear();\n    }\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair) {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    }\n\n    /**\n     * Determine if a keyId exists in the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair\n     * @returns {boolean} true if the keyId exists in the cache, false otherwise\n     */\n    containsKeys(keyId: string): boolean {\n        return this.cache.has(keyId)\n    }\n\n    /**\n     * Delete a set of keys from the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair to delete from memory\n     * @returns {boolean} true if the keyId exists in the cache and was deleted, false if the key did not exist\n     */\n    deleteKeys(keyId: string): boolean {\n        return this.cache.delete(keyId)\n    }\n\n    /**\n     * Get a set of keys from the cache\n     * @param keyId keyId of a proving and verifying key pair\n     *\n     * @returns {FunctionKeyPair} Proving and verifying keys for the specified program\n     */\n    getKeys(keyId: string): FunctionKeyPair {\n        console.debug(`Checking if key exists in cache. KeyId: ${keyId}`)\n        if (this.cache.has(keyId)) {\n            const [provingKeyBytes, verifyingKeyBytes] = <CachedKeyPair>this.cache.get(keyId);\n            return [ProvingKey.fromBytes(provingKeyBytes), VerifyingKey.fromBytes(verifyingKeyBytes)];\n        } else {\n            throw new Error(\"Key not found in cache.\");\n        }\n    }\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams} params parameters for the key search in form of: {proverUri: string, verifierUri: string, cacheKey: string}\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually using the key provider\n     * const keySearchParams = { \"cacheKey\": \"myProgram:myFunction\" };\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(keySearchParams);\n     */\n    async functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair> {\n        if (params) {\n            let proverUrl;\n            let verifierUrl;\n            let cacheKey;\n            if (\"name\" in params && typeof params[\"name\"] == \"string\") {\n                let key = CREDITS_PROGRAM_KEYS.getKey(params[\"name\"]);\n                return this.fetchCreditsKeys(key);\n            }\n\n            if (\"proverUri\" in params && typeof params[\"proverUri\"] == \"string\") {\n                proverUrl = params[\"proverUri\"];\n            }\n\n            if (\"verifierUri\" in params && typeof params[\"verifierUri\"] == \"string\") {\n                verifierUrl = params[\"verifierUri\"];\n            }\n\n            if (\"cacheKey\" in params && typeof params[\"cacheKey\"] == \"string\") {\n                cacheKey = params[\"cacheKey\"];\n            }\n\n            if (proverUrl && verifierUrl) {\n                return await this.fetchRemoteKeys(proverUrl, verifierUrl, cacheKey);\n            }\n\n            if (cacheKey) {\n                return this.getKeys(cacheKey);\n            }\n        }\n        throw new Error(\"Invalid parameters provided, must provide either a cacheKey and/or a proverUrl and a verifierUrl\");\n    }\n\n    /**\n     * Returns the proving and verifying keys for a specified program from a specified url.\n     *\n     * @param {string} verifierUrl Url of the proving key\n     * @param {string} proverUrl Url the verifying key\n     * @param {string} cacheKey Key to store the keys in the cache\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new AleoKeyProvider object\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.fetchKeys(\n     *     CREDITS_PROGRAM_KEYS.transfer_private.prover,\n     *     CREDITS_PROGRAM_KEYS.transfer_private.verifier,\n     * );\n     */\n    async fetchRemoteKeys(proverUrl: string, verifierUrl: string, cacheKey?: string): Promise<FunctionKeyPair> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return [ProvingKey.fromBytes(value[0]), VerifyingKey.fromBytes(value[1])];\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                    console.debug(\"Fetching verifying keys \" + verifierUrl);\n                    const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                    this.cache.set(cacheKey, [provingKey.toBytes(), verifyingKey.toBytes()]);\n                    return [provingKey, verifyingKey];\n                }\n            }\n            else {\n                // If cache is disabled, fetch the keys and return them\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                return [provingKey, verifyingKey];\n            }\n        } catch (error: any) {\n            throw new Error(`Error: ${error.message} fetching fee proving and verifying keys from ${proverUrl} and ${verifierUrl}.`);\n        }\n    }\n\n    /***\n     * Fetches the proving key from a remote source.\n     *\n     * @param proverUrl\n     * @param cacheKey\n     *\n     * @returns {Promise<ProvingKey>} Proving key for the specified program\n     */\n    async fetchProvingKey(proverUrl: string, cacheKey?: string): Promise<ProvingKey> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return ProvingKey.fromBytes(value[0]);\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl));\n                    return provingKey;\n                }\n            }\n            else {\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl));\n                return provingKey;\n            }\n        } catch (error: any) {\n            throw new Error(`Error: ${error.message} fetching fee proving keys from ${proverUrl}`);\n        }\n    }\n\n    async fetchCreditsKeys(key: Key): Promise<FunctionKeyPair> {\n        try {\n            if (!this.cache.has(key.locator) || !this.cacheOption) {\n                const verifying_key = key.verifyingKey()\n                const proving_key = <ProvingKey>await this.fetchProvingKey(key.prover, key.locator);\n                if (this.cacheOption) {\n                    this.cache.set(CREDITS_PROGRAM_KEYS.bond_public.locator, [proving_key.toBytes(), verifying_key.toBytes()]);\n                }\n                return [proving_key, verifying_key];\n            } else {\n                const keyPair = <CachedKeyPair>this.cache.get(key.locator);\n                return [ProvingKey.fromBytes(keyPair[0]), VerifyingKey.fromBytes(keyPair[1])];\n            }\n        } catch (error: any) {\n            throw new Error(`Error: fetching credits.aleo keys: ${error.message}`);\n        }\n    }\n\n    async bondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.bond_public);\n    }\n\n    bondValidatorKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.bond_validator);\n    }\n\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.claim_unbond_public)\n    }\n\n    /**\n     * Returns the proving and verifying keys for the transfer functions in the credits.aleo program\n     * @param {string} visibility Visibility of the transfer function\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the transfer functions\n     *\n     * @example\n     * // Create a new AleoKeyProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    async transferKeys(visibility: string): Promise<FunctionKeyPair> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_private);\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_private_to_public);\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public);\n        } else if (PUBLIC_TRANSFER_AS_SIGNER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public_as_signer);\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public_to_private);\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the join function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    async joinKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.join);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the split function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the split function\n     * */\n    async splitKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.split);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_private function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the fee function\n     */\n    async feePrivateKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.fee_private);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_public function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the fee function\n     */\n    async feePublicKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.fee_public);\n    }\n\n    /**\n     * Gets a verifying key. If the verifying key is for a credits.aleo function, get it from the wasm cache otherwise\n     *\n     * @returns {Promise<VerifyingKey>} Verifying key for the function\n     */\n    // attempt to fetch it from the network\n    async getVerifyingKey(verifierUri: string): Promise<VerifyingKey> {\n        switch (verifierUri) {\n            case CREDITS_PROGRAM_KEYS.bond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.bond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.bond_validator.verifier:\n                return CREDITS_PROGRAM_KEYS.bond_validator.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.claim_unbond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_private.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_public.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.inclusion.verifier:\n                return CREDITS_PROGRAM_KEYS.inclusion.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.join.verifier:\n                return CREDITS_PROGRAM_KEYS.join.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.set_validator_state.verifier:\n                return CREDITS_PROGRAM_KEYS.set_validator_state.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.split.verifier:\n                return CREDITS_PROGRAM_KEYS.split.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public_as_signer.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public_as_signer.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.unbond_public.verifyingKey();\n            default:\n                try {\n                    /// Try to fetch the verifying key from the network as a string\n                    const response = await get(verifierUri);\n                    const text = await response.text();\n                    return <VerifyingKey>VerifyingKey.fromString(text);\n                } catch (e) {\n                    /// If that fails, try to fetch the verifying key from the network as bytes\n                    try {\n                    return <VerifyingKey>VerifyingKey.fromBytes(await this.fetchBytes(verifierUri));\n                    } catch (inner: any) {\n                        throw new Error(\"Invalid verifying key. Error: \" + inner.message);\n                    }\n                }\n        }\n    }\n\n    unBondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.unbond_public);\n    }\n}\n\nexport {AleoKeyProvider, AleoKeyProviderParams, AleoKeyProviderInitParams, CachedKeyPair, FunctionKeyPair, FunctionKeyProvider, KeySearchParams}\n","import {\n    FunctionKeyProvider,\n    KeySearchParams,\n    FunctionKeyPair,\n    CachedKeyPair,\n    ProvingKey,\n    VerifyingKey,\n    CREDITS_PROGRAM_KEYS,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PUBLIC_TRANSFER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    PUBLIC_TRANSFER_AS_SIGNER\n} from \"./browser\";\n\n/**\n * Search parameters for the offline key provider. This class implements the KeySearchParams interface and includes\n * a convenience method for creating a new instance of this class for each function of the credits.aleo program.\n *\n * @example\n * // If storing a key for a custom program function\n * offlineSearchParams = new OfflineSearchParams(\"myprogram.aleo/myfunction\");\n *\n * // If storing a key for a credits.aleo program function\n * bondPublicKeyParams = OfflineSearchParams.bondPublicKeyParams();\n */\nclass OfflineSearchParams implements KeySearchParams {\n    cacheKey: string | undefined;\n    verifyCreditsKeys: boolean | undefined;\n\n    /**\n     * Create a new OfflineSearchParams instance.\n     *\n     * @param {string} cacheKey - Key used to store the local function proving & verifying keys. This should be stored\n     * under the naming convention \"programName/functionName\" (i.e. \"myprogram.aleo/myfunction\")\n     * @param {boolean} verifyCreditsKeys - Whether to verify the keys against the credits.aleo program,\n     * defaults to false, but should be set to true if using keys from the credits.aleo program\n     */\n    constructor(cacheKey: string, verifyCreditsKeys = false) {\n        this.cacheKey = cacheKey;\n        this.verifyCreditsKeys = verifyCreditsKeys;\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the bond_public function of the credits.aleo program.\n     */\n    static bondPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.bond_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the bond_validator function of the credits.aleo program.\n     */\n    static bondValidatorKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.bond_validator.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the claim_unbond_public function of the\n     */\n    static claimUnbondPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.claim_unbond_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the fee_private function of the credits.aleo program.\n     */\n    static feePrivateKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.fee_private.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the fee_public function of the credits.aleo program.\n     */\n    static feePublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.fee_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the inclusion prover function.\n     */\n    static inclusionKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.inclusion.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the join function of the credits.aleo program.\n     */\n    static joinKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.join.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the set_validator_state function of the credits.aleo program.\n     */\n    static setValidatorStateKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.set_validator_state.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the split function of the credits.aleo program.\n     */\n    static splitKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.split.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_private function of the credits.aleo program.\n     */\n    static transferPrivateKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_private.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_private_to_public function of the credits.aleo program.\n     */\n    static transferPrivateToPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_private_to_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_public function of the credits.aleo program.\n     */\n    static transferPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_public_as_signer function of the credits.aleo program.\n     */\n    static transferPublicAsSignerKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_public_as_signer.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_public_to_private function of the credits.aleo program.\n     */\n    static transferPublicToPrivateKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_public_to_private.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the unbond_public function of the credits.aleo program.\n     */\n    static unbondPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.unbond_public.locator, true);\n    }\n}\n\n/**\n * A key provider meant for building transactions offline on devices such as hardware wallets. This key provider is not\n * able to contact the internet for key material and instead relies on the user to insert Aleo function proving &\n * verifying keys from local storage prior to usage.\n *\n * @example\n * // Create an offline program manager\n * const programManager = new ProgramManager();\n *\n * // Create a temporary account for the execution of the program\n * const account = new Account();\n * programManager.setAccount(account);\n *\n * // Create the proving keys from the key bytes on the offline machine\n * console.log(\"Creating proving keys from local key files\");\n * const program = \"program hello_hello.aleo; function hello: input r0 as u32.public; input r1 as u32.private; add r0 r1 into r2; output r2 as u32.private;\";\n * const myFunctionProver = await getLocalKey(\"/path/to/my/function/hello_hello.prover\");\n * const myFunctionVerifier = await getLocalKey(\"/path/to/my/function/hello_hello.verifier\");\n * const feePublicProvingKeyBytes = await getLocalKey(\"/path/to/credits.aleo/feePublic.prover\");\n *\n * myFunctionProvingKey = ProvingKey.fromBytes(myFunctionProver);\n * myFunctionVerifyingKey = VerifyingKey.fromBytes(myFunctionVerifier);\n * const feePublicProvingKey = ProvingKey.fromBytes(feePublicKeyBytes);\n *\n * // Create an offline key provider\n * console.log(\"Creating offline key provider\");\n * const offlineKeyProvider = new OfflineKeyProvider();\n *\n * // Cache the keys\n * // Cache the proving and verifying keys for the custom hello function\n * OfflineKeyProvider.cacheKeys(\"hello_hello.aleo/hello\", myFunctionProvingKey, myFunctionVerifyingKey);\n *\n * // Cache the proving key for the fee_public function (the verifying key is automatically cached)\n * OfflineKeyProvider.insertFeePublicKey(feePublicProvingKey);\n *\n * // Create an offline query using the latest state root in order to create the inclusion proof\n * const offlineQuery = new OfflineQuery(\"latestStateRoot\");\n *\n * // Insert the key provider into the program manager\n * programManager.setKeyProvider(offlineKeyProvider);\n *\n * // Create the offline search params\n * const offlineSearchParams = new OfflineSearchParams(\"hello_hello.aleo/hello\");\n *\n * // Create the offline transaction\n * const offlineExecuteTx = <Transaction>await this.buildExecutionTransaction(\"hello_hello.aleo\", \"hello\", 1, false, [\"5u32\", \"5u32\"], undefined, offlineSearchParams, undefined, undefined, undefined, undefined, offlineQuery, program);\n *\n * // Broadcast the transaction later on a machine with internet access\n * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n * const txId = await networkClient.broadcastTransaction(offlineExecuteTx);\n */\nclass OfflineKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n\n    constructor() {\n        this.cache = new Map<string, CachedKeyPair>();\n    }\n\n    /**\n     * Get bond_public function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the bond_public function\n     */\n    bondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.bondPublicKeyParams());\n    };\n\n    /**\n     * Get bond_validator function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the bond_public function\n     */\n    bondValidatorKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.bondValidatorKeyParams());\n    };\n\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    };\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the unbond_public function\n     */\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.claimUnbondPublicKeyParams());\n    };\n\n    /**\n     * Get arbitrary function key from the offline key provider cache.\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * /// First cache the keys from local offline resources\n     * const offlineKeyProvider = new OfflineKeyProvider();\n     * const myFunctionVerifyingKey = VerifyingKey.fromString(\"verifier...\");\n     * const myFunctionProvingKeyBytes = await readBinaryFile('./resources/myfunction.prover');\n     * const myFunctionProvingKey = ProvingKey.fromBytes(myFunctionProvingKeyBytes);\n     *\n     * /// Cache the keys for future use with a memorable locator\n     * offlineKeyProvider.cacheKeys(\"myprogram.aleo/myfunction\", [myFunctionProvingKey, myFunctionVerifyingKey]);\n     *\n     * /// When they're needed, retrieve the keys from the cache\n     *\n     * /// First create a search parameter object with the same locator used to cache the keys\n     * const keyParams = new OfflineSearchParams(\"myprogram.aleo/myfunction\");\n     *\n     * /// Then retrieve the keys\n     * const [myFunctionProver, myFunctionVerifier] = await offlineKeyProvider.functionKeys(keyParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair> {\n        return new Promise((resolve, reject) => {\n            if (params === undefined) {\n                reject(new Error(\"No search parameters provided, cannot retrieve keys\"));\n            } else {\n                const keyId = params.cacheKey;\n                const verifyCreditsKeys = params.verifyCreditsKeys;\n                if (this.cache.has(keyId)) {\n                    const [provingKeyBytes, verifyingKeyBytes] = this.cache.get(keyId) as CachedKeyPair;\n                    const provingKey = ProvingKey.fromBytes(provingKeyBytes);\n                    const verifyingKey = VerifyingKey.fromBytes(verifyingKeyBytes);\n                    if (verifyCreditsKeys) {\n                        const keysMatchExpected = this.verifyCreditsKeys(keyId, provingKey, verifyingKey)\n                        if (!keysMatchExpected) {\n                            reject (new Error(`Cached keys do not match expected keys for ${keyId}`));\n                        }\n                    }\n                    resolve([provingKey, verifyingKey]);\n                } else {\n                    reject(new Error(\"Keys not found in cache for \" + keyId));\n                }\n            }\n        });\n    };\n\n    /**\n     * Determines if the keys for a given credits function match the expected keys.\n     *\n     * @returns {boolean} Whether the keys match the expected keys\n     */\n    verifyCreditsKeys(locator: string, provingKey: ProvingKey, verifyingKey: VerifyingKey): boolean {\n        switch (locator) {\n            case CREDITS_PROGRAM_KEYS.bond_public.locator:\n                return provingKey.isBondPublicProver() && verifyingKey.isBondPublicVerifier();\n            case CREDITS_PROGRAM_KEYS.claim_unbond_public.locator:\n                return provingKey.isClaimUnbondPublicProver() && verifyingKey.isClaimUnbondPublicVerifier();\n            case CREDITS_PROGRAM_KEYS.fee_private.locator:\n                return provingKey.isFeePrivateProver() && verifyingKey.isFeePrivateVerifier();\n            case CREDITS_PROGRAM_KEYS.fee_public.locator:\n                return provingKey.isFeePublicProver() && verifyingKey.isFeePublicVerifier();\n            case CREDITS_PROGRAM_KEYS.inclusion.locator:\n                return provingKey.isInclusionProver() && verifyingKey.isInclusionVerifier();\n            case CREDITS_PROGRAM_KEYS.join.locator:\n                return provingKey.isJoinProver() && verifyingKey.isJoinVerifier();\n            case CREDITS_PROGRAM_KEYS.set_validator_state.locator:\n                return provingKey.isSetValidatorStateProver() && verifyingKey.isSetValidatorStateVerifier();\n            case CREDITS_PROGRAM_KEYS.split.locator:\n                return provingKey.isSplitProver() && verifyingKey.isSplitVerifier();\n            case CREDITS_PROGRAM_KEYS.transfer_private.locator:\n                return provingKey.isTransferPrivateProver() && verifyingKey.isTransferPrivateVerifier();\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.locator:\n                return provingKey.isTransferPrivateToPublicProver() && verifyingKey.isTransferPrivateToPublicVerifier();\n            case CREDITS_PROGRAM_KEYS.transfer_public.locator:\n                return provingKey.isTransferPublicProver() && verifyingKey.isTransferPublicVerifier();\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.locator:\n                return provingKey.isTransferPublicToPrivateProver() && verifyingKey.isTransferPublicToPrivateVerifier();\n            case CREDITS_PROGRAM_KEYS.unbond_public.locator:\n                return provingKey.isUnbondPublicProver() && verifyingKey.isUnbondPublicVerifier();\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * Get fee_private function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.feePrivateKeyParams());\n    };\n\n    /**\n     * Get fee_public function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.feePublicKeyParams());\n    };\n\n    /**\n     * Get join function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.joinKeyParams());\n    };\n\n    /**\n     * Get split function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.splitKeyParams());\n    };\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program.\n     *\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new OfflineKeyProvider\n     * const offlineKeyProvider = new OfflineKeyProvider();\n     *\n     * // Cache the keys for future use with the official locator\n     * const transferPublicProvingKeyBytes = await readBinaryFile('./resources/transfer_public.prover.a74565e');\n     * const transferPublicProvingKey = ProvingKey.fromBytes(transferPublicProvingKeyBytes);\n     *\n     * // Cache the transfer_public keys for future use with the OfflinKeyProvider's convenience method for\n     * // transfer_public (the verifying key will be cached automatically)\n     * offlineKeyProvider.insertTransferPublicKeys(transferPublicProvingKey);\n     *\n     * /// When they're needed, retrieve the keys from the cache\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPrivateKeyParams());\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPrivateToPublicKeyParams());\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPublicKeyParams());\n        } else if (PUBLIC_TRANSFER_AS_SIGNER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPublicAsSignerKeyParams());\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPublicToPrivateKeyParams());\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    };\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    async unBondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.unbondPublicKeyParams());\n    };\n\n    /**\n     * Insert the proving and verifying keys for the bond_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for bond_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertBondPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isBondPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.bond_public.locator, [provingKey.toBytes(), VerifyingKey.bondPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for bond_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the claim_unbond_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for claim_unbond_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertClaimUnbondPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isClaimUnbondPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.claim_unbond_public.locator, [provingKey.toBytes(), VerifyingKey.claimUnbondPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for claim_unbond_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the fee_private function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for fee_private before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertFeePrivateKeys(provingKey: ProvingKey) {\n        if (provingKey.isFeePrivateProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.fee_private.locator, [provingKey.toBytes(), VerifyingKey.feePrivateVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for fee_private\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the fee_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for fee_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertFeePublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isFeePublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.fee_public.locator, [provingKey.toBytes(), VerifyingKey.feePublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for fee_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the join function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for join before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertJoinKeys(provingKey: ProvingKey) {\n        if (provingKey.isJoinProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.join.locator, [provingKey.toBytes(), VerifyingKey.joinVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for join\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the set_validator_state function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for set_validator_state before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertSetValidatorStateKeys(provingKey: ProvingKey) {\n        if (provingKey.isSetValidatorStateProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.set_validator_state.locator, [provingKey.toBytes(), VerifyingKey.setValidatorStateVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for set_validator_state\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the split function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for split before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertSplitKeys(provingKey: ProvingKey) {\n        if (provingKey.isSplitProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.split.locator, [provingKey.toBytes(), VerifyingKey.splitVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for split\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the transfer_private function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_private before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPrivateKeys(provingKey: ProvingKey) {\n        if (provingKey.isTransferPrivateProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.transfer_private.locator, [provingKey.toBytes(), VerifyingKey.transferPrivateVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_private\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the transfer_private_to_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_private_to_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPrivateToPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isTransferPrivateToPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.transfer_private_to_public.locator, [provingKey.toBytes(), VerifyingKey.transferPrivateToPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_private_to_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the transfer_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isTransferPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.transfer_public.locator, [provingKey.toBytes(), VerifyingKey.transferPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the transfer_public_to_private function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_public_to_private before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPublicToPrivateKeys(provingKey: ProvingKey) {\n        if (provingKey.isTransferPublicToPrivateProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.transfer_public_to_private.locator, [provingKey.toBytes(), VerifyingKey.transferPublicToPrivateVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_public_to_private\");\n        }\n    }\n\n    insertUnbondPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isUnbondPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.unbond_public.locator, [provingKey.toBytes(), VerifyingKey.unbondPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for unbond_public\");\n        }\n    }\n}\n\n\nexport {OfflineKeyProvider, OfflineSearchParams}\n","import { logAndThrow, RecordPlaintext } from \"./browser\";\nimport { Account } from \"./account\";\nimport { AleoNetworkClient } from \"./network-client\";\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface RecordSearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * Interface for a record provider. A record provider is used to find records for use in deployment and execution\n * transactions on the Aleo Network. A default implementation is provided by the NetworkRecordProvider class. However,\n * a custom implementation can be provided (say if records are synced locally to a database from the network) by\n * implementing this interface.\n */\ninterface RecordProvider {\n    account: Account\n\n    /**\n     * Find a credits.aleo record with a given number of microcredits from the chosen provider\n     *\n     * @param {number} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext>} The record if found, otherwise an error\n     *\n     * @example\n     * // A class implementing record provider can be used to find a record with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, its nonce should be added to the nonces array so that it is not\n     * // found again if a subsequent search is performed\n     * const record2 = await recordProvider.findCreditsRecord(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    findCreditsRecord(microcredits: number, unspent: boolean,  nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext>;\n\n    /**\n     * Find a list of credit.aleo records with a given number of microcredits from the chosen provider\n     *\n     * @param {number} microcreditAmounts A list of separate microcredit amounts to search for (e.g. [5000, 100000])\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext[]>} A list of records with a value greater or equal to the amounts specified if such records exist, otherwise an error\n     *\n     * @example\n     * // A class implementing record provider can be used to find a record with a given number of microcredits\n     * const records = await recordProvider.findCreditsRecords([5000, 5000], true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces array so that it is not\n     * // found again if a subsequent search is performed\n     * const nonces = [];\n     * records.forEach(record => { nonces.push(record.nonce()) });\n     * const records2 = await recordProvider.findCreditsRecord(5000, true, nonces);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    findCreditsRecords(microcreditAmounts: number[], unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[]>;\n\n    /**\n     * Find an arbitrary record\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext>} The record if found, otherwise an error\n     *\n     * @example\n     * // The RecordSearchParams interface can be used to create parameters for custom record searches which can then\n     * // be passed to the record provider. An example of how this would be done for the credits.aleo program is shown\n     * // below.\n     *\n     * class CustomRecordSearch implements RecordSearchParams {\n     *     startHeight: number;\n     *     endHeight: number;\n     *     amount: number;\n     *     program: string;\n     *     recordName: string;\n     *     constructor(startHeight: number, endHeight: number, credits: number, maxRecords: number, programName: string, recordName: string) {\n     *         this.startHeight = startHeight;\n     *         this.endHeight = endHeight;\n     *         this.amount = amount;\n     *         this.program = programName;\n     *         this.recordName = recordName;\n     *     }\n     * }\n     *\n     * const params = new CustomRecordSearch(0, 100, 5000, \"credits.aleo\", \"credits\");\n     *\n     * const record = await recordProvider.findRecord(true, [], params);\n     */\n    findRecord(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext>;\n\n    /**\n     * Find multiple records from arbitrary programs\n     *\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext>} The record if found, otherwise an error\n     *\n     * // The RecordSearchParams interface can be used to create parameters for custom record searches which can then\n     * // be passed to the record provider. An example of how this would be done for the credits.aleo program is shown\n     * // below.\n     *\n     * class CustomRecordSearch implements RecordSearchParams {\n     *     startHeight: number;\n     *     endHeight: number;\n     *     amount: number;\n     *     maxRecords: number;\n     *     programName: string;\n     *     recordName: string;\n     *     constructor(startHeight: number, endHeight: number, credits: number, maxRecords: number, programName: string, recordName: string) {\n     *         this.startHeight = startHeight;\n     *         this.endHeight = endHeight;\n     *         this.amount = amount;\n     *         this.maxRecords = maxRecords;\n     *         this.programName = programName;\n     *         this.recordName = recordName;\n     *     }\n     * }\n     *\n     * const params = new CustomRecordSearch(0, 100, 5000, 2, \"credits.aleo\", \"credits\");\n     * const records = await recordProvider.findRecord(true, [], params);\n     */\n    findRecords(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[]>;\n}\n\n/**\n * A record provider implementation that uses the official Aleo API to find records for usage in program execution and\n * deployment, wallet functionality, and other use cases.\n */\nclass NetworkRecordProvider implements RecordProvider {\n    account: Account;\n    networkClient: AleoNetworkClient;\n    constructor(account: Account, networkClient: AleoNetworkClient) {\n        this.account = account;\n        this.networkClient = networkClient;\n    }\n\n    /**\n     * Set the account used to search for records\n     *\n     * @param {Account} account The account to use for searching for records\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Find a list of credit records with a given number of microcredits by via the official Aleo API\n     *\n     * @param {number[]} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext>} The record if found, otherwise an error\n     *\n     * @example\n     * // Create a new NetworkRecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // The record provider can be used to find records with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not\n     * // found again if a subsequent search is performed\n     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * */\n    async findCreditsRecords(microcredits: number[], unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[]> {\n        let startHeight = 0;\n        let endHeight = 0;\n\n        if (searchParameters) {\n            if (\"startHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                startHeight = searchParameters[\"startHeight\"];\n            }\n\n            if (\"endHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                endHeight = searchParameters[\"endHeight\"];\n            }\n        }\n\n        // If the end height is not specified, use the current block height\n        if (endHeight == 0) {\n            const end = await this.networkClient.getLatestHeight();\n            endHeight = end;\n        }\n\n        // If the start height is greater than the end height, throw an error\n        if (startHeight >= endHeight) {\n            logAndThrow(\"Start height must be less than end height\");\n        }\n\n        return await this.networkClient.findUnspentRecords(startHeight, endHeight, this.account.privateKey(), microcredits, undefined, nonces);\n    }\n\n    /**\n     * Find a credit record with a given number of microcredits by via the official Aleo API\n     *\n     * @param {number} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext>} The record if found, otherwise an error\n     *\n     * @example\n     * // Create a new NetworkRecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // The record provider can be used to find records with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not\n     * // found again if a subsequent search is performed\n     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    async findCreditsRecord(microcredits: number, unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext> {\n        let records = null;\n\n        try {\n            records = await this.findCreditsRecords([microcredits], unspent, nonces, searchParameters);\n        } catch (e) {}\n\n        if (records && records.length > 0) {\n            return records[0];\n        }\n\n        console.error(\"Record not found with error:\", records);\n        throw new Error(\"Record not found\");\n    }\n\n    /**\n     * Find an arbitrary record. WARNING: This function is not implemented yet and will throw an error.\n     */\n    async findRecord(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Find multiple arbitrary records. WARNING: This function is not implemented yet and will throw an error.\n     */\n    async findRecords(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[]> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n}\n\n/**\n * BlockHeightSearch is a RecordSearchParams implementation that allows for searching for records within a given\n * block height range.\n *\n * @example\n * // Create a new BlockHeightSearch\n * const params = new BlockHeightSearch(89995, 99995);\n *\n * // Create a new NetworkRecordProvider\n * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n * const keyProvider = new AleoKeyProvider();\n * const recordProvider = new NetworkRecordProvider(account, networkClient);\n *\n * // The record provider can be used to find records with a given number of microcredits and the block height search\n * // can be used to find records within a given block height range\n * const record = await recordProvider.findCreditsRecord(5000, true, [], params);\n *\n */\nclass BlockHeightSearch implements RecordSearchParams {\n    startHeight: number;\n    endHeight: number;\n    constructor(startHeight: number, endHeight: number) {\n        this.startHeight = startHeight;\n        this.endHeight = endHeight;\n    }\n}\n\nexport { BlockHeightSearch, NetworkRecordProvider, RecordProvider, RecordSearchParams};\n","// Experimental example where SDK manages worker\n\nimport { wrap } from \"comlink\";\nimport { WorkerAPI } from './worker';\n\nlet singletonWorker: WorkerAPI | null = null;\n\nconst createAleoWorker = (): WorkerAPI => {\n    if (!singletonWorker) {\n        const worker = new Worker(new URL(\"worker.js\", import.meta.url), {\n            type: \"module\",\n        });\n        singletonWorker = wrap<WorkerAPI>(worker);\n    }\n    return singletonWorker;\n};\n\nexport { createAleoWorker };","import {\n    Account,\n    AleoKeyProvider,\n    AleoNetworkClient,\n    ExecutionResponse,\n    FunctionExecution,\n    FunctionKeyProvider,\n    FunctionKeyPair,\n    OfflineQuery,\n    KeySearchParams,\n    RecordPlaintext,\n    RecordProvider,\n    RecordSearchParams,\n    PrivateKey,\n    Program,\n    ProgramImports,\n    ProvingKey,\n    VerifyingKey,\n    Transaction,\n    PRIVATE_TRANSFER_TYPES,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n    ProgramManagerBase as WasmProgramManager, verifyFunctionExecution, AleoKeyProviderParams, CREDITS_PROGRAM_KEYS,\n} from \"./browser\";\n\n/**\n * Represents the options for executing a transaction in the Aleo network.\n * This interface is used to specify the parameters required for building and submitting an execution transaction.\n *\n * @property {string} programName - The name of the program containing the function to be executed.\n * @property {string} functionName - The name of the function to execute within the program.\n * @property {number} fee - The fee to be paid for the transaction.\n * @property {boolean} privateFee - If true, uses a private record to pay the fee; otherwise, uses the account's public credit balance.\n * @property {string[]} inputs - The inputs to the function being executed.\n * @property {RecordSearchParams} [recordSearchParams] - Optional parameters for searching for a record to pay the execution transaction fee.\n * @property {KeySearchParams} [keySearchParams] - Optional parameters for finding the matching proving & verifying keys for the function.\n * @property {string | RecordPlaintext} [feeRecord] - Optional fee record to use for the transaction.\n * @property {ProvingKey} [provingKey] - Optional proving key to use for the transaction.\n * @property {VerifyingKey} [verifyingKey] - Optional verifying key to use for the transaction.\n * @property {PrivateKey} [privateKey] - Optional private key to use for the transaction.\n * @property {OfflineQuery} [offlineQuery] - Optional offline query if creating transactions in an offline environment.\n * @property {string | Program} [program] - Optional program source code to use for the transaction.\n * @property {ProgramImports} [imports] - Optional programs that the program being executed imports.\n */\ninterface ExecuteOptions {\n    programName: string;\n    functionName: string;\n    fee: number;\n    privateFee: boolean;\n    inputs: string[];\n    recordSearchParams?: RecordSearchParams;\n    keySearchParams?: KeySearchParams;\n    feeRecord?: string | RecordPlaintext;\n    provingKey?: ProvingKey;\n    verifyingKey?: VerifyingKey;\n    privateKey?: PrivateKey;\n    offlineQuery?: OfflineQuery;\n    program?: string | Program;\n    imports?: ProgramImports;\n}\n\n/**\n * The ProgramManager class is used to execute and deploy programs on the Aleo network and create value transfers.\n */\nclass ProgramManager {\n    account: Account | undefined;\n    keyProvider: FunctionKeyProvider;\n    host: string;\n    networkClient: AleoNetworkClient;\n    recordProvider: RecordProvider | undefined;\n\n    /** Create a new instance of the ProgramManager\n     *\n     * @param { string | undefined } host A host uri running the official Aleo API\n     * @param { FunctionKeyProvider | undefined } keyProvider A key provider that implements {@link FunctionKeyProvider} interface\n     * @param { RecordProvider | undefined } recordProvider A record provider that implements {@link RecordProvider} interface\n     */\n    constructor(host?: string | undefined, keyProvider?: FunctionKeyProvider | undefined, recordProvider?: RecordProvider | undefined) {\n        this.host = host ? host : 'https://api.explorer.provable.com/v1';\n        this.networkClient = new AleoNetworkClient(this.host);\n\n        this.keyProvider = keyProvider ? keyProvider : new AleoKeyProvider();\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Set the account to use for transaction submission to the Aleo network\n     *\n     * @param {Account} account Account to use for transaction submission\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Set the key provider that provides the proving and verifying keys for programs\n     *\n     * @param {FunctionKeyProvider} keyProvider\n     */\n    setKeyProvider(keyProvider: FunctionKeyProvider) {\n        this.keyProvider = keyProvider;\n    }\n\n    /**\n     * Set the host peer to use for transaction submission to the Aleo network\n     *\n     * @param host {string} Peer url to use for transaction submission\n     */\n    setHost(host: string) {\n        this.host = host;\n        this.networkClient.setHost(host);\n    }\n\n    /**\n     * Set the record provider that provides records for transactions\n     *\n     * @param {RecordProvider} recordProvider\n     */\n    setRecordProvider(recordProvider: RecordProvider) {\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Deploy an Aleo program to the Aleo network\n     *\n     * @param {string} program Program source code\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for searching for a record to use\n     * pay the deployment fee\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {string} The transaction id of the deployed program or a failure message from the network\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for deployments\n     * const program = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Define a fee in credits\n     * const fee = 1.2;\n     *\n     * // Deploy the program\n     * const tx_id = await programManager.deploy(program, fee);\n     *\n     * // Verify the transaction was successful\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async deploy(\n        program: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        feeRecord?: string | RecordPlaintext,\n        privateKey?: PrivateKey,\n    ): Promise<string> {\n        // Ensure the program is valid and does not exist on the network\n        try {\n            const programObject = Program.fromString(program);\n            let programSource;\n            try {\n                programSource = await this.networkClient.getProgram(programObject.id());\n            } catch (e) {\n                // Program does not exist on the network, deployment can proceed\n                console.log(`Program ${programObject.id()} does not exist on the network, deploying...`);\n            }\n            if (typeof programSource == \"string\") {\n                throw (`Program ${programObject.id()} already exists on the network, please rename your program`);\n            }\n        } catch (e: any) {\n            logAndThrow(`Error validating program: ${e.message}`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let deploymentPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            deploymentPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof deploymentPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e: any) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n        } catch (e: any) {\n            logAndThrow(`Error finding program imports. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build a deployment transaction and submit it to the network\n        const tx = await WasmProgramManager.buildDeploymentTransaction(deploymentPrivateKey, program, fee, feeRecord, this.host, imports, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const transaction = await programManager.buildExecutionTransaction({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   fee: 0.020,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async buildExecutionTransaction(options: ExecuteOptions): Promise<Transaction> {\n        // Destructure the options object to access the parameters\n        const {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            recordSearchParams,\n            keySearchParams,\n            privateKey,\n            offlineQuery\n        } = options;\n\n        let feeRecord = options.feeRecord;\n        let provingKey = options.provingKey;\n        let verifyingKey = options.verifyingKey;\n        let program = options.program;\n        let imports = options.imports;\n\n        // Ensure the function exists on the network\n        if (program === undefined) {\n            try {\n                program = <string>(await this.networkClient.getProgram(programName));\n            } catch (e: any) {\n                logAndThrow(`Error finding ${programName}. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`);\n            }\n        } else if (program instanceof Program) {\n            program = program.toString();\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e: any) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the fee proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Resolve the program imports if they exist\n        const numberOfImports = Program.fromString(program).getImports().length;\n        if (numberOfImports > 0 && !imports) {\n            try {\n                imports = <ProgramImports>await this.networkClient.getProgramImports(programName);\n            } catch (e: any) {\n                logAndThrow(`Error finding program imports. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n            }\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildExecutionTransaction(executionPrivateKey, program, functionName, inputs, fee, feeRecord, this.host, imports, provingKey, verifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const transaction = await programManager.execute({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   fee: 0.020,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async execute(options: ExecuteOptions): Promise<string> {\n        const tx = <Transaction>await this.buildExecutionTransaction(options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Run an Aleo program in offline mode\n     *\n     * @param {string} program Program source code containing the function to be executed\n     * @param {string} function_name Function name to execute\n     * @param {string[]} inputs Inputs to the function\n     * @param {number} proveExecution Whether to prove the execution of the function and return an execution transcript\n     * that contains the proof.\n     * @param {string[] | undefined} imports Optional imports to the program\n     * @param {KeySearchParams | undefined} keySearchParams Optional parameters for finding the matching proving &\n     * verifying keys for the function\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>}\n     *\n     * @example\n     * import { Account, Program } from '@provablehq/sdk';\n     *\n     * /// Create the source for the \"helloworld\" program\n     * const program = \"program helloworld.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager();\n     *\n     * /// Create a temporary account for the execution of the program\n     * const account = new Account();\n     * programManager.setAccount(account);\n     *\n     * /// Get the response and ensure that the program executed correctly\n     * const executionResponse = await programManager.run(program, \"hello\", [\"5u32\", \"5u32\"]);\n     * const result = executionResponse.getOutputs();\n     * assert(result === [\"10u32\"]);\n     */\n    async run(\n        program: string,\n        function_name: string,\n        inputs: string[],\n        proveExecution: boolean,\n        imports?: ProgramImports,\n        keySearchParams?: KeySearchParams,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<ExecutionResponse> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Run the program offline and return the result\n        console.log(\"Running program offline\")\n        console.log(\"Proving key: \", provingKey);\n        console.log(\"Verifying key: \", verifyingKey);\n        return WasmProgramManager.executeFunctionOffline(executionPrivateKey, program, function_name, inputs, proveExecution, false, imports, provingKey, verifyingKey, this.host, offlineQuery);\n    }\n\n    /**\n     * Join two credits records into a single credits record\n     *\n     * @param {RecordPlaintext | string} recordOne First credits record to join\n     * @param {RecordPlaintext | string} recordTwo Second credits record to join\n     * @param {number} fee Fee in credits pay for the join transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the fee record to use\n     * to pay the fee for the join transaction\n     * @param {RecordPlaintext | string | undefined} feeRecord Fee record to use for the join transaction\n     * @param {PrivateKey | undefined} privateKey Private key to use for the join transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>}\n     */\n    async join(\n        recordOne: RecordPlaintext | string,\n        recordTwo: RecordPlaintext | string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams | undefined,\n        feeRecord?: RecordPlaintext | string | undefined,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<string> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let joinKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            joinKeys = <FunctionKeyPair>await this.keyProvider.joinKeys();\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [joinProvingKey, joinVerifyingKey] = joinKeys;\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e: any) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Validate the records provided are valid plaintext records\n        try {\n            recordOne = recordOne instanceof RecordPlaintext ? recordOne : RecordPlaintext.fromString(recordOne);\n            recordTwo = recordTwo instanceof RecordPlaintext ? recordTwo : RecordPlaintext.fromString(recordTwo);\n        } catch (e: any) {\n            logAndThrow('Records provided are not valid. Please ensure they are valid plaintext records.')\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildJoinTransaction(executionPrivateKey, recordOne, recordTwo, fee, feeRecord, this.host, joinProvingKey, joinVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Split credits into two new credits records\n     *\n     * @param {number} splitAmount Amount in microcredits to split from the original credits record\n     * @param {RecordPlaintext | string} amountRecord Amount record to use for the split transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the split transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * const record = \"{  owner: aleo184vuwr5u7u0ha5f5k44067dd2uaqewxx6pe5ltha5pv99wvhfqxqv339h4.private,  microcredits: 45000000u64.private,  _nonce: 4106205762862305308495708971985748592380064201230396559307556388725936304984group.public}\"\n     * const tx_id = await programManager.split(25000000, record);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async split(splitAmount: number, amountRecord: RecordPlaintext | string, privateKey?: PrivateKey, offlineQuery?: OfflineQuery): Promise<string> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the split keys from the key provider\n        let splitKeys;\n        try {\n            splitKeys = <FunctionKeyPair>await this.keyProvider.splitKeys();\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [splitProvingKey, splitVerifyingKey] = splitKeys;\n\n        // Validate the record to be split\n        try {\n            amountRecord = amountRecord instanceof RecordPlaintext ? amountRecord : RecordPlaintext.fromString(amountRecord);\n        } catch (e: any) {\n            logAndThrow(\"Record provided is not valid. Please ensure it is a valid plaintext record.\");\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildSplitTransaction(executionPrivateKey, splitAmount, amountRecord, this.host, splitProvingKey, splitVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Pre-synthesize proving and verifying keys for a program\n     *\n     * @param program {string} The program source code to synthesize keys for\n     * @param function_id {string} The function id to synthesize keys for\n     * @param inputs {Array<string>}  Sample inputs to the function\n     * @param privateKey {PrivateKey | undefined} Optional private key to use for the key synthesis\n     *\n     * @returns {Promise<FunctionKeyPair>}\n     */\n    async synthesizeKeys(\n        program: string,\n        function_id: string,\n        inputs: Array<string>,\n        privateKey?: PrivateKey,\n    ): Promise<FunctionKeyPair> {\n        // Resolve the program imports if they exist\n        let imports;\n\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\") {\n            if (typeof this.account !== \"undefined\") {\n                executionPrivateKey = this.account.privateKey();\n            } else {\n                executionPrivateKey = new PrivateKey();\n            }\n        }\n\n        // Attempt to run an offline execution of the program and extract the proving and verifying keys\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n            const keyPair = await WasmProgramManager.synthesizeKeyPair(\n                executionPrivateKey,\n                program,\n                function_id,\n                inputs,\n                imports\n            );\n            return [<ProvingKey>keyPair.provingKey(), <VerifyingKey>keyPair.verifyingKey()];\n        } catch (e: any) {\n            logAndThrow(`Could not synthesize keys - error ${e.message}. Please ensure the program is valid and the inputs are correct.`);\n        }\n    }\n\n    /**\n     * Build a transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async buildTransferTransaction(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction> {\n        // Validate the transfer type\n        transferType = <string>validateTransferType(transferType);\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let transferKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            transferKeys = <FunctionKeyPair>await this.keyProvider.transferKeys(transferType);\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [transferProvingKey, transferVerifyingKey] = transferKeys;\n\n        // Get the amount and fee record from the account if it is not provided in the parameters\n        try {\n            // Track the nonces of the records found so no duplicate records are used\n            const nonces: string[] = [];\n            if (requiresAmountRecord(transferType)) {\n                // If the transfer type is private and requires an amount record, get it from the record provider\n                amountRecord = <RecordPlaintext>await this.getCreditsRecord(fee, [], amountRecord, recordSearchParams);\n                nonces.push(amountRecord.nonce());\n            } else {\n                amountRecord = undefined;\n            }\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, nonces, feeRecord, recordSearchParams) : undefined;\n        } catch (e: any) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildTransferTransaction(executionPrivateKey, amount, recipient, transferType, amountRecord, fee, feeRecord, this.host, transferProvingKey, transferVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Build a transfer_public transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     */\n    async buildTransferPublicTransaction(\n        amount: number,\n        recipient: string,\n        fee: number,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction> {\n        return this.buildTransferTransaction(amount, recipient, \"public\", fee, false, undefined, undefined, undefined, privateKey, offlineQuery);\n    }\n\n    /**\n     * Build a transfer_public_as_signer transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     */\n    async buildTransferPublicAsSignerTransaction(\n        amount: number,\n        recipient: string,\n        fee: number,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction> {\n        return this.buildTransferTransaction(amount, recipient, \"public\", fee, false, undefined, undefined, undefined, privateKey, offlineQuery);\n    }\n\n    /**\n     * Transfer credits to another account\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async transfer(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<string> {\n        const tx = <Transaction>await this.buildTransferTransaction(amount, recipient, transferType, fee, privateFee, recordSearchParams, amountRecord, feeRecord, privateKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build transaction to bond credits to a validator for later submission to the Aleo Network\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction object for later submission\n     * const tx = await programManager.buildBondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can be later submitted to the network using the network client.\n     * const result = await programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is bonding the credits\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async buildBondPublicTransaction(staker_address: string, validator_address: string, withdrawal_address: string, amount: number, options: Partial<ExecuteOptions> = {}) {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"bond_public\",\n            fee = options.fee || 0.86,\n            privateFee = false,\n            inputs = [staker_address, validator_address, withdrawal_address, `${scaledAmount.toString()}u64`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.bond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.bond_public.verifier,\n                cacheKey: \"credits.aleo/bond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Bond credits to validator.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is bonding the credits\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the signer (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 1,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {Options} options Options for the execution\n     */\n    async bondPublic(staker_address: string, validator_address: string, withdrawal_address:string, amount: number, options: Partial<ExecuteOptions> = {}) {\n        const tx = <Transaction>await this.buildBondPublicTransaction(staker_address, validator_address, withdrawal_address, amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a bond_validator transaction for later submission to the Aleo Network.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bond validator transaction object for later use.\n     * const tx = await programManager.buildBondValidatorTransaction(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can later be submitted to the network using the network client.\n     * const tx_id = await programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {number} commission The commission rate for the validator (must be between 0 and 100 - an error will be thrown if it is not)\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async buildBondValidatorTransaction(validator_address: string, withdrawal_address: string, amount: number, commission: number, options: Partial<ExecuteOptions> = {}) {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const adjustedCommission = Math.trunc(commission)\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"bond_validator\",\n            fee = options.fee || 0.86,\n            privateFee = false,\n            inputs = [validator_address, withdrawal_address, `${scaledAmount.toString()}u64`, `${adjustedCommission.toString()}u8`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.bond_validator.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.bond_validator.verifier,\n                cacheKey: \"credits.aleo/bond_validator\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Build transaction to bond a validator.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondValidator(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     *\n     * @returns string\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {number} commission The commission rate for the validator (must be between 0 and 100 - an error will be thrown if it is not)\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async bondValidator(validator_address: string, withdrawal_address: string, amount: number, commission: number, options: Partial<ExecuteOptions> = {}) {\n        const tx = <Transaction>await this.buildBondValidatorTransaction(validator_address, withdrawal_address, amount, commission, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to unbond public credits from a validator in the Aleo network.\n     *\n     * @param {string} staker_address - The address of the staker who is unbonding the credits.\n     * @param {number} amount - The amount of credits to unbond (scaled by 1,000,000).\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * // Create a keyProvider to handle key management.\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to unbond credits.\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * const tx = await programManager.buildUnbondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     */\n    async buildUnbondPublicTransaction(staker_address: string, amount: number, options: Partial<ExecuteOptions> = {}): Promise<Transaction> {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"unbond_public\",\n            fee = options.fee || 1.3,\n            privateFee = false,\n            inputs = [staker_address, `${scaledAmount.toString()}u64`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.unbond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.unbond_public.verifier,\n                cacheKey: \"credits.aleo/unbond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Unbond a specified amount of staked credits.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction and send it to the network\n     * const tx_id = await programManager.unbondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", 10);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is unbonding the credits\n     * @param {number} amount Amount of credits to unbond. If the address of the executor of this function is an\n     * existing validator, it will subtract this amount of credits from the validator's staked credits. If there are\n     * less than 1,000,000 credits staked pool after the unbond, the validator will be removed from the validator set.\n     * If the address of the executor of this function is not a validator and has credits bonded as a delegator, it will\n     * subtract this amount of credits from the delegator's staked credits. If there are less than 10 credits bonded\n     * after the unbond operation, the delegator will be removed from the validator's staking pool.\n     * @param {ExecuteOptions} options Options for the execution\n     */\n    async unbondPublic(staker_address: string, amount: number, options: Partial<ExecuteOptions> = {}): Promise<string> {\n        const tx = <Transaction>await this.buildUnbondPublicTransaction(staker_address, amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to claim unbonded public credits in the Aleo network.\n     *\n     * @param {string} staker_address - The address of the staker who is claiming the credits.\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to claim unbonded credits.\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     *\n     * // Create the claim unbonded transaction object for later use.\n     * const tx = await programManager.buildClaimUnbondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\");\n     * console.log(tx);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     */\n    async buildClaimUnbondPublicTransaction(staker_address: string, options: Partial<ExecuteOptions> = {}): Promise<Transaction> {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"claim_unbond_public\",\n            fee = options.fee || 2,\n            privateFee = false,\n            inputs = [staker_address],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier,\n                cacheKey: \"credits.aleo/claim_unbond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Claim unbonded credits. If credits have been unbonded by the account executing this function, this method will\n     * claim them and add them to the public balance of the account.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.claimUnbondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\");\n     *\n     * @param {string} staker_address Address of the staker who is claiming the credits\n     * @param {ExecuteOptions} options\n     * @returns string\n     */\n    async claimUnbondPublic(staker_address: string, options: Partial<ExecuteOptions> = {}): Promise<string> {\n        const tx = <Transaction>await this.buildClaimUnbondPublicTransaction(staker_address, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a set_validator_state transaction for later usage.\n     *\n     * This function allows a validator to set their state to be either opened or closed to new stakers.\n     * When the validator is open to new stakers, any staker (including the validator) can bond or unbond from the validator.\n     * When the validator is closed to new stakers, existing stakers can still bond or unbond from the validator, but new stakers cannot bond.\n     *\n     * This function serves two primary purposes:\n     * 1. Allow a validator to leave the committee, by closing themselves to stakers and then unbonding all of their stakers.\n     * 2. Allow a validator to maintain their % of stake, by closing themselves to allowing more stakers to bond to them.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"ValidatorPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx = await programManager.buildSetValidatorStateTransaction(true);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {boolean} validator_state\n     * @param {Partial<ExecuteOptions>} options - Override default execution options\n     */\n    async buildSetValidatorStateTransaction(validator_state: boolean, options: Partial<ExecuteOptions> = {}) {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"set_validator_state\",\n            fee = 1,\n            privateFee = false,\n            inputs = [validator_state.toString()],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.set_validator_state.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.set_validator_state.verifier,\n                cacheKey: \"credits.aleo/set_validator_state\"\n            }),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.execute(executeOptions);\n    }\n\n    /**\n     * Submit a set_validator_state transaction to the Aleo Network.\n     *\n     * This function allows a validator to set their state to be either opened or closed to new stakers.\n     * When the validator is open to new stakers, any staker (including the validator) can bond or unbond from the validator.\n     * When the validator is closed to new stakers, existing stakers can still bond or unbond from the validator, but new stakers cannot bond.\n     *\n     * This function serves two primary purposes:\n     * 1. Allow a validator to leave the committee, by closing themselves to stakers and then unbonding all of their stakers.\n     * 2. Allow a validator to maintain their % of stake, by closing themselves to allowing more stakers to bond to them.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"ValidatorPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.setValidatorState(true);\n     *\n     * @returns string\n     * @param {boolean} validator_state\n     * @param {Partial<ExecuteOptions>} options - Override default execution options\n     */\n    async setValidatorState(validator_state: boolean, options: Partial<ExecuteOptions> = {}) {\n        const tx = <string>await this.buildSetValidatorStateTransaction(validator_state, options);\n        return this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Verify a proof of execution from an offline execution\n     *\n     * @param {executionResponse} executionResponse\n     * @returns {boolean} True if the proof is valid, false otherwise\n     */\n    verifyExecution(executionResponse: ExecutionResponse): boolean {\n        try {\n            const execution = <FunctionExecution>executionResponse.getExecution();\n            const function_id = executionResponse.getFunctionId();\n            const program = executionResponse.getProgram();\n            const verifyingKey = executionResponse.getVerifyingKey();\n            return verifyFunctionExecution(execution, verifyingKey, program, function_id);\n        } catch(e) {\n            console.warn(\"The execution was not found in the response, cannot verify the execution\");\n            return false;\n        }\n    }\n\n    /**\n     * Create a program object from a program's source code\n     *\n     * @param {string} program Program source code\n     * @returns {Program} The program object\n     */\n    createProgramFromSource(program: string): Program {\n        return Program.fromString(program);\n    }\n\n    /**\n     * Get the credits program object\n     *\n     * @returns {Program} The credits program object\n     */\n    creditsProgram(): Program {\n        return Program.getCreditsProgram();\n    }\n\n    /**\n     * Verify a program is valid\n     *\n     * @param {string} program The program source code\n     */\n    verifyProgram(program: string): boolean {\n        try {\n            <Program>Program.fromString(program);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    // Internal utility function for getting a credits.aleo record\n    async getCreditsRecord(amount: number, nonces: string[], record?: RecordPlaintext | string, params?: RecordSearchParams): Promise<RecordPlaintext> {\n        try {\n            return record instanceof RecordPlaintext ? record : RecordPlaintext.fromString(<string>record);\n        } catch (e) {\n            try {\n                const recordProvider = <RecordProvider>this.recordProvider;\n                return <RecordPlaintext>(await recordProvider.findCreditsRecord(amount, true, nonces, params))\n            } catch (e: any) {\n                logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n            }\n        }\n    }\n}\n\n// Ensure the transfer type requires an amount record\nfunction requiresAmountRecord(transferType: string): boolean {\n    return PRIVATE_TRANSFER_TYPES.has(transferType);\n}\n\n// Validate the transfer type\nfunction validateTransferType(transferType: string): string {\n    return VALID_TRANSFER_TYPES.has(transferType) ? transferType :\n        logAndThrow(`Invalid transfer type '${transferType}'. Valid transfer types are 'private', 'privateToPublic', 'public', and 'publicToPrivate'.`);\n}\n\nexport { ProgramManager }\n","import \"./polyfill/shared\";\nimport {VerifyingKey, Metadata} from \"@provablehq/wasm/%%NETWORK%%.js\";\n\nconst KEY_STORE = Metadata.baseUrl();\n\ninterface Key {\n    name: string,\n    locator: string,\n    prover: string,\n    verifier: string,\n    verifyingKey: () => VerifyingKey,\n}\n\nfunction convert(metadata: Metadata): Key {\n    // This looks up the method name in VerifyingKey\n    const verifyingKey = (VerifyingKey as any)[metadata.verifyingKey];\n\n    if (!verifyingKey) {\n        throw new Error(\"Invalid method name: \" + metadata.verifyingKey);\n    }\n\n    return {\n        name: metadata.name,\n        locator: metadata.locator,\n        prover: metadata.prover,\n        verifier: metadata.verifier,\n        verifyingKey,\n    };\n}\n\nconst CREDITS_PROGRAM_KEYS = {\n    bond_public: convert(Metadata.bond_public()),\n    bond_validator: convert(Metadata.bond_validator()),\n    claim_unbond_public: convert(Metadata.claim_unbond_public()),\n    fee_private: convert(Metadata.fee_private()),\n    fee_public: convert(Metadata.fee_public()),\n    inclusion: convert(Metadata.inclusion()),\n    join: convert(Metadata.join()),\n    set_validator_state: convert(Metadata.set_validator_state()),\n    split: convert(Metadata.split()),\n    transfer_private: convert(Metadata.transfer_private()),\n    transfer_private_to_public: convert(Metadata.transfer_private_to_public()),\n    transfer_public: convert(Metadata.transfer_public()),\n    transfer_public_as_signer: convert(Metadata.transfer_public_as_signer()),\n    transfer_public_to_private: convert(Metadata.transfer_public_to_private()),\n    unbond_public: convert(Metadata.unbond_public()),\n    getKey: function(key: string): Key {\n        if (this.hasOwnProperty(key)) {\n            return (this as any)[key] as Key;\n        } else {\n            throw new Error(`Key \"${key}\" not found.`);\n        }\n    }\n};\n\nconst PRIVATE_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n]);\nconst VALID_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n    \"transfer_public\",\n    \"transfer_public_as_signer\",\n    \"public\",\n    \"public_as_signer\",\n    \"transferPublic\",\n    \"transferPublicAsSigner\",\n    \"transfer_public_to_private\",\n    \"publicToPrivate\",\n    \"publicAsSigner\",\n    \"transferPublicToPrivate\",\n]);\nconst PRIVATE_TRANSFER = new Set([\n    \"private\",\n    \"transfer_private\",\n    \"transferPrivate\",\n]);\nconst PRIVATE_TO_PUBLIC_TRANSFER = new Set([\n    \"private_to_public\",\n    \"privateToPublic\",\n    \"transfer_private_to_public\",\n    \"transferPrivateToPublic\",\n]);\nconst PUBLIC_TRANSFER = new Set([\n    \"public\",\n    \"transfer_public\",\n    \"transferPublic\",\n]);\nconst PUBLIC_TRANSFER_AS_SIGNER = new Set([\n    \"public_as_signer\",\n    \"transfer_public_as_signer\",\n    \"transferPublicAsSigner\",\n]);\nconst PUBLIC_TO_PRIVATE_TRANSFER = new Set([\n    \"public_to_private\",\n    \"publicToPrivate\",\n    \"transfer_public_to_private\",\n    \"transferPublicToPrivate\",\n]);\n\nfunction logAndThrow(message: string): never {\n    console.error(message);\n    throw new Error(message);\n}\n\nimport { Account } from \"./account\";\nimport { AleoNetworkClient, ProgramImports } from \"./network-client\";\nimport { Block } from \"./models/block\";\nimport { Execution } from \"./models/execution\";\nimport { Input } from \"./models/input\";\nimport { Output } from \"./models/output\";\nimport { TransactionModel } from \"./models/transactionModel\";\nimport { Transition } from \"./models/transition\";\nimport {\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    CachedKeyPair,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    KeySearchParams,\n} from \"./function-key-provider\";\nimport {\n    OfflineKeyProvider,\n    OfflineSearchParams\n} from \"./offline-key-provider\";\nimport {\n    BlockHeightSearch,\n    NetworkRecordProvider,\n    RecordProvider,\n    RecordSearchParams,\n} from \"./record-provider\";\n\n// @TODO: This function is no longer needed, remove it.\nasync function initializeWasm() {\n    console.warn(\"initializeWasm is deprecated, you no longer need to use it\");\n}\n\nexport { createAleoWorker } from \"./managed-worker\";\n\nexport { ProgramManager } from \"./program-manager\";\n\nexport {\n    Address,\n    Execution as FunctionExecution,\n    ExecutionResponse,\n    Field,\n    OfflineQuery,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProgramManager as ProgramManagerBase,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    Signature,\n    Transaction,\n    VerifyingKey,\n    ViewKey,\n    initThreadPool,\n    verifyFunctionExecution,\n} from \"@provablehq/wasm/%%NETWORK%%.js\";\n\nexport { initializeWasm };\n\nexport {\n    Account,\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    AleoNetworkClient,\n    Block,\n    BlockHeightSearch,\n    CachedKeyPair,\n    Execution,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    Input,\n    Key,\n    KeySearchParams,\n    NetworkRecordProvider,\n    ProgramImports,\n    OfflineKeyProvider,\n    OfflineSearchParams,\n    Output,\n    RecordProvider,\n    RecordSearchParams,\n    TransactionModel,\n    Transition,\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PRIVATE_TRANSFER_TYPES,\n    PUBLIC_TRANSFER,\n    PUBLIC_TRANSFER_AS_SIGNER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n};\n","function spawnWorker(url, module, memory, address) {\n        return new Promise((resolve) => {\n            const worker = new Worker(url, {\n                type: \"module\",\n            });\n\n            worker.addEventListener(\"message\", (event) => {\n                // This is needed in Node to wait one extra tick, so that way\n                // the Worker can fully initialize before we return.\n                setTimeout(() => {\n                    resolve(worker);\n\n                    // When running in Node, this allows the process to exit\n                    // even though the Worker is still running.\n                    if (worker.unref) {\n                        worker.unref();\n                    }\n                }, 0);\n            }, {\n                capture: true,\n                once: true,\n            });\n\n            worker.postMessage({\n                module,\n                memory,\n                address,\n            });\n        });\n    }\n\nlet wasm;\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); }\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().slice(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_3.get(state.dtor)(state.a, state.b);\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_3.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\nfunction __wbg_adapter_34(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__ha51b8a0cd6570266(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* Verify an execution with a single function and a single transition. Executions with multiple\n* transitions or functions will fail to verify. Also, this does not verify that the state root of\n* the execution is included in the Aleo Network ledger.\n*\n* @param {Execution} execution The function execution to verify\n* @param {VerifyingKey} verifying_key The verifying key for the function\n* @param {Program} program The program that the function execution belongs to\n* @param {String} function_id The name of the function that was executed\n* @returns {boolean} True if the execution is valid, false otherwise\n* @param {Execution} execution\n* @param {VerifyingKey} verifying_key\n* @param {Program} program\n* @param {string} function_id\n* @returns {boolean}\n*/\nfunction verifyFunctionExecution(execution, verifying_key, program, function_id) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(execution, Execution);\n        _assertClass(verifying_key, VerifyingKey);\n        _assertClass(program, Program);\n        const ptr0 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.verifyFunctionExecution(retptr, execution.__wbg_ptr, verifying_key.__wbg_ptr, program.__wbg_ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return r0 !== 0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nlet cachedBigInt64Memory0 = null;\n\nfunction getBigInt64Memory0() {\n    if (cachedBigInt64Memory0 === null || cachedBigInt64Memory0.buffer !== wasm.memory.buffer) {\n        cachedBigInt64Memory0 = new BigInt64Array(wasm.memory.buffer);\n    }\n    return cachedBigInt64Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {number} receiver\n*/\nfunction runRayonThread(receiver) {\n    wasm.runRayonThread(receiver);\n}\n\n/**\n* @param {URL} url\n* @param {number} num_threads\n* @returns {Promise<void>}\n*/\nfunction initThreadPool(url, num_threads) {\n    const ret = wasm.initThreadPool(addHeapObject(url), num_threads);\n    return takeObject(ret);\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_281(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__h823ad1ce2c4b384e(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\nconst AddressFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_address_free(ptr >>> 0));\n/**\n* Public address of an Aleo account\n*/\nclass Address {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Address.prototype);\n        obj.__wbg_ptr = ptr;\n        AddressFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AddressFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n    * Derive an Aleo address from a private key\n    *\n    * @param {PrivateKey} private_key The private key to derive the address from\n    * @returns {Address} Address corresponding to the private key\n    * @param {PrivateKey} private_key\n    * @returns {Address}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.address_from_private_key(private_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Derive an Aleo address from a view key\n    *\n    * @param {ViewKey} view_key The view key to derive the address from\n    * @returns {Address} Address corresponding to the view key\n    * @param {ViewKey} view_key\n    * @returns {Address}\n    */\n    static from_view_key(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.address_from_view_key(view_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Create an aleo address object from a string representation of an address\n    *\n    * @param {string} address String representation of an addressm\n    * @returns {Address} Address\n    * @param {string} address\n    * @returns {Address}\n    */\n    static from_string(address) {\n        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.address_from_string(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Get a string representation of an Aleo address object\n    *\n    * @param {Address} Address\n    * @returns {string} String representation of the address\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Verify a signature for a message signed by the address\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {boolean} Boolean representing whether or not the signature is valid\n    * @param {Uint8Array} message\n    * @param {Signature} signature\n    * @returns {boolean}\n    */\n    verify(message, signature) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Signature);\n        const ret = wasm.address_verify(this.__wbg_ptr, ptr0, len0, signature.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst ExecutionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_execution_free(ptr >>> 0));\n/**\n* Execution of an Aleo program.\n*/\nclass Execution {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Execution.prototype);\n        obj.__wbg_ptr = ptr;\n        ExecutionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ExecutionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_execution_free(ptr);\n    }\n    /**\n    * Returns the string representation of the execution.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.execution_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates an execution object from a string representation of an execution.\n    * @param {string} execution\n    * @returns {Execution}\n    */\n    static fromString(execution) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(execution, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.execution_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Execution.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ExecutionResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_executionresponse_free(ptr >>> 0));\n/**\n* Webassembly Representation of an Aleo function execution response\n*\n* This object is returned by the execution of an Aleo function off-chain. It provides methods for\n* retrieving the outputs of the function execution.\n*/\nclass ExecutionResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ExecutionResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        ExecutionResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ExecutionResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_executionresponse_free(ptr);\n    }\n    /**\n    * Get the outputs of the executed function\n    *\n    * @returns {Array} Array of strings representing the outputs of the function\n    * @returns {Array<any>}\n    */\n    getOutputs() {\n        const ret = wasm.executionresponse_getOutputs(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns the execution object if present, null if otherwise.\n    *\n    * @returns {Execution | undefined} The execution object if present, null if otherwise\n    * @returns {Execution | undefined}\n    */\n    getExecution() {\n        const ret = wasm.executionresponse_getExecution(this.__wbg_ptr);\n        return ret === 0 ? undefined : Execution.__wrap(ret);\n    }\n    /**\n    * Returns the program keys if present\n    * @returns {KeyPair}\n    */\n    getKeys() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.executionresponse_getKeys(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the proving_key if the proving key was cached in the Execution response.\n    * Note the proving key is removed from the response object after the first call to this\n    * function. Subsequent calls will return null.\n    *\n    * @returns {ProvingKey | undefined} The proving key\n    * @returns {ProvingKey | undefined}\n    */\n    getProvingKey() {\n        const ret = wasm.executionresponse_getProvingKey(this.__wbg_ptr);\n        return ret === 0 ? undefined : ProvingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying_key associated with the program\n    *\n    * @returns {VerifyingKey} The verifying key\n    * @returns {VerifyingKey}\n    */\n    getVerifyingKey() {\n        const ret = wasm.executionresponse_getVerifyingKey(this.__wbg_ptr);\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the function identifier\n    * @returns {string}\n    */\n    getFunctionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.executionresponse_getFunctionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the program\n    * @returns {Program}\n    */\n    getProgram() {\n        const ret = wasm.executionresponse_getProgram(this.__wbg_ptr);\n        return Program.__wrap(ret);\n    }\n}\n\nconst FieldFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_field_free(ptr >>> 0));\n/**\n*/\nclass Field {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Field.prototype);\n        obj.__wbg_ptr = ptr;\n        FieldFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FieldFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_field_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.field_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} field\n    * @returns {Field}\n    */\n    static fromString(field) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(field, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.field_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Field.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst KeyPairFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keypair_free(ptr >>> 0));\n/**\n* Key pair object containing both the function proving and verifying keys\n*/\nclass KeyPair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeyPair.prototype);\n        obj.__wbg_ptr = ptr;\n        KeyPairFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeyPairFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keypair_free(ptr);\n    }\n    /**\n    * Create new key pair from proving and verifying keys\n    *\n    * @param {ProvingKey} proving_key Proving key corresponding to a function in an Aleo program\n    * @param {VerifyingKey} verifying_key Verifying key corresponding to a function in an Aleo program\n    * @returns {KeyPair} Key pair object containing both the function proving and verifying keys\n    * @param {ProvingKey} proving_key\n    * @param {VerifyingKey} verifying_key\n    */\n    constructor(proving_key, verifying_key) {\n        _assertClass(proving_key, ProvingKey);\n        var ptr0 = proving_key.__destroy_into_raw();\n        _assertClass(verifying_key, VerifyingKey);\n        var ptr1 = verifying_key.__destroy_into_raw();\n        const ret = wasm.keypair_new(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        return this;\n    }\n    /**\n    * Get the proving key. This method will remove the proving key from the key pair\n    *\n    * @returns {ProvingKey}\n    * @returns {ProvingKey}\n    */\n    provingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_provingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the verifying key. This method will remove the verifying key from the key pair\n    *\n    * @returns {VerifyingKey}\n    * @returns {VerifyingKey}\n    */\n    verifyingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_verifyingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst MetadataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_metadata_free(ptr >>> 0));\n/**\n*/\nclass Metadata {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Metadata.prototype);\n        obj.__wbg_ptr = ptr;\n        MetadataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MetadataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_metadata_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    get name() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_name(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set name(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_name(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    get locator() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_locator(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set locator(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_locator(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    get prover() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_prover(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set prover(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_prover(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    get verifier() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_verifier(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set verifier(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_verifier(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    get verifyingKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_verifyingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set verifyingKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_verifyingKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    static baseUrl() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.metadata_baseUrl(retptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static bond_public() {\n        const ret = wasm.metadata_bond_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static bond_validator() {\n        const ret = wasm.metadata_bond_validator();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static claim_unbond_public() {\n        const ret = wasm.metadata_claim_unbond_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static fee_private() {\n        const ret = wasm.metadata_fee_private();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static fee_public() {\n        const ret = wasm.metadata_fee_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static inclusion() {\n        const ret = wasm.metadata_inclusion();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static join() {\n        const ret = wasm.metadata_join();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static set_validator_state() {\n        const ret = wasm.metadata_set_validator_state();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static split() {\n        const ret = wasm.metadata_split();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_private() {\n        const ret = wasm.metadata_transfer_private();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_private_to_public() {\n        const ret = wasm.metadata_transfer_private_to_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_public() {\n        const ret = wasm.metadata_transfer_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_public_as_signer() {\n        const ret = wasm.metadata_transfer_public_as_signer();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_public_to_private() {\n        const ret = wasm.metadata_transfer_public_to_private();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static unbond_public() {\n        const ret = wasm.metadata_unbond_public();\n        return Metadata.__wrap(ret);\n    }\n}\n\nconst OfflineQueryFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_offlinequery_free(ptr >>> 0));\n/**\n* An offline query object used to insert the global state root and state paths needed to create\n* a valid inclusion proof offline.\n*/\nclass OfflineQuery {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OfflineQuery.prototype);\n        obj.__wbg_ptr = ptr;\n        OfflineQueryFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OfflineQueryFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_offlinequery_free(ptr);\n    }\n    /**\n    * Creates a new offline query object. The state root is required to be passed in as a string\n    * @param {string} state_root\n    */\n    constructor(state_root) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(state_root, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.offlinequery_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Add a new state path to the offline query object.\n    *\n    * @param {string} commitment: The commitment corresponding to a record inpout\n    * @param {string} state_path: The state path corresponding to the commitment\n    * @param {string} commitment\n    * @param {string} state_path\n    */\n    addStatePath(commitment, state_path) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(commitment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(state_path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.offlinequery_addStatePath(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a json string representation of the offline query object\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.offlinequery_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create an offline query object from a json string representation\n    * @param {string} s\n    * @returns {OfflineQuery}\n    */\n    static fromString(s) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.offlinequery_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return OfflineQuery.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst PrivateKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_privatekey_free(ptr >>> 0));\n/**\n* Private key of an Aleo account\n*/\nclass PrivateKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKey.prototype);\n        obj.__wbg_ptr = ptr;\n        PrivateKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PrivateKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n    * Generate a new private key using a cryptographically secure random number generator\n    *\n    * @returns {PrivateKey}\n    */\n    constructor() {\n        const ret = wasm.privatekey_new();\n        this.__wbg_ptr = ret >>> 0;\n        return this;\n    }\n    /**\n    * Get a private key from a series of unchecked bytes\n    *\n    * @param {Uint8Array} seed Unchecked 32 byte long Uint8Array acting as the seed for the private key\n    * @returns {PrivateKey}\n    * @param {Uint8Array} seed\n    * @returns {PrivateKey}\n    */\n    static from_seed_unchecked(seed) {\n        const ptr0 = passArray8ToWasm0(seed, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_from_seed_unchecked(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a string representation of a private key\n    *\n    * @param {string} seed String representation of a private key\n    * @returns {PrivateKey}\n    * @param {string} private_key\n    * @returns {PrivateKey}\n    */\n    static from_string(private_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(private_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_string(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the private key. This function should be used very carefully\n    * as it exposes the private key plaintext\n    *\n    * @returns {string} String representation of a private key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the view key corresponding to the private key\n    *\n    * @returns {ViewKey}\n    * @returns {ViewKey}\n    */\n    to_view_key() {\n        const ret = wasm.privatekey_to_view_key(this.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get the address corresponding to the private key\n    *\n    * @returns {Address}\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.privatekey_to_address(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Sign a message with the private key\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {Signature} Signature generated by signing the message with the address\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    sign(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(this.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a new randomly generated private key ciphertext using a secret. The secret is sensitive\n    * and will be needed to decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static newEncrypted(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_newEncrypted(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt an existing private key with a secret. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    toCiphertext(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get private key from a private key ciphertext and secret originally used to encrypt it\n    *\n    * @param {PrivateKeyCiphertext} ciphertext Ciphertext representation of the private key\n    * @param {string} secret Secret originally used to encrypt the private key\n    * @returns {PrivateKey} Private key\n    * @param {PrivateKeyCiphertext} ciphertext\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    static fromPrivateKeyCiphertext(ciphertext, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(ciphertext, PrivateKeyCiphertext);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_fromPrivateKeyCiphertext(retptr, ciphertext.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst PrivateKeyCiphertextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_privatekeyciphertext_free(ptr >>> 0));\n/**\n* Private Key in ciphertext form\n*/\nclass PrivateKeyCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKeyCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n        PrivateKeyCiphertextFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PrivateKeyCiphertextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekeyciphertext_free(ptr);\n    }\n    /**\n    * Encrypt a private key using a secret string. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {PrivateKey} private_key Private key to encrypt\n    * @param {string} secret Secret to encrypt the private key with\n    * @returns {PrivateKeyCiphertext} Private key ciphertext\n    * @param {PrivateKey} private_key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static encryptPrivateKey(private_key, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, private_key.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Decrypts a private ciphertext using a secret string. This must be the same secret used to\n    * encrypt the private key\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKey} Private key\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    decryptToPrivateKey(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_decryptToPrivateKey(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the ciphertext string\n    *\n    * @returns {string} Ciphertext string\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekeyciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates a PrivateKeyCiphertext from a string\n    *\n    * @param {string} ciphertext Ciphertext string\n    * @returns {PrivateKeyCiphertext} Private key ciphertext\n    * @param {string} ciphertext\n    * @returns {PrivateKeyCiphertext}\n    */\n    static fromString(ciphertext) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ProgramFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_program_free(ptr >>> 0));\n/**\n* Webassembly Representation of an Aleo program\n*/\nclass Program {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Program.prototype);\n        obj.__wbg_ptr = ptr;\n        ProgramFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ProgramFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_program_free(ptr);\n    }\n    /**\n    * Create a program from a program string\n    *\n    * @param {string} program Aleo program source code\n    * @returns {Program} Program object\n    * @param {string} program\n    * @returns {Program}\n    */\n    static fromString(program) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the program\n    *\n    * @returns {string} String containing the program source code\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Determine if a function is present in the program\n    *\n    * @param {string} functionName Name of the function to check for\n    * @returns {boolean} True if the program is valid, false otherwise\n    * @param {string} function_name\n    * @returns {boolean}\n    */\n    hasFunction(function_name) {\n        const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.program_hasFunction(this.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get javascript array of functions names in the program\n    *\n    * @returns {Array} Array of all function names present in the program\n    *\n    * @example\n    * const expected_functions = [\n    *   \"mint\",\n    *   \"transfer_private\",\n    *   \"transfer_private_to_public\",\n    *   \"transfer_public\",\n    *   \"transfer_public_to_private\",\n    *   \"join\",\n    *   \"split\",\n    *   \"fee\"\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_functions = credits_program.getFunctions();\n    * console.log(credits_functions === expected_functions); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getFunctions() {\n        const ret = wasm.program_getFunctions(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get a javascript object representation of the function inputs and types. This can be used\n    * to generate a web form to capture user inputs for an execution of a function.\n    *\n    * @param {string} function_name Name of the function to get inputs for\n    * @returns {Array} Array of function inputs\n    *\n    * @example\n    * const expected_inputs = [\n    *     {\n    *       type:\"record\",\n    *       visibility:\"private\",\n    *       record:\"credits\",\n    *       members:[\n    *         {\n    *           name:\"microcredits\",\n    *           type:\"u64\",\n    *           visibility:\"private\"\n    *         }\n    *       ],\n    *       register:\"r0\"\n    *     },\n    *     {\n    *       type:\"address\",\n    *       visibility:\"private\",\n    *       register:\"r1\"\n    *     },\n    *     {\n    *       type:\"u64\",\n    *       visibility:\"private\",\n    *       register:\"r2\"\n    *     }\n    * ];\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const transfer_function_inputs = credits_program.getFunctionInputs(\"transfer_private\");\n    * console.log(transfer_function_inputs === expected_inputs); // Output should be \"true\"\n    * @param {string} function_name\n    * @returns {Array<any>}\n    */\n    getFunctionInputs(function_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getFunctionInputs(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a the list of a program's mappings and the names/types of their keys and values.\n    *\n    * @returns {Array} - An array of objects representing the mappings in the program\n    * @example\n    * const expected_mappings = [\n    *    {\n    *       name: \"account\",\n    *       key_name: \"owner\",\n    *       key_type: \"address\",\n    *       value_name: \"microcredits\",\n    *       value_type: \"u64\"\n    *    }\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_mappings = credits_program.getMappings();\n    * console.log(credits_mappings === expected_mappings); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getMappings() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_getMappings(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program record and its types\n    *\n    * @param {string} record_name Name of the record to get members for\n    * @returns {Object} Object containing the record name, type, and members\n    *\n    * @example\n    *\n    * const expected_record = {\n    *     type: \"record\",\n    *     record: \"Credits\",\n    *     members: [\n    *       {\n    *         name: \"owner\",\n    *         type: \"address\",\n    *         visibility: \"private\"\n    *       },\n    *       {\n    *         name: \"microcredits\",\n    *         type: \"u64\",\n    *         visibility: \"private\"\n    *       }\n    *     ];\n    *  };\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_record = credits_program.getRecordMembers(\"Credits\");\n    * console.log(credits_record === expected_record); // Output should be \"true\"\n    * @param {string} record_name\n    * @returns {object}\n    */\n    getRecordMembers(record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getRecordMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program struct and its types\n    *\n    * @param {string} struct_name Name of the struct to get members for\n    * @returns {Array} Array containing the struct members\n    *\n    * @example\n    *\n    * const STRUCT_PROGRAM = \"program token_issue.aleo;\n    *\n    * struct token_metadata:\n    *     network as u32;\n    *     version as u32;\n    *\n    * struct token:\n    *     token_id as u32;\n    *     metadata as token_metadata;\n    *\n    * function no_op:\n    *    input r0 as u64;\n    *    output r0 as u64;\"\n    *\n    * const expected_struct_members = [\n    *    {\n    *      name: \"token_id\",\n    *      type: \"u32\",\n    *    },\n    *    {\n    *      name: \"metadata\",\n    *      type: \"struct\",\n    *      struct_id: \"token_metadata\",\n    *      members: [\n    *       {\n    *         name: \"network\",\n    *         type: \"u32\",\n    *       }\n    *       {\n    *         name: \"version\",\n    *         type: \"u32\",\n    *       }\n    *     ]\n    *   }\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(STRUCT_PROGRAM);\n    * const struct_members = program.getStructMembers(\"token\");\n    * console.log(struct_members === expected_struct_members); // Output should be \"true\"\n    * @param {string} struct_name\n    * @returns {Array<any>}\n    */\n    getStructMembers(struct_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(struct_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getStructMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the credits.aleo program\n    *\n    * @returns {Program} The credits.aleo program\n    * @returns {Program}\n    */\n    static getCreditsProgram() {\n        const ret = wasm.program_getCreditsProgram();\n        return Program.__wrap(ret);\n    }\n    /**\n    * Get the id of the program\n    *\n    * @returns {string} The id of the program\n    * @returns {string}\n    */\n    id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_id(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get a unique address of the program\n    *\n    * @returns {Address} The address of the program\n    * @returns {Address}\n    */\n    address() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_address(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Address.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Determine equality with another program\n    *\n    * @param {Program} other The other program to compare\n    * @returns {boolean} True if the programs are equal, false otherwise\n    * @param {Program} other\n    * @returns {boolean}\n    */\n    isEqual(other) {\n        _assertClass(other, Program);\n        const ret = wasm.program_isEqual(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get program_imports\n    *\n    * @returns {Array} The program imports\n    *\n    * @example\n    *\n    * const DOUBLE_TEST = \"import multiply_test.aleo;\n    *\n    * program double_test.aleo;\n    *\n    * function double_it:\n    *     input r0 as u32.private;\n    *     call multiply_test.aleo/multiply 2u32 r0 into r1;\n    *     output r1 as u32.private;\";\n    *\n    * const expected_imports = [\n    *    \"multiply_test.aleo\"\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(DOUBLE_TEST_PROGRAM);\n    * const imports = program.getImports();\n    * console.log(imports === expected_imports); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getImports() {\n        const ret = wasm.program_getImports(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst ProgramManagerFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_programmanager_free(ptr >>> 0));\n/**\n*/\nclass ProgramManager {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ProgramManagerFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_programmanager_free(ptr);\n    }\n    /**\n    * Deploy an Aleo program\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being deployed\n    * @param imports A javascript object holding the source code of any imported programs in the\n    * form \\{\"program_name1\": \"program_source_code\", \"program_name2\": \"program_source_code\", ..\\}.\n    * Note that all imported programs must be deployed on chain before the main program in order\n    * for the deployment to succeed\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the program deployment in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildDeploymentTransaction(private_key, program, fee_credits, fee_record, url, imports, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        let ptr1 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr1 = fee_record.__destroy_into_raw();\n        }\n        var ptr2 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr3 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr4 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildDeploymentTransaction(private_key.__wbg_ptr, ptr0, len0, fee_credits, ptr1, ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the fee for a program deployment\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The source code of the program being deployed\n    * @param imports (optional) Provide a list of imports to use for the deployment fee estimation\n    * in the form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @returns {u64}\n    * @param {string} program\n    * @param {object | undefined} [imports]\n    * @returns {Promise<bigint>}\n    */\n    static estimateDeploymentFee(program, imports) {\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_estimateDeploymentFee(ptr0, len0, isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the component of the deployment cost which comes from the fee for the program name.\n    * Note that this cost does not represent the entire cost of deployment. It is additional to\n    * the cost of the size (in bytes) of the deployment.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param name The name of the program to be deployed\n    * @returns {u64}\n    * @param {string} name\n    * @returns {bigint}\n    */\n    static estimateProgramNameCost(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateProgramNameCost(retptr, ptr0, len0);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Execute an arbitrary function locally\n    *\n    * @param {PrivateKey} private_key The private key of the sender\n    * @param {string} program The source code of the program being executed\n    * @param {string} function The name of the function to execute\n    * @param {Array} inputs A javascript array of inputs to the function\n    * @param {boolean} prove_execution If true, the execution will be proven and an execution object\n    * containing the proof and the encrypted inputs and outputs needed to verify the proof offline\n    * will be returned.\n    * @param {boolean} cache Cache the proving and verifying keys in the Execution response.\n    * If this is set to 'true' the keys synthesized will be stored in the Execution Response\n    * and the `ProvingKey` and `VerifyingKey` can be retrieved from the response via the `.getKeys()`\n    * method.\n    * @param {Object | undefined} imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param {ProvingKey | undefined} proving_key (optional) Provide a verifying key to use for the function execution\n    * @param {VerifyingKey | undefined} verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {boolean} prove_execution\n    * @param {boolean} cache\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [proving_key]\n    * @param {VerifyingKey | undefined} [verifying_key]\n    * @param {string | undefined} [url]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<ExecutionResponse>}\n    */\n    static executeFunctionOffline(private_key, program, _function, inputs, prove_execution, cache, imports, proving_key, verifying_key, url, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr2 = proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr3 = verifying_key.__destroy_into_raw();\n        }\n        var ptr4 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_executeFunctionOffline(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), prove_execution, cache, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr2, ptr3, ptr4, len4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Execute Aleo function and create an Aleo execution transaction\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being executed\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * If this is set to 'true' the keys synthesized (or passed in as optional parameters via the\n    * `proving_key` and `verifying_key` arguments) will be stored in the ProgramManager's memory\n    * and used for subsequent transactions. If this is set to 'false' the proving and verifying\n    * keys will be deallocated from memory after the transaction is executed.\n    * @param imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the function execution\n    * @param verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [proving_key]\n    * @param {VerifyingKey | undefined} [verifying_key]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildExecutionTransaction(private_key, program, _function, inputs, fee_credits, fee_record, url, imports, proving_key, verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        var ptr3 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr4 = proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr5 = verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr8 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildExecutionTransaction(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), fee_credits, ptr2, ptr3, len3, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr4, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate Fee for Aleo function execution. Note if \"cache\" is set to true, the proving and\n    * verifying keys will be stored in the ProgramManager's memory and used for subsequent\n    * program executions.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program to estimate the execution fee for\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the fee estimation in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the fee estimation\n    * @param verifying_key (optional) Provide a verifying key to use for the fee estimation\n    * @returns {u64} Fee in microcredits\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {string | undefined} [url]\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [proving_key]\n    * @param {VerifyingKey | undefined} [verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<bigint>}\n    */\n    static estimateExecutionFee(private_key, program, _function, inputs, url, imports, proving_key, verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr3 = proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr4 = verifying_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_estimateExecutionFee(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the finalize fee component for executing a function. This fee is additional to the\n    * size of the execution of the program in bytes. If the function does not have a finalize\n    * step, then the finalize fee is 0.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The program containing the function to estimate the finalize fee for\n    * @param function The function to estimate the finalize fee for\n    * @returns {u64} Fee in microcredits\n    * @param {string} program\n    * @param {string} _function\n    * @returns {bigint}\n    */\n    static estimateFinalizeFee(program, _function) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateFinalizeFee(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Join two records together to create a new record with an amount of credits equal to the sum\n    * of the credits of the two original records\n    *\n    * @param private_key The private key of the sender\n    * @param record_1 The first record to combine\n    * @param record_2 The second record to combine\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param join_proving_key (optional) Provide a proving key to use for the join function\n    * @param join_verifying_key (optional) Provide a verifying key to use for the join function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {RecordPlaintext} record_1\n    * @param {RecordPlaintext} record_2\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {ProvingKey | undefined} [join_proving_key]\n    * @param {VerifyingKey | undefined} [join_verifying_key]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildJoinTransaction(private_key, record_1, record_2, fee_credits, fee_record, url, join_proving_key, join_verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(record_1, RecordPlaintext);\n        var ptr0 = record_1.__destroy_into_raw();\n        _assertClass(record_2, RecordPlaintext);\n        var ptr1 = record_2.__destroy_into_raw();\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        var ptr3 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(join_proving_key)) {\n            _assertClass(join_proving_key, ProvingKey);\n            ptr4 = join_proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(join_verifying_key)) {\n            _assertClass(join_verifying_key, VerifyingKey);\n            ptr5 = join_verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr8 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildJoinTransaction(private_key.__wbg_ptr, ptr0, ptr1, fee_credits, ptr2, ptr3, len3, ptr4, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Split an Aleo credits record into two separate records. This function does not require a fee.\n    *\n    * @param private_key The private key of the sender\n    * @param split_amount The amount of the credit split. This amount will be subtracted from the\n    * value of the record and two new records will be created with the split amount and the remainder\n    * @param amount_record The record to split\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param split_proving_key (optional) Provide a proving key to use for the split function\n    * @param split_verifying_key (optional) Provide a verifying key to use for the split function\n    * @returns {Transaction} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {number} split_amount\n    * @param {RecordPlaintext} amount_record\n    * @param {string | undefined} [url]\n    * @param {ProvingKey | undefined} [split_proving_key]\n    * @param {VerifyingKey | undefined} [split_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildSplitTransaction(private_key, split_amount, amount_record, url, split_proving_key, split_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(amount_record, RecordPlaintext);\n        var ptr0 = amount_record.__destroy_into_raw();\n        var ptr1 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(split_proving_key)) {\n            _assertClass(split_proving_key, ProvingKey);\n            ptr2 = split_proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(split_verifying_key)) {\n            _assertClass(split_verifying_key, VerifyingKey);\n            ptr3 = split_verifying_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr4 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildSplitTransaction(private_key.__wbg_ptr, split_amount, ptr0, ptr1, len1, ptr2, ptr3, ptr4);\n        return takeObject(ret);\n    }\n    /**\n    * Send credits from one Aleo account to another\n    *\n    * @param private_key The private key of the sender\n    * @param amount_credits The amount of credits to send\n    * @param recipient The recipient of the transaction\n    * @param transfer_type The type of the transfer (options: \"private\", \"public\", \"private_to_public\", \"public_to_private\")\n    * @param amount_record The record to fund the amount from\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param transfer_verifying_key (optional) Provide a verifying key to use for the transfer\n    * function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction}\n    * @param {PrivateKey} private_key\n    * @param {number} amount_credits\n    * @param {string} recipient\n    * @param {string} transfer_type\n    * @param {RecordPlaintext | undefined} amount_record\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {ProvingKey | undefined} [transfer_proving_key]\n    * @param {VerifyingKey | undefined} [transfer_verifying_key]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildTransferTransaction(private_key, amount_credits, recipient, transfer_type, amount_record, fee_credits, fee_record, url, transfer_proving_key, transfer_verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(recipient, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(transfer_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(amount_record)) {\n            _assertClass(amount_record, RecordPlaintext);\n            ptr2 = amount_record.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr3 = fee_record.__destroy_into_raw();\n        }\n        var ptr4 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(transfer_proving_key)) {\n            _assertClass(transfer_proving_key, ProvingKey);\n            ptr5 = transfer_proving_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(transfer_verifying_key)) {\n            _assertClass(transfer_verifying_key, VerifyingKey);\n            ptr6 = transfer_verifying_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr7 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr8 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr9 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr9 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildTransferTransaction(private_key.__wbg_ptr, amount_credits, ptr0, len0, ptr1, len1, ptr2, fee_credits, ptr3, ptr4, len4, ptr5, ptr6, ptr7, ptr8, ptr9);\n        return takeObject(ret);\n    }\n    /**\n    * Synthesize proving and verifying keys for a program\n    *\n    * @param program {string} The program source code of the program to synthesize keys for\n    * @param function_id {string} The function to synthesize keys for\n    * @param inputs {Array} The inputs to the function\n    * @param imports {Object | undefined} The imports for the program\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} function_id\n    * @param {Array<any>} inputs\n    * @param {object | undefined} [imports]\n    * @returns {Promise<KeyPair>}\n    */\n    static synthesizeKeyPair(private_key, program, function_id, inputs, imports) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_synthesizeKeyPair(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n}\n\nconst ProvingKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_provingkey_free(ptr >>> 0));\n/**\n* Proving key for a function within an Aleo program\n*/\nclass ProvingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ProvingKey.prototype);\n        obj.__wbg_ptr = ptr;\n        ProvingKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ProvingKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_provingkey_free(ptr);\n    }\n    /**\n    * Verify if the proving key is for the bond_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"bond_public_proving_key.bin\");\n    * provingKey.isBondPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the bond_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isBondPublicProver() {\n        const ret = wasm.provingkey_isBondPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the bond_validator function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"bond_validator_proving_key.bin\");\n    * provingKey.isBondPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the bond_validator function, false if otherwise\n    * @returns {boolean}\n    */\n    isBondValidatorProver() {\n        const ret = wasm.provingkey_isBondValidatorProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the claim_unbond function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"claim_unbond_proving_key.bin\");\n    * provingKey.isClaimUnbondProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the claim_unbond function, false if otherwise\n    * @returns {boolean}\n    */\n    isClaimUnbondPublicProver() {\n        const ret = wasm.provingkey_isClaimUnbondPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the fee_private function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"fee_private_proving_key.bin\");\n    * provingKey.isFeePrivateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the fee_private function, false if otherwise\n    * @returns {boolean}\n    */\n    isFeePrivateProver() {\n        const ret = wasm.provingkey_isFeePrivateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the fee_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"fee_public_proving_key.bin\");\n    * provingKey.isFeePublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the fee_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isFeePublicProver() {\n        const ret = wasm.provingkey_isFeePublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the inclusion function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"inclusion_proving_key.bin\");\n    * provingKey.isInclusionProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the inclusion function, false if otherwise\n    * @returns {boolean}\n    */\n    isInclusionProver() {\n        const ret = wasm.provingkey_isInclusionProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the join function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"join_proving_key.bin\");\n    * provingKey.isJoinProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the join function, false if otherwise\n    * @returns {boolean}\n    */\n    isJoinProver() {\n        const ret = wasm.provingkey_isJoinProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the set_validator_state function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"set_validator_set_proving_key.bin\");\n    * provingKey.isSetValidatorStateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the set_validator_state function, false if otherwise\n    * @returns {boolean}\n    */\n    isSetValidatorStateProver() {\n        const ret = wasm.provingkey_isSetValidatorStateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the split function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"split_proving_key.bin\");\n    * provingKey.isSplitProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the split function, false if otherwise\n    * @returns {boolean}\n    */\n    isSplitProver() {\n        const ret = wasm.provingkey_isSplitProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_private function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_private_proving_key.bin\");\n    * provingKey.isTransferPrivateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_private function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPrivateProver() {\n        const ret = wasm.provingkey_isTransferPrivateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_private_to_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_private_to_public_proving_key.bin\");\n    * provingKey.isTransferPrivateToPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_private_to_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPrivateToPublicProver() {\n        const ret = wasm.provingkey_isTransferPrivateToPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_public_proving_key.bin\");\n    * provingKey.isTransferPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPublicProver() {\n        const ret = wasm.provingkey_isTransferPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_public_as_signer function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_public_as_signer_proving_key.bin\");\n    * provingKey.isTransferPublicAsSignerProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPublicAsSignerProver() {\n        const ret = wasm.provingkey_isTransferPublicAsSignerProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_public_to_private function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_public_to_private_proving_key.bin\");\n    * provingKey.isTransferPublicToPrivateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_public_to_private function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPublicToPrivateProver() {\n        const ret = wasm.provingkey_isTransferPublicToPrivateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the unbond_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"unbond_public.bin\");\n    * provingKey.isUnbondPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the unbond_public_prover function, false if otherwise\n    * @returns {boolean}\n    */\n    isUnbondPublicProver() {\n        const ret = wasm.provingkey_isUnbondPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Return the checksum of the proving key\n    *\n    * @returns {string} Checksum of the proving key\n    * @returns {string}\n    */\n    checksum() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_checksum(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a copy of the proving key\n    *\n    * @returns {ProvingKey} A copy of the proving key\n    * @returns {ProvingKey}\n    */\n    copy() {\n        const ret = wasm.provingkey_copy(this.__wbg_ptr);\n        return ProvingKey.__wrap(ret);\n    }\n    /**\n    * Construct a new proving key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte array representation of a proving key\n    * @returns {ProvingKey}\n    * @param {Uint8Array} bytes\n    * @returns {ProvingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a proving key from string\n    *\n    * @param {string} String representation of the proving key\n    * @param {string} string\n    * @returns {ProvingKey}\n    */\n    static fromString(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the byte representation of a proving key\n    *\n    * @returns {Uint8Array} Byte array representation of a proving key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the proving key\n    *\n    * @returns {string} String representation of the proving key\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RecordCiphertextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_recordciphertext_free(ptr >>> 0));\n/**\n* Encrypted Aleo record\n*/\nclass RecordCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n        RecordCiphertextFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RecordCiphertextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordciphertext_free(ptr);\n    }\n    /**\n    * Create a record ciphertext from a string\n    *\n    * @param {string} record String representation of a record ciphertext\n    * @returns {RecordCiphertext} Record ciphertext\n    * @param {string} record\n    * @returns {RecordCiphertext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the string reprensentation of the record ciphertext\n    *\n    * @returns {string} String representation of the record ciphertext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Decrypt the record ciphertext into plaintext using the view key. The record will only\n    * decrypt if the record was encrypted by the account corresponding to the view key\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {RecordPlaintext} Record plaintext object\n    * @param {ViewKey} view_key\n    * @returns {RecordPlaintext}\n    */\n    decrypt(view_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(view_key, ViewKey);\n            wasm.recordciphertext_decrypt(retptr, this.__wbg_ptr, view_key.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Determines if the account corresponding to the view key is the owner of the record\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {boolean}\n    * @param {ViewKey} view_key\n    * @returns {boolean}\n    */\n    isOwner(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.recordciphertext_isOwner(this.__wbg_ptr, view_key.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst RecordPlaintextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_recordplaintext_free(ptr >>> 0));\n/**\n* Plaintext representation of an Aleo record\n*/\nclass RecordPlaintext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordPlaintext.prototype);\n        obj.__wbg_ptr = ptr;\n        RecordPlaintextFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RecordPlaintextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordplaintext_free(ptr);\n    }\n    /**\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {Field}\n    */\n    commitment(program_id, record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_commitment(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Field.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return a record plaintext from a string.\n    *\n    * @param {string} record String representation of a plaintext representation of an Aleo record\n    * @returns {RecordPlaintext} Record plaintext\n    * @param {string} record\n    * @returns {RecordPlaintext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the record plaintext string\n    *\n    * @returns {string} String representation of the record plaintext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the amount of microcredits in the record\n    *\n    * @returns {u64} Amount of microcredits in the record\n    * @returns {bigint}\n    */\n    microcredits() {\n        const ret = wasm.recordplaintext_microcredits(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * Returns the nonce of the record. This can be used to uniquely identify a record.\n    *\n    * @returns {string} Nonce of the record\n    * @returns {string}\n    */\n    nonce() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_nonce(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Attempt to get the serial number of a record to determine whether or not is has been spent\n    *\n    * @param {PrivateKey} private_key Private key of the account that owns the record\n    * @param {string} program_id Program ID of the program that the record is associated with\n    * @param {string} record_name Name of the record\n    * @returns {string} Serial number of the record\n    * @param {PrivateKey} private_key\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {string}\n    */\n    serialNumberString(private_key, program_id, record_name) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_serialNumberString(retptr, this.__wbg_ptr, private_key.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr3 = r0;\n            var len3 = r1;\n            if (r3) {\n                ptr3 = 0; len3 = 0;\n                throw takeObject(r2);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n}\n\nconst SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signature_free(ptr >>> 0));\n/**\n* Cryptographic signature of a message signed by an Aleo account\n*/\nclass Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr);\n    }\n    /**\n    * Sign a message with a private key\n    *\n    * @param {PrivateKey} private_key The private key to sign the message with\n    * @param {Uint8Array} message Byte representation of the message to sign\n    * @returns {Signature} Signature of the message\n    * @param {PrivateKey} private_key\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    static sign(private_key, message) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(private_key.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Verify a signature of a message with an address\n    *\n    * @param {Address} address The address to verify the signature with\n    * @param {Uint8Array} message Byte representation of the message to verify\n    * @returns {boolean} True if the signature is valid, false otherwise\n    * @param {Address} address\n    * @param {Uint8Array} message\n    * @returns {boolean}\n    */\n    verify(address, message) {\n        _assertClass(address, Address);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_verify(this.__wbg_ptr, address.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get a signature from a string representation of a signature\n    *\n    * @param {string} signature String representation of a signature\n    * @returns {Signature} Signature\n    * @param {string} signature\n    * @returns {Signature}\n    */\n    static from_string(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_from_string(ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a signature\n    *\n    * @returns {string} String representation of a signature\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst TransactionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_transaction_free(ptr >>> 0));\n/**\n* Webassembly Representation of an Aleo transaction\n*\n* This object is created when generating an on-chain function deployment or execution and is the\n* object that should be submitted to the Aleo Network in order to deploy or execute a function.\n*/\nclass Transaction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Transaction.prototype);\n        obj.__wbg_ptr = ptr;\n        TransactionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TransactionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n    * Create a transaction from a string\n    *\n    * @param {string} transaction String representation of a transaction\n    * @returns {Transaction}\n    * @param {string} transaction\n    * @returns {Transaction}\n    */\n    static fromString(transaction) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(transaction, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transaction_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the transaction as a string. If you want to submit this transaction to the Aleo Network\n    * this function will create the string that should be submitted in the `POST` data.\n    *\n    * @returns {string} String representation of the transaction\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the id of the transaction. This is the merkle root of the transaction's inclusion proof.\n    *\n    * This value can be used to query the status of the transaction on the Aleo Network to see\n    * if it was successful. If successful, the transaction will be included in a block and this\n    * value can be used to lookup the transaction data on-chain.\n    *\n    * @returns {string} Transaction id\n    * @returns {string}\n    */\n    transactionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the type of the transaction (will return \"deploy\" or \"execute\")\n    *\n    * @returns {string} Transaction type\n    * @returns {string}\n    */\n    transactionType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionType(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst VerifyingKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_verifyingkey_free(ptr >>> 0));\n/**\n* Verifying key for a function within an Aleo program\n*/\nclass VerifyingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerifyingKey.prototype);\n        obj.__wbg_ptr = ptr;\n        VerifyingKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VerifyingKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verifyingkey_free(ptr);\n    }\n    /**\n    * Returns the verifying key for the bond_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_public function\n    * @returns {VerifyingKey}\n    */\n    static bondPublicVerifier() {\n        const ret = wasm.verifyingkey_bondPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the bond_validator function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_validator function\n    * @returns {VerifyingKey}\n    */\n    static bondValidatorVerifier() {\n        const ret = wasm.verifyingkey_bondValidatorVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the claim_delegator function\n    *\n    * @returns {VerifyingKey} Verifying key for the claim_unbond_public function\n    * @returns {VerifyingKey}\n    */\n    static claimUnbondPublicVerifier() {\n        const ret = wasm.verifyingkey_claimUnbondPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the fee_private function\n    *\n    * @returns {VerifyingKey} Verifying key for the fee_private function\n    * @returns {VerifyingKey}\n    */\n    static feePrivateVerifier() {\n        const ret = wasm.verifyingkey_feePrivateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the fee_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the fee_public function\n    * @returns {VerifyingKey}\n    */\n    static feePublicVerifier() {\n        const ret = wasm.verifyingkey_feePublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the inclusion function\n    *\n    * @returns {VerifyingKey} Verifying key for the inclusion function\n    * @returns {VerifyingKey}\n    */\n    static inclusionVerifier() {\n        const ret = wasm.verifyingkey_inclusionVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the join function\n    *\n    * @returns {VerifyingKey} Verifying key for the join function\n    * @returns {VerifyingKey}\n    */\n    static joinVerifier() {\n        const ret = wasm.verifyingkey_joinVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the set_validator_state function\n    *\n    * @returns {VerifyingKey} Verifying key for the set_validator_state function\n    * @returns {VerifyingKey}\n    */\n    static setValidatorStateVerifier() {\n        const ret = wasm.verifyingkey_setValidatorStateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the split function\n    *\n    * @returns {VerifyingKey} Verifying key for the split function\n    * @returns {VerifyingKey}\n    */\n    static splitVerifier() {\n        const ret = wasm.verifyingkey_splitVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_private function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_private function\n    * @returns {VerifyingKey}\n    */\n    static transferPrivateVerifier() {\n        const ret = wasm.verifyingkey_transferPrivateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_private_to_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_private_to_public function\n    * @returns {VerifyingKey}\n    */\n    static transferPrivateToPublicVerifier() {\n        const ret = wasm.verifyingkey_transferPrivateToPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_public function\n    * @returns {VerifyingKey}\n    */\n    static transferPublicVerifier() {\n        const ret = wasm.verifyingkey_transferPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_public_as_signer function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_public_as_signer function\n    * @returns {VerifyingKey}\n    */\n    static transferPublicAsSignerVerifier() {\n        const ret = wasm.verifyingkey_transferPublicAsSignerVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_public_to_private function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_public_to_private function\n    * @returns {VerifyingKey}\n    */\n    static transferPublicToPrivateVerifier() {\n        const ret = wasm.verifyingkey_transferPublicToPrivateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the unbond_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the unbond_public function\n    * @returns {VerifyingKey}\n    */\n    static unbondPublicVerifier() {\n        const ret = wasm.verifyingkey_unbondPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the bond_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_public function\n    * @returns {boolean}\n    */\n    isBondPublicVerifier() {\n        const ret = wasm.verifyingkey_isBondPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Returns the verifying key for the bond_validator function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_validator function\n    * @returns {boolean}\n    */\n    isBondValidatorVerifier() {\n        const ret = wasm.verifyingkey_isBondValidatorVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the claim_delegator function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isClaimUnbondPublicVerifier() {\n        const ret = wasm.verifyingkey_isClaimUnbondPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the fee_private function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isFeePrivateVerifier() {\n        const ret = wasm.verifyingkey_isFeePrivateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the fee_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isFeePublicVerifier() {\n        const ret = wasm.verifyingkey_isFeePublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the inclusion function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isInclusionVerifier() {\n        const ret = wasm.verifyingkey_isInclusionVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the join function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isJoinVerifier() {\n        const ret = wasm.verifyingkey_isJoinVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the set_validator_state function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isSetValidatorStateVerifier() {\n        const ret = wasm.verifyingkey_isSetValidatorStateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the split function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isSplitVerifier() {\n        const ret = wasm.verifyingkey_isSplitVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_private function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPrivateVerifier() {\n        const ret = wasm.verifyingkey_isTransferPrivateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_private_to_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPrivateToPublicVerifier() {\n        const ret = wasm.verifyingkey_isTransferPrivateToPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPublicVerifier() {\n        const ret = wasm.verifyingkey_isTransferPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_public_as_signer function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPublicAsSignerVerifier() {\n        const ret = wasm.verifyingkey_isTransferPublicAsSignerVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_public_to_private function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPublicToPrivateVerifier() {\n        const ret = wasm.verifyingkey_isTransferPublicToPrivateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the unbond_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isUnbondPublicVerifier() {\n        const ret = wasm.verifyingkey_isUnbondPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get the checksum of the verifying key\n    *\n    * @returns {string} Checksum of the verifying key\n    * @returns {string}\n    */\n    checksum() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_checksum(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a copy of the verifying key\n    *\n    * @returns {VerifyingKey} A copy of the verifying key\n    * @returns {VerifyingKey}\n    */\n    copy() {\n        const ret = wasm.verifyingkey_copy(this.__wbg_ptr);\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Construct a new verifying key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte representation of a verifying key\n    * @returns {VerifyingKey}\n    * @param {Uint8Array} bytes\n    * @returns {VerifyingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a verifying key from string\n    *\n    * @param {String} string String representation of a verifying key\n    * @returns {VerifyingKey}\n    * @param {string} string\n    * @returns {VerifyingKey}\n    */\n    static fromString(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a byte array from a verifying key\n    *\n    * @returns {Uint8Array} Byte representation of a verifying key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the verifying key\n    *\n    * @returns {String} String representation of the verifying key\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst ViewKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_viewkey_free(ptr >>> 0));\n/**\n*/\nclass ViewKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ViewKey.prototype);\n        obj.__wbg_ptr = ptr;\n        ViewKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ViewKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_viewkey_free(ptr);\n    }\n    /**\n    * Create a new view key from a private key\n    *\n    * @param {PrivateKey} private_key Private key\n    * @returns {ViewKey} View key\n    * @param {PrivateKey} private_key\n    * @returns {ViewKey}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.privatekey_to_view_key(private_key.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Create a new view key from a string representation of a view key\n    *\n    * @param {string} view_key String representation of a view key\n    * @returns {ViewKey} View key\n    * @param {string} view_key\n    * @returns {ViewKey}\n    */\n    static from_string(view_key) {\n        const ptr0 = passStringToWasm0(view_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.viewkey_from_string(ptr0, len0);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a view key\n    *\n    * @returns {string} String representation of a view key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.viewkey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the address corresponding to a view key\n    *\n    * @returns {Address} Address\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.address_from_view_key(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Decrypt a record ciphertext with a view key\n    *\n    * @param {string} ciphertext String representation of a record ciphertext\n    * @returns {string} String representation of a record plaintext\n    * @param {string} ciphertext\n    * @returns {string}\n    */\n    decrypt(ciphertext) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.viewkey_decrypt(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_new_71801a555ad9f2aa = function() { return handleError(function () {\n        const ret = new XMLHttpRequest();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_overrideMimeType_ee9c51919ceb418b = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).overrideMimeType(getStringFromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_open_c9eb0cf2c9d95679 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4, arg5) {\n        getObject(arg0).open(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4), arg5 !== 0);\n    }, arguments) };\n    imports.wbg.__wbg_send_80d29985093c1ec5 = function() { return handleError(function (arg0) {\n        getObject(arg0).send();\n    }, arguments) };\n    imports.wbg.__wbg_response_7c2e2759084f7279 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).response;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_status_d485fb5a478426fb = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_new_72fb9a18b5ae2624 = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_1f9b04f170055d33 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_new_ab6fd82b10560829 = function() { return handleError(function () {\n        const ret = new Headers();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_0d76b0581eca6298 = function() { return handleError(function () {\n        const ret = new AbortController();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_signal_a61f78a3478fd9bc = function(arg0) {\n        const ret = getObject(arg0).signal;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_append_7bfcb4937d1d5e29 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_Response_849eb93e75734b6e = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Response;\n        } catch (_) {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_status_61a01141acd3cf74 = function(arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    };\n    imports.wbg.__wbg_url_5f6dc4009ac5f99d = function(arg0, arg1) {\n        const ret = getObject(arg1).url;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_headers_9620bfada380764a = function(arg0) {\n        const ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_iterator_2cee6dadfd956dfa = function() {\n        const ret = Symbol.iterator;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_get_e3c254076557e348 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(getObject(arg0), getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbg_call_27c0f87801dedf93 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_next_40fc327bfc8770e6 = function(arg0) {\n        const ret = getObject(arg0).next;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_next_196c84450b364254 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).next();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_done_298b57d23c0fc80c = function(arg0) {\n        const ret = getObject(arg0).done;\n        return ret;\n    };\n    imports.wbg.__wbg_value_d93c65011f51a456 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_abort_2aa7521d5690750e = function(arg0) {\n        getObject(arg0).abort();\n    };\n    imports.wbg.__wbg_stringify_8887fe74e1c50d81 = function() { return handleError(function (arg0) {\n        const ret = JSON.stringify(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_log_0159ca40cddf5b15 = function(arg0, arg1) {\n        console.log(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_bigint_from_u64 = function(arg0) {\n        const ret = BigInt.asUintN(64, arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_b3ca7c6051f9bec1 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_module = function() {\n        const ret = __wbg_init.__wbindgen_wasm_module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_spawnWorker_f6acaddb2e29dc4a = function(arg0, arg1, arg2, arg3) {\n        const ret = spawnWorker(getObject(arg0), getObject(arg1), getObject(arg2), arg3 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_executionresponse_new = function(arg0) {\n        const ret = ExecutionResponse.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_keypair_new = function(arg0) {\n        const ret = KeyPair.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_transaction_new = function(arg0) {\n        const ret = Transaction.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_66ae46612e7f0234 = function(arg0) {\n        const ret = new Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_d4638f722068f043 = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_new_16b304a2cfa7ff4a = function() {\n        const ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_push_a5b05aedc7234f9f = function(arg0, arg1) {\n        const ret = getObject(arg0).push(getObject(arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_arrayBuffer_29931d52c7206b02 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).arrayBuffer();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_63b92bc8671ed464 = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_c20a40f15020d68a = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_new_81740750da40724f = function(arg0, arg1) {\n        try {\n            var state0 = {a: arg0, b: arg1};\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_281(a, state0.b, arg0, arg1);\n                } finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return addHeapObject(ret);\n        } finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_abda76e883ba8a5f = function() {\n        const ret = new Error();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stack_658279fe44541cf6 = function(arg0, arg1) {\n        const ret = getObject(arg1).stack;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_error_f851667af71bcfc6 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_buffer_12d079cc21e14bdb = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_randomFillSync_5c9c955aa56b6049 = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).randomFillSync(takeObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_subarray_a1f73cd4b5b42fe1 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_3aa56aa6edec874c = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_set_a47bac70306a19a7 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_crypto_1d1f22824a6a080c = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_process_4a72847cc503995b = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_f686565e586dd935 = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_104a2ff8d6ea03a2 = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbg_require_cca90b1a94a0255b = function() { return handleError(function () {\n        const ret = module.require;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_msCrypto_eb05e62b530a1508 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_e9b4878cebadb3d3 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_cd7af8117672b8b8 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_get_bd8e338fbd5f5cc8 = function(arg0, arg1) {\n        const ret = getObject(arg0)[arg1 >>> 0];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_self_ce0dbfc45cf2f5be = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_c6fb939a7f436783 = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_d1e6af4856ba331b = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_207b558942527489 = function() { return handleError(function () {\n        const ret = global.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_e258087cd0daa0ea = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_has_0af94d20077affa2 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.has(getObject(arg0), getObject(arg1));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_fetch_bc7c8e27076a5c84 = function(arg0) {\n        const ret = fetch(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_fetch_921fad6ef9e883dd = function(arg0, arg1) {\n        const ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_rethrow = function(arg0) {\n        throw takeObject(arg0);\n    };\n    imports.wbg.__wbg_then_a73caa9a87991566 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_0c86a60e8fcfe9f6 = function(arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_queueMicrotask_481971b0d87f3dd4 = function(arg0) {\n        queueMicrotask(getObject(arg0));\n    };\n    imports.wbg.__wbg_queueMicrotask_3cbae2ec6b6cd3d6 = function(arg0) {\n        const ret = getObject(arg0).queueMicrotask;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_resolve_b0083a7967828ec8 = function(arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_5d743fc9058ba01a = function() {\n        const ret = Atomics.waitAsync;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_8cccba86b0f574cb = function(arg0) {\n        const ret = new Int32Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_46d5c36955b71a79 = function(arg0, arg1, arg2) {\n        const ret = Atomics.waitAsync(getObject(arg0), arg1, arg2);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_async_19c0400d97cc72fe = function(arg0) {\n        const ret = getObject(arg0).async;\n        return ret;\n    };\n    imports.wbg.__wbg_value_571d60108110e917 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_link_fc1eedd35dc7e0a6 = function(arg0) {\n        const ret = \"data:application/javascript,\" + encodeURIComponent(`onmessage = function (ev) {\n            let [ia, index, value] = ev.data;\n            ia = new Int32Array(ia.buffer);\n            let result = Atomics.wait(ia, index, value);\n            postMessage(result);\n        };\n        `);\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_new_d1187ae36d662ef9 = function() { return handleError(function (arg0, arg1) {\n        const ret = new Worker(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setonmessage_503809e5bb51bd33 = function(arg0, arg1) {\n        getObject(arg0).onmessage = getObject(arg1);\n    };\n    imports.wbg.__wbg_of_6a70eed8d41f469c = function(arg0, arg1, arg2) {\n        const ret = Array.of(getObject(arg0), getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_postMessage_7380d10e8b8269df = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).postMessage(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_data_3ce7c145ca4fbcdc = function(arg0) {\n        const ret = getObject(arg0).data;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithstrandinit_3fd6fba4083ff2d0 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_responseText_c67ed2d48db10769 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg1).responseText;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    }, arguments) };\n    imports.wbg.__wbindgen_closure_wrapper5975 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 622, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper6001 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 622, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, maybe_memory) {\n    imports.wbg.memory = maybe_memory || new WebAssembly.Memory({initial:25,maximum:65536,shared:true});\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedBigInt64Memory0 = null;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n\n    const imports = __wbg_get_imports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nvar exports = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Address: Address,\n    Execution: Execution,\n    ExecutionResponse: ExecutionResponse,\n    Field: Field,\n    KeyPair: KeyPair,\n    Metadata: Metadata,\n    OfflineQuery: OfflineQuery,\n    PrivateKey: PrivateKey,\n    PrivateKeyCiphertext: PrivateKeyCiphertext,\n    Program: Program,\n    ProgramManager: ProgramManager,\n    ProvingKey: ProvingKey,\n    RecordCiphertext: RecordCiphertext,\n    RecordPlaintext: RecordPlaintext,\n    Signature: Signature,\n    Transaction: Transaction,\n    VerifyingKey: VerifyingKey,\n    ViewKey: ViewKey,\n    default: __wbg_init,\n    initSync: initSync,\n    initThreadPool: initThreadPool,\n    runRayonThread: runRayonThread,\n    verifyFunctionExecution: verifyFunctionExecution\n});\n\nconst wasm_path = \"aleo_wasm.wasm\";\n\n            \n            var Cargo = async (opt = {}) => {\n                let {importHook, serverPath, initializeHook} = opt;\n\n                let final_path = wasm_path;\n\n                if (serverPath != null) {\n                    final_path = serverPath + /[^\\/\\\\]*$/.exec(final_path)[0];\n                }\n\n                if (importHook != null) {\n                    final_path = importHook(final_path);\n                }\n\n                if (initializeHook != null) {\n                    await initializeHook(__wbg_init, final_path);\n\n                } else {\n                    await __wbg_init(final_path);\n                }\n\n                return exports;\n            };\n\nexport { Cargo as default };\n//# sourceMappingURL=aleo_wasm.js.map\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    return createProxy(ep, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        ep.addEventListener(\"message\", function l(ev) {\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\n                return;\n            }\n            ep.removeEventListener(\"message\", l);\n            resolve(ev.data);\n        });\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n"],"names":["Account","_privateKey","_viewKey","_address","constructor","params","this","privateKeyFromParams","e","console","error","Error","ViewKey","from_private_key","Address","fromCiphertext","ciphertext","password","PrivateKeyCiphertext","fromString","PrivateKey","fromPrivateKeyCiphertext","privateKey","to_string","seed","from_seed_unchecked","from_string","viewKey","address","toString","encryptAccount","toCiphertext","decryptRecord","decrypt","decryptRecords","ciphertexts","map","ownsRecordCiphertext","isOwner","RecordCiphertext","sign","message","verify","signature","parseJSON","json","JSON","parse","key","value","context","Number","isInteger","BigInt","source","async","get","url","options","response","fetch","ok","status","post","method","AleoNetworkClient","host","headers","account","setAccount","getAccount","setHost","fetchData","text","findUnspentRecords","startHeight","endHeight","amounts","maxMicrocredits","nonces","records","Array","start","end","resolvedPrivateKey","latestHeight","failures","totalRecordValue","to_view_key","blockHeight","getLatestHeight","blocks","getBlockRange","i","length","transactions","j","confirmedTransaction","type","transaction","execution","transitions","k","transition","program","outputs","l","output","record","recordPlaintext","nonce","includes","serialNumber","serialNumberString","getTransitionId","push","microcredits","amounts_found","warn","getBlock","height","getDeploymentTransactionIDForProgram","Program","replace","getDeploymentTransactionForProgram","transaction_id","getTransaction","getLatestBlock","getLatestCommittee","getProgram","programId","getProgramObject","inputProgram","getProgramImports","imports","importList","getImports","import_id","hasOwnProperty","programSource","nestedImports","logAndThrow","getProgramImportNames","getProgramMappingNames","getProgramMappingValue","mappingName","getStateRoot","id","getTransactions","getTransactionsInMempool","inputOrOutputID","submitTransaction","transaction_string","Transaction","body","Object","assign","AleoKeyProviderParams","name","proverUri","verifierUri","cacheKey","AleoKeyProvider","cache","cacheOption","keyUris","fetchBytes","data","arrayBuffer","Uint8Array","KEY_STORE","Map","useCache","clearCache","clear","cacheKeys","keyId","keys","provingKey","verifyingKey","set","toBytes","containsKeys","has","deleteKeys","delete","getKeys","debug","provingKeyBytes","verifyingKeyBytes","ProvingKey","fromBytes","VerifyingKey","functionKeys","proverUrl","verifierUrl","CREDITS_PROGRAM_KEYS","getKey","fetchCreditsKeys","fetchRemoteKeys","getVerifyingKey","fetchProvingKey","locator","keyPair","verifying_key","proving_key","prover","bond_public","bondPublicKeys","bondValidatorKeys","bond_validator","claimUnbondPublicKeys","claim_unbond_public","transferKeys","visibility","PRIVATE_TRANSFER","transfer_private","PRIVATE_TO_PUBLIC_TRANSFER","transfer_private_to_public","PUBLIC_TRANSFER","transfer_public","PUBLIC_TRANSFER_AS_SIGNER","transfer_public_as_signer","PUBLIC_TO_PRIVATE_TRANSFER","transfer_public_to_private","joinKeys","join","splitKeys","split","feePrivateKeys","fee_private","feePublicKeys","fee_public","verifier","inclusion","set_validator_state","unbond_public","inner","unBondPublicKeys","OfflineSearchParams","verifyCreditsKeys","bondPublicKeyParams","bondValidatorKeyParams","claimUnbondPublicKeyParams","feePrivateKeyParams","feePublicKeyParams","inclusionKeyParams","joinKeyParams","setValidatorStateKeyParams","splitKeyParams","transferPrivateKeyParams","transferPrivateToPublicKeyParams","transferPublicKeyParams","transferPublicAsSignerKeyParams","transferPublicToPrivateKeyParams","unbondPublicKeyParams","OfflineKeyProvider","Promise","resolve","reject","undefined","isBondPublicProver","isBondPublicVerifier","isClaimUnbondPublicProver","isClaimUnbondPublicVerifier","isFeePrivateProver","isFeePrivateVerifier","isFeePublicProver","isFeePublicVerifier","isInclusionProver","isInclusionVerifier","isJoinProver","isJoinVerifier","isSetValidatorStateProver","isSetValidatorStateVerifier","isSplitProver","isSplitVerifier","isTransferPrivateProver","isTransferPrivateVerifier","isTransferPrivateToPublicProver","isTransferPrivateToPublicVerifier","isTransferPublicProver","isTransferPublicVerifier","isTransferPublicToPrivateProver","isTransferPublicToPrivateVerifier","isUnbondPublicProver","isUnbondPublicVerifier","insertBondPublicKeys","bondPublicVerifier","insertClaimUnbondPublicKeys","claimUnbondPublicVerifier","insertFeePrivateKeys","feePrivateVerifier","insertFeePublicKeys","feePublicVerifier","insertJoinKeys","joinVerifier","insertSetValidatorStateKeys","setValidatorStateVerifier","insertSplitKeys","splitVerifier","insertTransferPrivateKeys","transferPrivateVerifier","insertTransferPrivateToPublicKeys","transferPrivateToPublicVerifier","insertTransferPublicKeys","transferPublicVerifier","insertTransferPublicToPrivateKeys","transferPublicToPrivateVerifier","insertUnbondPublicKeys","unbondPublicVerifier","NetworkRecordProvider","networkClient","findCreditsRecords","unspent","searchParameters","findCreditsRecord","findRecord","findRecords","BlockHeightSearch","singletonWorker","createAleoWorker","worker","Worker","URL","wrap","ProgramManager","keyProvider","recordProvider","setKeyProvider","setRecordProvider","deploy","fee","privateFee","recordSearchParams","feeRecord","programObject","log","feeKeys","deploymentPrivateKey","getCreditsRecord","feeProvingKey","feeVerifyingKey","tx","ProgramManager$1","buildDeploymentTransaction","buildExecutionTransaction","programName","functionName","inputs","keySearchParams","offlineQuery","executionPrivateKey","execute","run","function_name","proveExecution","executeFunctionOffline","recordOne","recordTwo","joinProvingKey","joinVerifyingKey","RecordPlaintext","buildJoinTransaction","splitAmount","amountRecord","splitProvingKey","splitVerifyingKey","buildSplitTransaction","synthesizeKeys","function_id","synthesizeKeyPair","buildTransferTransaction","amount","recipient","transferType","validateTransferType","transferProvingKey","transferVerifyingKey","requiresAmountRecord","buildTransferPublicTransaction","buildTransferPublicAsSignerTransaction","transfer","buildBondPublicTransaction","staker_address","validator_address","withdrawal_address","scaledAmount","Math","trunc","creditsProgram","additionalOptions","executeOptions","bondPublic","buildBondValidatorTransaction","commission","adjustedCommission","bondValidator","buildUnbondPublicTransaction","unbondPublic","buildClaimUnbondPublicTransaction","claimUnbondPublic","buildSetValidatorStateTransaction","validator_state","setValidatorState","verifyExecution","executionResponse","getExecution","getFunctionId","verifyFunctionExecution","createProgramFromSource","getCreditsProgram","verifyProgram","PRIVATE_TRANSFER_TYPES","VALID_TRANSFER_TYPES","Metadata","baseUrl","convert","metadata","Set","initializeWasm","spawnWorker","module","memory","addEventListener","event","setTimeout","unref","capture","once","postMessage","wasm","heap","fill","getObject","idx","heap_next","dropObject","takeObject","ret","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachedUint8Memory0","getUint8Memory0","buffer","getStringFromWasm0","ptr","len","slice","addHeapObject","obj","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encode","encodeString","arg","view","buf","read","written","passStringToWasm0","malloc","realloc","subarray","mem","offset","code","charCodeAt","isLikeNone","x","cachedInt32Memory0","getInt32Memory0","Int32Array","debugString","val","description","isArray","builtInMatches","exec","call","className","stringify","_","stack","CLOSURE_DTORS","FinalizationRegistry","register","unregister","state","__wbindgen_export_3","dtor","a","b","makeMutClosure","arg0","arg1","f","cnt","real","args","original","__wbg_adapter_34","arg2","_dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__ha51b8a0cd6570266","_assertClass","instance","klass","passArray8ToWasm0","verifyFunctionExecution$1","retptr","__wbindgen_add_to_stack_pointer","Execution$1","VerifyingKey$1","Program$1","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","__wbg_ptr","r0","r1","cachedBigInt64Memory0","getBigInt64Memory0","BigInt64Array","getArrayU8FromWasm0","runRayonThread","receiver","initThreadPool$1","num_threads","initThreadPool","handleError","apply","__wbindgen_exn_store","__wbg_adapter_281","arg3","wasm_bindgen__convert__closures__invoke2_mut__h823ad1ce2c4b384e","AddressFinalization","__wbg_address_free","__wrap","create","prototype","__destroy_into_raw","free","private_key","PrivateKey$1","address_from_private_key","from_view_key","view_key","ViewKey$1","address_from_view_key","address_from_string","deferred1_0","deferred1_1","address_to_string","__wbindgen_free","Signature$1","address_verify","ExecutionFinalization","__wbg_execution_free","Execution","execution_toString","execution_fromString","ExecutionResponseFinalization","__wbg_executionresponse_free","ExecutionResponse","getOutputs","executionresponse_getOutputs","executionresponse_getExecution","executionresponse_getKeys","KeyPair","getProvingKey","executionresponse_getProvingKey","ProvingKey$1","executionresponse_getVerifyingKey","executionresponse_getFunctionId","executionresponse_getProgram","FieldFinalization","__wbg_field_free","Field","field_toString","field","field_fromString","KeyPairFinalization","__wbg_keypair_free","ptr1","keypair_new","keypair_provingKey","keypair_verifyingKey","MetadataFinalization","__wbg_metadata_free","__wbg_get_metadata_name","__wbg_set_metadata_name","__wbg_get_metadata_locator","__wbg_set_metadata_locator","__wbg_get_metadata_prover","__wbg_set_metadata_prover","__wbg_get_metadata_verifier","__wbg_set_metadata_verifier","__wbg_get_metadata_verifyingKey","__wbg_set_metadata_verifyingKey","metadata_baseUrl","metadata_bond_public","metadata_bond_validator","metadata_claim_unbond_public","metadata_fee_private","metadata_fee_public","metadata_inclusion","metadata_join","metadata_set_validator_state","metadata_split","metadata_transfer_private","metadata_transfer_private_to_public","metadata_transfer_public","metadata_transfer_public_as_signer","metadata_transfer_public_to_private","metadata_unbond_public","OfflineQueryFinalization","__wbg_offlinequery_free","OfflineQuery","state_root","offlinequery_new","addStatePath","commitment","state_path","len1","offlinequery_addStatePath","offlinequery_toString","s","offlinequery_fromString","PrivateKeyFinalization","__wbg_privatekey_free","privatekey_new","privatekey_from_seed_unchecked","privatekey_from_string","privatekey_to_string","privatekey_to_view_key","to_address","privatekey_to_address","Address$1","privatekey_sign","newEncrypted","secret","privatekey_newEncrypted","PrivateKeyCiphertext$1","privatekey_toCiphertext","privatekey_fromPrivateKeyCiphertext","PrivateKeyCiphertextFinalization","__wbg_privatekeyciphertext_free","encryptPrivateKey","decryptToPrivateKey","privatekeyciphertext_decryptToPrivateKey","privatekeyciphertext_toString","privatekeyciphertext_fromString","ProgramFinalization","__wbg_program_free","program_fromString","program_toString","hasFunction","program_hasFunction","getFunctions","program_getFunctions","getFunctionInputs","program_getFunctionInputs","getMappings","program_getMappings","getRecordMembers","record_name","program_getRecordMembers","getStructMembers","struct_name","program_getStructMembers","program_getCreditsProgram","program_id","program_address","isEqual","other","program_isEqual","program_getImports","ProgramManagerFinalization","__wbg_programmanager_free","fee_credits","fee_record","fee_proving_key","fee_verifying_key","offline_query","RecordPlaintext$1","ptr2","len2","ptr3","ptr4","ptr5","OfflineQuery$1","programmanager_buildDeploymentTransaction","estimateDeploymentFee","programmanager_estimateDeploymentFee","estimateProgramNameCost","programmanager_estimateProgramNameCost","r2","asUintN","_function","prove_execution","len4","programmanager_executeFunctionOffline","len3","ptr6","ptr7","ptr8","programmanager_buildExecutionTransaction","estimateExecutionFee","programmanager_estimateExecutionFee","estimateFinalizeFee","programmanager_estimateFinalizeFee","record_1","record_2","join_proving_key","join_verifying_key","programmanager_buildJoinTransaction","split_amount","amount_record","split_proving_key","split_verifying_key","programmanager_buildSplitTransaction","amount_credits","transfer_type","transfer_proving_key","transfer_verifying_key","ptr9","programmanager_buildTransferTransaction","programmanager_synthesizeKeyPair","ProvingKeyFinalization","__wbg_provingkey_free","provingkey_isBondPublicProver","isBondValidatorProver","provingkey_isBondValidatorProver","provingkey_isClaimUnbondPublicProver","provingkey_isFeePrivateProver","provingkey_isFeePublicProver","provingkey_isInclusionProver","provingkey_isJoinProver","provingkey_isSetValidatorStateProver","provingkey_isSplitProver","provingkey_isTransferPrivateProver","provingkey_isTransferPrivateToPublicProver","provingkey_isTransferPublicProver","isTransferPublicAsSignerProver","provingkey_isTransferPublicAsSignerProver","provingkey_isTransferPublicToPrivateProver","provingkey_isUnbondPublicProver","checksum","provingkey_checksum","copy","provingkey_copy","bytes","provingkey_fromBytes","string","provingkey_fromString","provingkey_toBytes","v1","provingkey_toString","RecordCiphertextFinalization","__wbg_recordciphertext_free","recordciphertext_fromString","recordciphertext_toString","recordciphertext_decrypt","recordciphertext_isOwner","RecordPlaintextFinalization","__wbg_recordplaintext_free","recordplaintext_commitment","Field$1","recordplaintext_fromString","recordplaintext_toString","recordplaintext_microcredits","recordplaintext_nonce","deferred4_0","deferred4_1","recordplaintext_serialNumberString","r3","SignatureFinalization","__wbg_signature_free","Signature","signature_verify","signature_from_string","signature_to_string","TransactionFinalization","__wbg_transaction_free","transaction_fromString","transaction_toString","transactionId","transaction_transactionId","transactionType","transaction_transactionType","VerifyingKeyFinalization","__wbg_verifyingkey_free","verifyingkey_bondPublicVerifier","bondValidatorVerifier","verifyingkey_bondValidatorVerifier","verifyingkey_claimUnbondPublicVerifier","verifyingkey_feePrivateVerifier","verifyingkey_feePublicVerifier","inclusionVerifier","verifyingkey_inclusionVerifier","verifyingkey_joinVerifier","verifyingkey_setValidatorStateVerifier","verifyingkey_splitVerifier","verifyingkey_transferPrivateVerifier","verifyingkey_transferPrivateToPublicVerifier","verifyingkey_transferPublicVerifier","transferPublicAsSignerVerifier","verifyingkey_transferPublicAsSignerVerifier","verifyingkey_transferPublicToPrivateVerifier","verifyingkey_unbondPublicVerifier","verifyingkey_isBondPublicVerifier","isBondValidatorVerifier","verifyingkey_isBondValidatorVerifier","verifyingkey_isClaimUnbondPublicVerifier","verifyingkey_isFeePrivateVerifier","verifyingkey_isFeePublicVerifier","verifyingkey_isInclusionVerifier","verifyingkey_isJoinVerifier","verifyingkey_isSetValidatorStateVerifier","verifyingkey_isSplitVerifier","verifyingkey_isTransferPrivateVerifier","verifyingkey_isTransferPrivateToPublicVerifier","verifyingkey_isTransferPublicVerifier","isTransferPublicAsSignerVerifier","verifyingkey_isTransferPublicAsSignerVerifier","verifyingkey_isTransferPublicToPrivateVerifier","verifyingkey_isUnbondPublicVerifier","verifyingkey_checksum","verifyingkey_copy","verifyingkey_fromBytes","verifyingkey_fromString","verifyingkey_toBytes","verifyingkey_toString","ViewKeyFinalization","__wbg_viewkey_free","viewkey_from_string","viewkey_to_string","deferred3_0","deferred3_1","viewkey_decrypt","__wbg_load","Response","WebAssembly","instantiateStreaming","instantiate","Instance","__wbg_get_imports","wbg","__wbindgen_object_drop_ref","__wbg_new_71801a555ad9f2aa","XMLHttpRequest","arguments","__wbg_overrideMimeType_ee9c51919ceb418b","overrideMimeType","__wbg_open_c9eb0cf2c9d95679","arg4","arg5","open","__wbg_send_80d29985093c1ec5","send","__wbg_response_7c2e2759084f7279","__wbg_status_d485fb5a478426fb","__wbg_new_72fb9a18b5ae2624","__wbindgen_string_new","__wbg_set_1f9b04f170055d33","Reflect","__wbg_new_ab6fd82b10560829","Headers","__wbindgen_object_clone_ref","__wbg_new_0d76b0581eca6298","AbortController","__wbg_signal_a61f78a3478fd9bc","signal","__wbg_append_7bfcb4937d1d5e29","append","__wbg_instanceof_Response_849eb93e75734b6e","result","__wbg_status_61a01141acd3cf74","__wbg_url_5f6dc4009ac5f99d","__wbg_headers_9620bfada380764a","__wbg_iterator_2cee6dadfd956dfa","Symbol","iterator","__wbg_get_e3c254076557e348","__wbindgen_is_function","__wbg_call_27c0f87801dedf93","__wbindgen_is_object","__wbg_next_40fc327bfc8770e6","next","__wbg_next_196c84450b364254","__wbg_done_298b57d23c0fc80c","done","__wbg_value_d93c65011f51a456","__wbg_abort_2aa7521d5690750e","abort","__wbg_stringify_8887fe74e1c50d81","__wbindgen_string_get","__wbg_log_0159ca40cddf5b15","__wbindgen_bigint_from_u64","__wbg_call_b3ca7c6051f9bec1","__wbindgen_module","__wbg_init","__wbindgen_wasm_module","__wbindgen_memory","__wbg_spawnWorker_f6acaddb2e29dc4a","__wbg_executionresponse_new","ExecutionResponse$1","__wbg_keypair_new","__wbg_transaction_new","Transaction$1","__wbg_newwithlength_66ae46612e7f0234","__wbg_set_d4638f722068f043","__wbindgen_cb_drop","__wbg_new_16b304a2cfa7ff4a","__wbg_push_a5b05aedc7234f9f","__wbg_arrayBuffer_29931d52c7206b02","__wbg_new_63b92bc8671ed464","__wbg_length_c20a40f15020d68a","__wbg_new_81740750da40724f","state0","cb0","__wbindgen_number_new","__wbg_new_abda76e883ba8a5f","__wbg_stack_658279fe44541cf6","__wbg_error_f851667af71bcfc6","deferred0_0","deferred0_1","__wbg_buffer_12d079cc21e14bdb","__wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb","__wbg_randomFillSync_5c9c955aa56b6049","randomFillSync","__wbg_subarray_a1f73cd4b5b42fe1","__wbg_getRandomValues_3aa56aa6edec874c","getRandomValues","__wbg_set_a47bac70306a19a7","__wbg_crypto_1d1f22824a6a080c","crypto","__wbg_process_4a72847cc503995b","process","__wbg_versions_f686565e586dd935","versions","__wbg_node_104a2ff8d6ea03a2","node","__wbindgen_is_string","__wbg_require_cca90b1a94a0255b","require","__wbg_msCrypto_eb05e62b530a1508","msCrypto","__wbg_newwithlength_e9b4878cebadb3d3","__wbg_length_cd7af8117672b8b8","__wbg_get_bd8e338fbd5f5cc8","__wbg_self_ce0dbfc45cf2f5be","self","__wbg_window_c6fb939a7f436783","window","__wbg_globalThis_d1e6af4856ba331b","globalThis","__wbg_global_207b558942527489","global","__wbindgen_is_undefined","__wbg_newnoargs_e258087cd0daa0ea","Function","__wbg_has_0af94d20077affa2","__wbg_fetch_bc7c8e27076a5c84","__wbg_fetch_921fad6ef9e883dd","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","__wbg_then_a73caa9a87991566","then","__wbg_then_0c86a60e8fcfe9f6","__wbg_queueMicrotask_481971b0d87f3dd4","queueMicrotask","__wbg_queueMicrotask_3cbae2ec6b6cd3d6","__wbg_resolve_b0083a7967828ec8","__wbg_waitAsync_5d743fc9058ba01a","Atomics","waitAsync","__wbg_new_8cccba86b0f574cb","__wbg_waitAsync_46d5c36955b71a79","__wbg_async_19c0400d97cc72fe","__wbg_value_571d60108110e917","__wbindgen_link_fc1eedd35dc7e0a6","encodeURIComponent","__wbg_new_d1187ae36d662ef9","__wbg_setonmessage_503809e5bb51bd33","onmessage","__wbg_of_6a70eed8d41f469c","of","__wbg_postMessage_7380d10e8b8269df","__wbg_data_3ce7c145ca4fbcdc","__wbg_newwithstrandinit_3fd6fba4083ff2d0","Request","__wbg_responseText_c67ed2d48db10769","responseText","__wbindgen_closure_wrapper5975","__wbindgen_closure_wrapper6001","__wbg_init_memory","maybe_memory","Memory","initial","maximum","shared","__wbg_finalize_init","exports","__wbindgen_start","initSync","Module","input","freeze","__proto__","Metadata$1","RecordCiphertext$1","default","wasm_path","opt","importHook","serverPath","initializeHook","final_path","proxyMarker","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","transferHandlers","canHandle","serialize","port1","port2","MessageChannel","expose","deserialize","port","serialized","isError","ep","allowedOrigins","callback","ev","origin","allowedOrigin","RegExp","test","isAllowedOrigin","path","argumentList","fromWireValue","returnValue","parent","reduce","prop","rawValue","proxy","transfers","transferCache","catch","wireValue","transferables","toWireValue","removeEventListener","closeEndPoint","TypeError","endpoint","isMessagePort","close","target","createProxy","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","WeakMap","proxyFinalizers","newCount","isProxyReleased","Proxy","_target","unregisterProxy","r","p","bind","_thisArg","rawArgumentList","last","processArguments","construct","registerProxy","processed","v","arr","concat","handler","serializedValue","msg","floor","random","MAX_SAFE_INTEGER"],"sourceRoot":""}