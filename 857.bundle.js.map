{"version":3,"file":"857.bundle.js","mappings":"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","sources":["webpack://aleo-website/../../src/utils.ts","webpack://aleo-website/../../src/network-client.ts","webpack://aleo-website/../../src/constants.ts","webpack://aleo-website/../../src/function-key-provider.ts","webpack://aleo-website/../../src/program-manager.ts","webpack://aleo-website/aleo_wasm.js"],"sourcesContent":["export function logAndThrow(message: string): never {\n    console.error(message);\n    throw new Error(message);\n}\n\n\nexport function parseJSON(json: string): any {\n    function revive(key: string, value: any, context: any) {\n        if (Number.isInteger(value)) {\n            return BigInt(context.source);\n\n        } else {\n            return value;\n        }\n    }\n\n    return JSON.parse(json, revive as any);\n}\n\n\nexport async function get(url: URL | string, options?: RequestInit) {\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not get URL \" + url);\n    }\n\n    return response;\n}\n\n\nexport async function post(url: URL | string, options: RequestInit) {\n    options.method = \"POST\";\n\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not post URL \" + url);\n    }\n\n    return response;\n}\n","import { get, post, parseJSON, logAndThrow } from \"./utils\";\nimport { Account } from \"./account\";\nimport { Block } from \"./models/block\";\nimport { TransactionModel } from \"./models/transactionModel\";\nimport {\n  RecordCiphertext,\n  Program,\n  RecordPlaintext,\n  PrivateKey,\n  Transaction,\n} from \"./wasm\";\n\ntype ProgramImports = { [key: string]: string | Program };\n\ninterface AleoNetworkClientOptions {\n  headers?: { [key: string]: string };\n}\n\n/**\n * Client library that encapsulates REST calls to publicly exposed endpoints of Aleo nodes. The methods provided in this\n * allow users to query public information from the Aleo blockchain and submit transactions to the network.\n *\n * @param {string} host\n * @example\n * // Connection to a local node\n * const localNetworkClient = new AleoNetworkClient(\"http://localhost:3030\");\n *\n * // Connection to a public beacon node\n * const publicnetworkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n */\nclass AleoNetworkClient {\n  host: string;\n  headers: { [key: string]: string };\n  account: Account | undefined;\n\n  constructor(host: string, options?: AleoNetworkClientOptions) {\n    this.host = host + \"/%%NETWORK%%\";\n\n    if (options && options.headers) {\n      this.headers = options.headers;\n\n    } else {\n      this.headers = {\n        // This is replaced by the actual version by a Rollup plugin\n        \"X-Aleo-SDK-Version\": \"%%VERSION%%\",\n      };\n    }\n  }\n\n  /**\n   * Set an account to use in networkClient calls\n   *\n   * @param {Account} account\n   * @example\n   * const account = new Account();\n   * networkClient.setAccount(account);\n   */\n  setAccount(account: Account) {\n    this.account = account;\n  }\n\n  /**\n   * Return the Aleo account used in the networkClient\n   *\n   * @example\n   * const account = networkClient.getAccount();\n   */\n  getAccount(): Account | undefined {\n    return this.account;\n  }\n\n  /**\n   * Set a new host for the networkClient\n   *\n   * @param {string} host The address of a node hosting the Aleo API\n   * @param host\n   */\n  setHost(host: string) {\n    this.host = host + \"/%%NETWORK%%\";\n  }\n\n  async fetchData<Type>(\n      url = \"/\",\n  ): Promise<Type> {\n    try {\n      const response = await get(this.host + url, {\n        headers: this.headers\n      });\n\n      const text = await response.text();\n      return parseJSON(text);\n\n    } catch (error) {\n      throw new Error(\"Error fetching data.\");\n    }\n  }\n\n  /**\n   * Attempts to find unspent records in the Aleo blockchain for a specified private key\n   * @param {number} startHeight - The height at which to start searching for unspent records\n   * @param {number} endHeight - The height at which to stop searching for unspent records\n   * @param {string | PrivateKey} privateKey - The private key to use to find unspent records\n   * @param {number[]} amounts - The amounts (in microcredits) to search for (eg. [100, 200, 3000])\n   * @param {number} maxMicrocredits - The maximum number of microcredits to search for\n   * @param {string[]} nonces - The nonces of already found records to exclude from the search\n   *\n   * @example\n   * // Find all unspent records\n   * const privateKey = \"[PRIVATE_KEY]\";\n   * const records = networkClient.findUnspentRecords(0, undefined, privateKey);\n   *\n   * // Find specific amounts\n   * const startHeight = 500000;\n   * const amounts = [600000, 1000000];\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, amounts);\n   *\n   * // Find specific amounts with a maximum number of cumulative microcredits\n   * const maxMicrocredits = 100000;\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, undefined, maxMicrocredits);\n   */\n  async findUnspentRecords(\n      startHeight: number,\n      endHeight: number | undefined,\n      privateKey: string | PrivateKey | undefined,\n      amounts: number[] | undefined,\n      maxMicrocredits?: number | undefined,\n      nonces?: string[] | undefined,\n  ): Promise<Array<RecordPlaintext>> {\n    nonces = nonces || [];\n    // Ensure start height is not negative\n    if (startHeight < 0) {\n      throw new Error(\"Start height must be greater than or equal to 0\");\n    }\n\n    // Initialize search parameters\n    const records = new Array<RecordPlaintext>();\n    let start;\n    let end;\n    let resolvedPrivateKey: PrivateKey;\n    let failures = 0;\n    let totalRecordValue = BigInt(0);\n    let latestHeight: number;\n\n    // Ensure a private key is present to find owned records\n    if (typeof privateKey === \"undefined\") {\n      if (typeof this.account === \"undefined\") {\n        throw new Error(\"Private key must be specified in an argument to findOwnedRecords or set in the AleoNetworkClient\");\n      } else {\n        resolvedPrivateKey = this.account._privateKey;\n      }\n    } else {\n      try {\n        resolvedPrivateKey = privateKey instanceof PrivateKey ? privateKey : PrivateKey.from_string(privateKey);\n      } catch (error) {\n        throw new Error(\"Error parsing private key provided.\");\n      }\n    }\n    const viewKey = resolvedPrivateKey.to_view_key();\n\n    // Get the latest height to ensure the range being searched is valid\n    try {\n      const blockHeight = await this.getLatestHeight();\n      if (typeof blockHeight === \"number\") {\n        latestHeight = blockHeight;\n      } else {\n        throw new Error(\"Error fetching latest block height.\");\n      }\n    } catch (error) {\n      throw new Error(\"Error fetching latest block height.\");\n    }\n\n    // If no end height is specified or is greater than the latest height, set the end height to the latest height\n    if (typeof endHeight === \"number\" && endHeight <= latestHeight) {\n      end = endHeight\n    } else {\n      end = latestHeight;\n    }\n\n    // If the starting is greater than the ending height, return an error\n    if (startHeight > end) {\n      throw new Error(\"Start height must be less than or equal to end height.\");\n    }\n\n    // Iterate through blocks in reverse order in chunks of 50\n    while (end > startHeight) {\n      start = end - 50;\n      if (start < startHeight) {\n        start = startHeight;\n      }\n      try {\n        // Get 50 blocks (or the difference between the start and end if less than 50)\n        const blocks = await this.getBlockRange(start, end);\n        end = start;\n        // Iterate through blocks to find unspent records\n        for (let i = 0; i < blocks.length; i++) {\n          const block = blocks[i];\n          const transactions = block.transactions;\n          if (!(typeof transactions === \"undefined\")) {\n            for (let j = 0; j < transactions.length; j++) {\n              const confirmedTransaction = transactions[j];\n              // Search for unspent records in execute transactions of credits.aleo\n              if (confirmedTransaction.type == \"execute\") {\n                const transaction = confirmedTransaction.transaction;\n                if (transaction.execution && !(typeof transaction.execution.transitions == \"undefined\")) {\n                  for (let k = 0; k < transaction.execution.transitions.length; k++) {\n                    const transition = transaction.execution.transitions[k];\n                    // Only search for unspent records in credits.aleo (for now)\n                    if (transition.program !== \"credits.aleo\") {\n                      continue;\n                    }\n                    if (!(typeof transition.outputs == \"undefined\")) {\n                      for (let l = 0; l < transition.outputs.length; l++) {\n                        const output = transition.outputs[l];\n                        if (output.type === \"record\") {\n                          try {\n                            // Create a wasm record ciphertext object from the found output\n                            const record = RecordCiphertext.fromString(output.value);\n                            // Determine if the record is owned by the specified view key\n                            if (record.isOwner(viewKey)) {\n                              // Decrypt the record and get the serial number\n                              const recordPlaintext = record.decrypt(viewKey);\n\n                              // If the record has already been found, skip it\n                              const nonce = recordPlaintext.nonce();\n                              if (nonces.includes(nonce)) {\n                                continue;\n                              }\n\n                              // Otherwise record the nonce that has been found\n                              const serialNumber = recordPlaintext.serialNumberString(resolvedPrivateKey, \"credits.aleo\", \"credits\");\n                              // Attempt to see if the serial number is spent\n                              try {\n                                await this.getTransitionId(serialNumber);\n                              } catch (error) {\n                                // If it's not found, add it to the list of unspent records\n                                if (!amounts) {\n                                  records.push(recordPlaintext);\n                                  // If the user specified a maximum number of microcredits, check if the search has found enough\n                                  if (typeof maxMicrocredits === \"number\") {\n                                    totalRecordValue += recordPlaintext.microcredits();\n                                    // Exit if the search has found the amount specified\n                                    if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                      return records;\n                                    }\n                                  }\n                                }\n                                // If the user specified a list of amounts, check if the search has found them\n                                if (!(typeof amounts === \"undefined\") && amounts.length > 0) {\n                                  let amounts_found = 0;\n                                  if (recordPlaintext.microcredits() > amounts[amounts_found]) {\n                                      amounts_found += 1;\n                                      records.push(recordPlaintext);\n                                      // If the user specified a maximum number of microcredits, check if the search has found enough\n                                      if (typeof maxMicrocredits === \"number\") {\n                                        totalRecordValue += recordPlaintext.microcredits();\n                                        // Exit if the search has found the amount specified\n                                        if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                          return records;\n                                        }\n                                      }\n                                      if (records.length >= amounts.length) {\n                                        return records;\n                                      }\n                                  }\n                                }\n                              }\n                            }\n                          } catch (error) {\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // If there is an error fetching blocks, log it and keep searching\n        console.warn(\"Error fetching blocks in range: \" + start.toString() + \"-\" + end.toString());\n        console.warn(\"Error: \", error);\n        failures += 1;\n        if (failures > 10) {\n          console.warn(\"10 failures fetching records reached. Returning records fetched so far\");\n          return records;\n        }\n      }\n    }\n    return records;\n  }\n\n  /**\n   * Returns the contents of the block at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const block = networkClient.getBlock(1234);\n   */\n  async getBlock(height: number): Promise<Block> {\n    try {\n      const block = await this.fetchData<Block>(\"/block/\" + height);\n      return block;\n    } catch (error) {\n      throw new Error(\"Error fetching block.\");\n    }\n  }\n\n  /**\n   * Returns a range of blocks between the specified block heights\n   *\n   * @param {number} start\n   * @param {number} end\n   * @example\n   * const blockRange = networkClient.getBlockRange(2050, 2100);\n   */\n  async getBlockRange(start: number, end: number): Promise<Array<Block>> {\n    try {\n      return await this.fetchData<Array<Block>>(\"/blocks?start=\" + start + \"&end=\" + end);\n    } catch (error) {\n      const errorMessage = `Error fetching blocks between ${start} and ${end}.`;\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Returns the deployment transaction id associated with the specified program\n   *\n   * @param {Program | string} program\n   * @returns {TransactionModel}\n   */\n  async getDeploymentTransactionIDForProgram(program: Program | string): Promise<string> {\n    if (program instanceof Program) {\n      program = program.toString();\n    }\n    try {\n      const id = await this.fetchData<string>(\"/find/transactionID/deployment/\" + program);\n      return id.replace(\"\\\"\", \"\")\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the deployment transaction associated with a specified program\n   *\n   * @param {Program | string} program\n   * @returns {TransactionModel}\n   */\n  async getDeploymentTransactionForProgram(program: Program | string): Promise<TransactionModel> {\n    try {\n      const transaction_id = <string>await this.getDeploymentTransactionIDForProgram(program);\n      return <TransactionModel>await this.getTransaction(transaction_id);\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the contents of the latest block\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestBlock();\n   */\n  async getLatestBlock(): Promise<Block> {\n    try {\n      return await this.fetchData<Block>(\"/block/latest\") as Block;\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest committee\n   *\n   * @returns {Promise<object>} A javascript object containing the latest committee\n   */\n  async getLatestCommittee(): Promise<object> {\n    try {\n      return await this.fetchData<object>(\"/committee/latest\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest block height\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestHeight();\n   */\n  async getLatestHeight(): Promise<number> {\n    try {\n      return Number(await this.fetchData<bigint>(\"/block/height/latest\"));\n    } catch (error) {\n      throw new Error(\"Error fetching latest height.\");\n    }\n  }\n\n  /**\n   * Returns the source code of a program given a program ID\n   *\n   * @param {string} programId The program ID of a program deployed to the Aleo Network\n   * @return {Promise<string>} Source code of the program\n   *\n   * @example\n   * const program = networkClient.getProgram(\"hello_hello.aleo\");\n   * const expectedSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * assert.equal(program, expectedSource);\n   */\n  async getProgram(programId: string): Promise<string> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId)\n    } catch (error) {\n      throw new Error(\"Error fetching program\");\n    }\n  }\n\n  /**\n   * Returns a program object from a program ID or program source code\n   *\n   * @param {string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @return {Promise<Program>} Source code of the program\n   *\n   * @example\n   * const programID = \"hello_hello.aleo\";\n   * const programSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   *\n   * // Get program object from program ID or program source code\n   * const programObjectFromID = await networkClient.getProgramObject(programID);\n   * const programObjectFromSource = await networkClient.getProgramObject(programSource);\n   *\n   * // Both program objects should be equal\n   * assert.equal(programObjectFromID.to_string(), programObjectFromSource.to_string());\n   */\n  async getProgramObject(inputProgram: string): Promise<Program> {\n    try {\n      return Program.fromString(inputProgram);\n    } catch (error) {\n      try {\n        return Program.fromString(<string>(await this.getProgram(inputProgram)));\n      } catch (error) {\n        throw new Error(`${inputProgram} is neither a program name or a valid program`);\n      }\n    }\n  }\n\n  /**\n   *  Returns an object containing the source code of a program and the source code of all programs it imports\n   *\n   * @param {Program | string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @returns {Promise<ProgramImports>} Object of the form { \"program_id\": \"program_source\", .. } containing program id & source code for all program imports\n   *\n   * @example\n   * const double_test_source = \"import multiply_test.aleo;\\n\\nprogram double_test.aleo;\\n\\nfunction double_it:\\n    input r0 as u32.private;\\n    call multiply_test.aleo/multiply 2u32 r0 into r1;\\n    output r1 as u32.private;\\n\"\n   * const double_test = Program.fromString(double_test_source);\n   * const expectedImports = {\n   *     \"multiply_test.aleo\": \"program multiply_test.aleo;\\n\\nfunction multiply:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    mul r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * }\n   *\n   * // Imports can be fetched using the program ID, source code, or program object\n   * let programImports = await networkClient.getProgramImports(\"double_test.aleo\");\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program source code\n   * programImports = await networkClient.getProgramImports(double_test_source);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program object\n   * programImports = await networkClient.getProgramImports(double_test);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   */\n  async getProgramImports(inputProgram: Program | string): Promise<ProgramImports> {\n    try {\n      const imports: ProgramImports = {};\n\n      // Get the program object or fail if the program is not valid or does not exist\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n\n      // Get the list of programs that the program imports\n      const importList = program.getImports();\n\n      // Recursively get any imports that the imported programs have in a depth first search order\n      for (let i = 0; i < importList.length; i++) {\n        const import_id = importList[i];\n        if (!imports.hasOwnProperty(import_id)) {\n          const programSource = <string>await this.getProgram(import_id);\n          const nestedImports = <ProgramImports>await this.getProgramImports(import_id);\n          for (const key in nestedImports) {\n            if (!imports.hasOwnProperty(key)) {\n              imports[key] = nestedImports[key];\n            }\n          }\n          imports[import_id] = programSource;\n        }\n      }\n      return imports;\n    } catch (error: any) {\n      logAndThrow(\"Error fetching program imports: \" + error.message);\n    }\n  }\n\n  /**\n   * Get a list of the program names that a program imports\n   *\n   * @param {Program | string} inputProgram - The program id or program source code to get the imports of\n   * @returns {string[]} - The list of program names that the program imports\n   *\n   * @example\n   * const programImportsNames = networkClient.getProgramImports(\"double_test.aleo\");\n   * const expectedImportsNames = [\"multiply_test.aleo\"];\n   * assert.deepStrictEqual(programImportsNames, expectedImportsNames);\n   */\n  async getProgramImportNames(inputProgram: Program | string): Promise<string[]> {\n    try {\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n      return program.getImports();\n    } catch (error: any) {\n      throw new Error(\"Error fetching program imports with error: \" + error.message);\n    }\n  }\n\n  /**\n   * Returns the names of the mappings of a program\n   *\n   * @param {string} programId - The program ID to get the mappings of (e.g. \"credits.aleo\")\n   * @example\n   * const mappings = networkClient.getProgramMappingNames(\"credits.aleo\");\n   * const expectedMappings = [\"account\"];\n   * assert.deepStrictEqual(mappings, expectedMappings);\n   */\n  async getProgramMappingNames(programId: string): Promise<Array<string>> {\n    try {\n      return await this.fetchData<Array<string>>(\"/program/\" + programId + \"/mappings\")\n    } catch (error) {\n      throw new Error(\"Error fetching program mappings - ensure the program exists on chain before trying again\");\n    }\n  }\n\n  /**\n   * Returns the value of a program's mapping for a specific key\n   *\n   * @param {string} programId - The program ID to get the mapping value of (e.g. \"credits.aleo\")\n   * @param {string} mappingName - The name of the mapping to get the value of (e.g. \"account\")\n   * @param {string} key - The key of the mapping to get the value of (e.g. \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\")\n   * @return {Promise<string>} String representation of the value of the mapping\n   *\n   * @example\n   * // Get public balance of an account\n   * const mappingValue = networkClient.getMappingValue(\"credits.aleo\", \"account\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\");\n   * const expectedValue = \"0u64\";\n   * assert.equal(mappingValue, expectedValue);\n   */\n  async getProgramMappingValue(programId: string, mappingName: string, key: string): Promise<string> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId + \"/mapping/\" + mappingName + \"/\" + key)\n    } catch (error) {\n      throw new Error(\"Error fetching mapping value - ensure the mapping exists and the key is correct\");\n    }\n  }\n\n  /**\n   * Returns the latest state/merkle root of the Aleo blockchain\n   *\n   * @example\n   * const stateRoot = networkClient.getStateRoot();\n   */\n  async getStateRoot(): Promise<string> {\n    try {\n      return await this.fetchData<string>(\"/stateRoot/latest\");\n    } catch (error) {\n      throw new Error(\"Error fetching Aleo state root\");\n    }\n  }\n\n  /**\n   * Returns a transaction by its unique identifier\n   *\n   * @param {string} id\n   * @example\n   * const transaction = networkClient.getTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n   */\n  async getTransaction(id: string): Promise<TransactionModel> {\n    try {\n    return await this.fetchData<TransactionModel>(\"/transaction/\" + id);\n    } catch (error) {\n      throw new Error(\"Error fetching transaction.\");\n    }\n  }\n\n  /**\n   * Returns the transactions present at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const transactions = networkClient.getTransactions(654);\n   */\n  async getTransactions(height: number): Promise<Array<TransactionModel>> {\n    try {\n    return await this.fetchData<Array<TransactionModel>>(\"/block/\" + height.toString() + \"/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions.\");\n    }\n  }\n\n  /**\n   * Returns the transactions in the memory pool.\n   *\n   * @example\n   * const transactions = networkClient.getTransactionsInMempool();\n   */\n  async getTransactionsInMempool(): Promise<Array<TransactionModel>> {\n    try {\n      return await this.fetchData<Array<TransactionModel>>(\"/memoryPool/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions from mempool.\");\n    }\n  }\n\n  /**\n   * Returns the transition ID of the transition corresponding to the ID of the input or output.\n   * @param {string} inputOrOutputID - ID of the input or output.\n   *\n   * @example\n   * const transitionId = networkClient.getTransitionId(\"2429232855236830926144356377868449890830704336664550203176918782554219952323field\");\n   */\n  async getTransitionId(inputOrOutputID: string): Promise<string> {\n    try {\n      return await this.fetchData<string>(\"/find/transitionID/\" + inputOrOutputID);\n    } catch (error) {\n      throw new Error(\"Error fetching transition ID.\");\n    }\n  }\n\n  /**\n   * Submit an execute or deployment transaction to the Aleo network\n   *\n   * @param {Transaction | string} transaction  - The transaction to submit to the network\n   * @returns {string} - The transaction id of the submitted transaction or the resulting error\n   */\n  async submitTransaction(transaction: Transaction | string): Promise<string> {\n    const transaction_string = transaction instanceof Transaction ? transaction.toString() : transaction;\n    try {\n      const response = await post(this.host + \"/transaction/broadcast\", {\n        body: transaction_string,\n        headers: Object.assign({}, this.headers, {\n          \"Content-Type\": \"application/json\",\n        }),\n      });\n\n      try {\n        const text = await response.text();\n        return parseJSON(text);\n\n      } catch (error: any) {\n        throw new Error(`Error posting transaction. Aleo network response: ${error.message}`);\n      }\n    } catch (error: any) {\n      throw new Error(`Error posting transaction: No response received: ${error.message}`);\n    }\n  }\n}\n\nexport { AleoNetworkClient, AleoNetworkClientOptions, ProgramImports }\n","import {VerifyingKey, Metadata} from \"./wasm\";\n\nexport const KEY_STORE = Metadata.baseUrl();\n\nexport interface Key {\n    name: string,\n    locator: string,\n    prover: string,\n    verifier: string,\n    verifyingKey: () => VerifyingKey,\n}\n\nfunction convert(metadata: Metadata): Key {\n    // This looks up the method name in VerifyingKey\n    const verifyingKey = (VerifyingKey as any)[metadata.verifyingKey];\n\n    if (!verifyingKey) {\n        throw new Error(\"Invalid method name: \" + metadata.verifyingKey);\n    }\n\n    return {\n        name: metadata.name,\n        locator: metadata.locator,\n        prover: metadata.prover,\n        verifier: metadata.verifier,\n        verifyingKey,\n    };\n}\n\nexport const CREDITS_PROGRAM_KEYS = {\n    bond_public: convert(Metadata.bond_public()),\n    bond_validator: convert(Metadata.bond_validator()),\n    claim_unbond_public: convert(Metadata.claim_unbond_public()),\n    fee_private: convert(Metadata.fee_private()),\n    fee_public: convert(Metadata.fee_public()),\n    inclusion: convert(Metadata.inclusion()),\n    join: convert(Metadata.join()),\n    set_validator_state: convert(Metadata.set_validator_state()),\n    split: convert(Metadata.split()),\n    transfer_private: convert(Metadata.transfer_private()),\n    transfer_private_to_public: convert(Metadata.transfer_private_to_public()),\n    transfer_public: convert(Metadata.transfer_public()),\n    transfer_public_as_signer: convert(Metadata.transfer_public_as_signer()),\n    transfer_public_to_private: convert(Metadata.transfer_public_to_private()),\n    unbond_public: convert(Metadata.unbond_public()),\n    getKey: function(key: string): Key {\n        if (this.hasOwnProperty(key)) {\n            return (this as any)[key] as Key;\n        } else {\n            throw new Error(`Key \"${key}\" not found.`);\n        }\n    }\n};\n\nexport const PRIVATE_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n]);\n\nexport const VALID_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n    \"transfer_public\",\n    \"transfer_public_as_signer\",\n    \"public\",\n    \"public_as_signer\",\n    \"transferPublic\",\n    \"transferPublicAsSigner\",\n    \"transfer_public_to_private\",\n    \"publicToPrivate\",\n    \"publicAsSigner\",\n    \"transferPublicToPrivate\",\n]);\n\nexport const PRIVATE_TRANSFER = new Set([\n    \"private\",\n    \"transfer_private\",\n    \"transferPrivate\",\n]);\n\nexport const PRIVATE_TO_PUBLIC_TRANSFER = new Set([\n    \"private_to_public\",\n    \"privateToPublic\",\n    \"transfer_private_to_public\",\n    \"transferPrivateToPublic\",\n]);\n\nexport const PUBLIC_TRANSFER = new Set([\n    \"public\",\n    \"transfer_public\",\n    \"transferPublic\",\n]);\n\nexport const PUBLIC_TRANSFER_AS_SIGNER = new Set([\n    \"public_as_signer\",\n    \"transfer_public_as_signer\",\n    \"transferPublicAsSigner\",\n]);\n\nexport const PUBLIC_TO_PRIVATE_TRANSFER = new Set([\n    \"public_to_private\",\n    \"publicToPrivate\",\n    \"transfer_public_to_private\",\n    \"transferPublicToPrivate\",\n]);\n","import {\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    Key,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PUBLIC_TRANSFER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    PUBLIC_TRANSFER_AS_SIGNER,\n} from \"./constants\";\n\nimport {\n    ProvingKey,\n    VerifyingKey,\n} from \"./wasm\";\n\nimport { get } from \"./utils\";\n\ntype FunctionKeyPair = [ProvingKey, VerifyingKey];\ntype CachedKeyPair = [Uint8Array, Uint8Array];\ntype AleoKeyProviderInitParams = {\n    proverUri?: string;\n    verifierUri?: string;\n    cacheKey?: string;\n};\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface KeySearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * AleoKeyProviderParams search parameter for the AleoKeyProvider. It allows for the specification of a proverUri and\n * verifierUri to fetch keys via HTTP from a remote resource as well as a unique cacheKey to store the keys in memory.\n */\nclass AleoKeyProviderParams implements KeySearchParams {\n    name: string | undefined;\n    proverUri: string | undefined;\n    verifierUri: string | undefined;\n    cacheKey: string | undefined;\n\n    /**\n     * Create a new AleoKeyProviderParams object which implements the KeySearchParams interface. Users can optionally\n     * specify a url for the proverUri & verifierUri to fetch keys via HTTP from a remote resource as well as a unique\n     * cacheKey to store the keys in memory for future use. If no proverUri or verifierUri is specified, a cachekey must\n     * be provided.\n     *\n     * @param { AleoKeyProviderInitParams } params - Optional search parameters\n     */\n    constructor(params: {proverUri?: string, verifierUri?: string, cacheKey?: string, name?: string}) {\n        this.proverUri = params.proverUri;\n        this.verifierUri = params.verifierUri;\n        this.cacheKey = params.cacheKey;\n        this.name = params.name;\n    }\n}\n\n/**\n * KeyProvider interface. Enables the retrieval of public proving and verifying keys for Aleo Programs.\n */\ninterface FunctionKeyProvider {\n    /**\n     * Get bond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the bond_public function\n     */\n    bondPublicKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get bond_validator function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the bond_validator function\n     */\n    bondValidatorKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void;\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the unbond_public function\n     */\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a search object which implements the KeySearchParams interface\n     * class IndexDbSearch implements KeySearchParams {\n     *     db: string\n     *     keyId: string\n     *     constructor(params: {db: string, keyId: string}) {\n     *         this.db = params.db;\n     *         this.keyId = params.keyId;\n     *     }\n     * }\n     *\n     * // Create a new object which implements the KeyProvider interface\n     * class IndexDbKeyProvider implements FunctionKeyProvider {\n     *     async functionKeys(params: KeySearchParams): Promise<FunctionKeyPair> {\n     *         return new Promise((resolve, reject) => {\n     *             const request = indexedDB.open(params.db, 1);\n     *\n     *             request.onupgradeneeded = function(e) {\n     *                 const db = e.target.result;\n     *                 if (!db.objectStoreNames.contains('keys')) {\n     *                     db.createObjectStore('keys', { keyPath: 'id' });\n     *                 }\n     *             };\n     *\n     *             request.onsuccess = function(e) {\n     *                 const db = e.target.result;\n     *                 const transaction = db.transaction([\"keys\"], \"readonly\");\n     *                 const store = transaction.objectStore(\"keys\");\n     *                 const request = store.get(params.keyId);\n     *                 request.onsuccess = function(e) {\n     *                     if (request.result) {\n     *                         resolve(request.result as FunctionKeyPair);\n     *                     } else {\n     *                         reject(new Error(\"Key not found\"));\n     *                     }\n     *                 };\n     *                 request.onerror = function(e) { reject(new Error(\"Error fetching key\")); };\n     *             };\n     *\n     *             request.onerror = function(e) { reject(new Error(\"Error opening database\")); };\n     *         });\n     *     }\n     *\n     *     // implement the other methods...\n     * }\n     *\n     *\n     * const keyProvider = new AleoKeyProvider();\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const searchParams = new IndexDbSearch({db: \"keys\", keyId: \"credits.aleo:transferPrivate\"});\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(searchParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair>;\n\n    /**\n     * Get fee_private function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get fee_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get join function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get split function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair>;\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    unBondPublicKeys(): Promise<FunctionKeyPair>;\n\n}\n\n\n/**\n * AleoKeyProvider class. Implements the KeyProvider interface. Enables the retrieval of Aleo program proving and\n * verifying keys for the credits.aleo program over http from official Aleo sources and storing and retrieving function\n * keys from a local memory cache.\n */\nclass AleoKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n    cacheOption: boolean;\n    keyUris: string;\n\n    async fetchBytes(\n        url = \"/\",\n    ): Promise<Uint8Array> {\n        try {\n        const response = await get(url);\n        const data = await response.arrayBuffer();\n        return new Uint8Array(data);\n        } catch (error: any) {\n            throw new Error(\"Error fetching data.\" + error.message);\n        }\n    }\n\n    constructor() {\n        this.keyUris = KEY_STORE;\n        this.cache = new Map<string, CachedKeyPair>();\n        this.cacheOption = false;\n    }\n\n    /**\n     * Use local memory to store keys\n     *\n     * @param {boolean} useCache whether to store keys in local memory\n     */\n    useCache(useCache: boolean) {\n        this.cacheOption = useCache;\n    }\n\n    /**\n     * Clear the key cache\n     */\n    clearCache() {\n        this.cache.clear();\n    }\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair) {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    }\n\n    /**\n     * Determine if a keyId exists in the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair\n     * @returns {boolean} true if the keyId exists in the cache, false otherwise\n     */\n    containsKeys(keyId: string): boolean {\n        return this.cache.has(keyId)\n    }\n\n    /**\n     * Delete a set of keys from the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair to delete from memory\n     * @returns {boolean} true if the keyId exists in the cache and was deleted, false if the key did not exist\n     */\n    deleteKeys(keyId: string): boolean {\n        return this.cache.delete(keyId)\n    }\n\n    /**\n     * Get a set of keys from the cache\n     * @param keyId keyId of a proving and verifying key pair\n     *\n     * @returns {FunctionKeyPair} Proving and verifying keys for the specified program\n     */\n    getKeys(keyId: string): FunctionKeyPair {\n        console.debug(`Checking if key exists in cache. KeyId: ${keyId}`)\n        if (this.cache.has(keyId)) {\n            const [provingKeyBytes, verifyingKeyBytes] = <CachedKeyPair>this.cache.get(keyId);\n            return [ProvingKey.fromBytes(provingKeyBytes), VerifyingKey.fromBytes(verifyingKeyBytes)];\n        } else {\n            throw new Error(\"Key not found in cache.\");\n        }\n    }\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams} params parameters for the key search in form of: {proverUri: string, verifierUri: string, cacheKey: string}\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually using the key provider\n     * const keySearchParams = { \"cacheKey\": \"myProgram:myFunction\" };\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(keySearchParams);\n     */\n    async functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair> {\n        if (params) {\n            let proverUrl;\n            let verifierUrl;\n            let cacheKey;\n            if (\"name\" in params && typeof params[\"name\"] == \"string\") {\n                let key = CREDITS_PROGRAM_KEYS.getKey(params[\"name\"]);\n                return this.fetchCreditsKeys(key);\n            }\n\n            if (\"proverUri\" in params && typeof params[\"proverUri\"] == \"string\") {\n                proverUrl = params[\"proverUri\"];\n            }\n\n            if (\"verifierUri\" in params && typeof params[\"verifierUri\"] == \"string\") {\n                verifierUrl = params[\"verifierUri\"];\n            }\n\n            if (\"cacheKey\" in params && typeof params[\"cacheKey\"] == \"string\") {\n                cacheKey = params[\"cacheKey\"];\n            }\n\n            if (proverUrl && verifierUrl) {\n                return await this.fetchRemoteKeys(proverUrl, verifierUrl, cacheKey);\n            }\n\n            if (cacheKey) {\n                return this.getKeys(cacheKey);\n            }\n        }\n        throw new Error(\"Invalid parameters provided, must provide either a cacheKey and/or a proverUrl and a verifierUrl\");\n    }\n\n    /**\n     * Returns the proving and verifying keys for a specified program from a specified url.\n     *\n     * @param {string} verifierUrl Url of the proving key\n     * @param {string} proverUrl Url the verifying key\n     * @param {string} cacheKey Key to store the keys in the cache\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new AleoKeyProvider object\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.fetchKeys(\n     *     CREDITS_PROGRAM_KEYS.transfer_private.prover,\n     *     CREDITS_PROGRAM_KEYS.transfer_private.verifier,\n     * );\n     */\n    async fetchRemoteKeys(proverUrl: string, verifierUrl: string, cacheKey?: string): Promise<FunctionKeyPair> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return [ProvingKey.fromBytes(value[0]), VerifyingKey.fromBytes(value[1])];\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                    console.debug(\"Fetching verifying keys \" + verifierUrl);\n                    const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                    this.cache.set(cacheKey, [provingKey.toBytes(), verifyingKey.toBytes()]);\n                    return [provingKey, verifyingKey];\n                }\n            }\n            else {\n                // If cache is disabled, fetch the keys and return them\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                return [provingKey, verifyingKey];\n            }\n        } catch (error: any) {\n            throw new Error(`Error: ${error.message} fetching fee proving and verifying keys from ${proverUrl} and ${verifierUrl}.`);\n        }\n    }\n\n    /***\n     * Fetches the proving key from a remote source.\n     *\n     * @param proverUrl\n     * @param cacheKey\n     *\n     * @returns {Promise<ProvingKey>} Proving key for the specified program\n     */\n    async fetchProvingKey(proverUrl: string, cacheKey?: string): Promise<ProvingKey> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return ProvingKey.fromBytes(value[0]);\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl));\n                    return provingKey;\n                }\n            }\n            else {\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl));\n                return provingKey;\n            }\n        } catch (error: any) {\n            throw new Error(`Error: ${error.message} fetching fee proving keys from ${proverUrl}`);\n        }\n    }\n\n    async fetchCreditsKeys(key: Key): Promise<FunctionKeyPair> {\n        try {\n            if (!this.cache.has(key.locator) || !this.cacheOption) {\n                const verifying_key = key.verifyingKey()\n                const proving_key = <ProvingKey>await this.fetchProvingKey(key.prover, key.locator);\n                if (this.cacheOption) {\n                    this.cache.set(CREDITS_PROGRAM_KEYS.bond_public.locator, [proving_key.toBytes(), verifying_key.toBytes()]);\n                }\n                return [proving_key, verifying_key];\n            } else {\n                const keyPair = <CachedKeyPair>this.cache.get(key.locator);\n                return [ProvingKey.fromBytes(keyPair[0]), VerifyingKey.fromBytes(keyPair[1])];\n            }\n        } catch (error: any) {\n            throw new Error(`Error: fetching credits.aleo keys: ${error.message}`);\n        }\n    }\n\n    async bondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.bond_public);\n    }\n\n    bondValidatorKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.bond_validator);\n    }\n\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.claim_unbond_public)\n    }\n\n    /**\n     * Returns the proving and verifying keys for the transfer functions in the credits.aleo program\n     * @param {string} visibility Visibility of the transfer function\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the transfer functions\n     *\n     * @example\n     * // Create a new AleoKeyProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    async transferKeys(visibility: string): Promise<FunctionKeyPair> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_private);\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_private_to_public);\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public);\n        } else if (PUBLIC_TRANSFER_AS_SIGNER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public_as_signer);\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public_to_private);\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the join function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    async joinKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.join);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the split function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the split function\n     * */\n    async splitKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.split);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_private function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the fee function\n     */\n    async feePrivateKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.fee_private);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_public function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the fee function\n     */\n    async feePublicKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.fee_public);\n    }\n\n    /**\n     * Gets a verifying key. If the verifying key is for a credits.aleo function, get it from the wasm cache otherwise\n     *\n     * @returns {Promise<VerifyingKey>} Verifying key for the function\n     */\n    // attempt to fetch it from the network\n    async getVerifyingKey(verifierUri: string): Promise<VerifyingKey> {\n        switch (verifierUri) {\n            case CREDITS_PROGRAM_KEYS.bond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.bond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.bond_validator.verifier:\n                return CREDITS_PROGRAM_KEYS.bond_validator.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.claim_unbond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_private.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_public.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.inclusion.verifier:\n                return CREDITS_PROGRAM_KEYS.inclusion.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.join.verifier:\n                return CREDITS_PROGRAM_KEYS.join.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.set_validator_state.verifier:\n                return CREDITS_PROGRAM_KEYS.set_validator_state.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.split.verifier:\n                return CREDITS_PROGRAM_KEYS.split.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public_as_signer.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public_as_signer.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.unbond_public.verifyingKey();\n            default:\n                try {\n                    /// Try to fetch the verifying key from the network as a string\n                    const response = await get(verifierUri);\n                    const text = await response.text();\n                    return <VerifyingKey>VerifyingKey.fromString(text);\n                } catch (e) {\n                    /// If that fails, try to fetch the verifying key from the network as bytes\n                    try {\n                    return <VerifyingKey>VerifyingKey.fromBytes(await this.fetchBytes(verifierUri));\n                    } catch (inner: any) {\n                        throw new Error(\"Invalid verifying key. Error: \" + inner.message);\n                    }\n                }\n        }\n    }\n\n    unBondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.unbond_public);\n    }\n}\n\nexport {AleoKeyProvider, AleoKeyProviderParams, AleoKeyProviderInitParams, CachedKeyPair, FunctionKeyPair, FunctionKeyProvider, KeySearchParams}\n","import { Account } from \"./account\";\nimport { AleoNetworkClient, ProgramImports } from \"./network-client\";\n\nimport {\n    RecordProvider,\n    RecordSearchParams,\n} from \"./record-provider\";\n\nimport {\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    KeySearchParams,\n} from \"./function-key-provider\";\n\nimport {\n    ExecutionResponse,\n    Execution as FunctionExecution,\n    OfflineQuery,\n    RecordPlaintext,\n    PrivateKey,\n    Program,\n    ProvingKey,\n    VerifyingKey,\n    Transaction,\n    ProgramManager as WasmProgramManager,\n    verifyFunctionExecution,\n} from \"./wasm\";\n\nimport {\n    CREDITS_PROGRAM_KEYS,\n    PRIVATE_TRANSFER_TYPES,\n    VALID_TRANSFER_TYPES,\n} from \"./constants\";\n\nimport { logAndThrow } from \"./utils\";\n\n/**\n * Represents the options for executing a transaction in the Aleo network.\n * This interface is used to specify the parameters required for building and submitting an execution transaction.\n *\n * @property {string} programName - The name of the program containing the function to be executed.\n * @property {string} functionName - The name of the function to execute within the program.\n * @property {number} fee - The fee to be paid for the transaction.\n * @property {boolean} privateFee - If true, uses a private record to pay the fee; otherwise, uses the account's public credit balance.\n * @property {string[]} inputs - The inputs to the function being executed.\n * @property {RecordSearchParams} [recordSearchParams] - Optional parameters for searching for a record to pay the execution transaction fee.\n * @property {KeySearchParams} [keySearchParams] - Optional parameters for finding the matching proving & verifying keys for the function.\n * @property {string | RecordPlaintext} [feeRecord] - Optional fee record to use for the transaction.\n * @property {ProvingKey} [provingKey] - Optional proving key to use for the transaction.\n * @property {VerifyingKey} [verifyingKey] - Optional verifying key to use for the transaction.\n * @property {PrivateKey} [privateKey] - Optional private key to use for the transaction.\n * @property {OfflineQuery} [offlineQuery] - Optional offline query if creating transactions in an offline environment.\n * @property {string | Program} [program] - Optional program source code to use for the transaction.\n * @property {ProgramImports} [imports] - Optional programs that the program being executed imports.\n */\ninterface ExecuteOptions {\n    programName: string;\n    functionName: string;\n    fee: number;\n    privateFee: boolean;\n    inputs: string[];\n    recordSearchParams?: RecordSearchParams;\n    keySearchParams?: KeySearchParams;\n    feeRecord?: string | RecordPlaintext;\n    provingKey?: ProvingKey;\n    verifyingKey?: VerifyingKey;\n    privateKey?: PrivateKey;\n    offlineQuery?: OfflineQuery;\n    program?: string | Program;\n    imports?: ProgramImports;\n}\n\n/**\n * The ProgramManager class is used to execute and deploy programs on the Aleo network and create value transfers.\n */\nclass ProgramManager {\n    account: Account | undefined;\n    keyProvider: FunctionKeyProvider;\n    host: string;\n    networkClient: AleoNetworkClient;\n    recordProvider: RecordProvider | undefined;\n\n    /** Create a new instance of the ProgramManager\n     *\n     * @param { string | undefined } host A host uri running the official Aleo API\n     * @param { FunctionKeyProvider | undefined } keyProvider A key provider that implements {@link FunctionKeyProvider} interface\n     * @param { RecordProvider | undefined } recordProvider A record provider that implements {@link RecordProvider} interface\n     */\n    constructor(host?: string | undefined, keyProvider?: FunctionKeyProvider | undefined, recordProvider?: RecordProvider | undefined) {\n        this.host = host ? host : 'https://api.explorer.provable.com/v1';\n        this.networkClient = new AleoNetworkClient(this.host);\n\n        this.keyProvider = keyProvider ? keyProvider : new AleoKeyProvider();\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Set the account to use for transaction submission to the Aleo network\n     *\n     * @param {Account} account Account to use for transaction submission\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Set the key provider that provides the proving and verifying keys for programs\n     *\n     * @param {FunctionKeyProvider} keyProvider\n     */\n    setKeyProvider(keyProvider: FunctionKeyProvider) {\n        this.keyProvider = keyProvider;\n    }\n\n    /**\n     * Set the host peer to use for transaction submission to the Aleo network\n     *\n     * @param host {string} Peer url to use for transaction submission\n     */\n    setHost(host: string) {\n        this.host = host;\n        this.networkClient.setHost(host);\n    }\n\n    /**\n     * Set the record provider that provides records for transactions\n     *\n     * @param {RecordProvider} recordProvider\n     */\n    setRecordProvider(recordProvider: RecordProvider) {\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Deploy an Aleo program to the Aleo network\n     *\n     * @param {string} program Program source code\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for searching for a record to use\n     * pay the deployment fee\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {string} The transaction id of the deployed program or a failure message from the network\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for deployments\n     * const program = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Define a fee in credits\n     * const fee = 1.2;\n     *\n     * // Deploy the program\n     * const tx_id = await programManager.deploy(program, fee);\n     *\n     * // Verify the transaction was successful\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async deploy(\n        program: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        feeRecord?: string | RecordPlaintext,\n        privateKey?: PrivateKey,\n    ): Promise<string> {\n        // Ensure the program is valid and does not exist on the network\n        try {\n            const programObject = Program.fromString(program);\n            let programSource;\n            try {\n                programSource = await this.networkClient.getProgram(programObject.id());\n            } catch (e) {\n                // Program does not exist on the network, deployment can proceed\n                console.log(`Program ${programObject.id()} does not exist on the network, deploying...`);\n            }\n            if (typeof programSource == \"string\") {\n                throw (`Program ${programObject.id()} already exists on the network, please rename your program`);\n            }\n        } catch (e: any) {\n            logAndThrow(`Error validating program: ${e.message}`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let deploymentPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            deploymentPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof deploymentPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e: any) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n        } catch (e: any) {\n            logAndThrow(`Error finding program imports. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build a deployment transaction and submit it to the network\n        const tx = await WasmProgramManager.buildDeploymentTransaction(deploymentPrivateKey, program, fee, feeRecord, this.host, imports, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const transaction = await programManager.buildExecutionTransaction({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   fee: 0.020,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async buildExecutionTransaction(options: ExecuteOptions): Promise<Transaction> {\n        // Destructure the options object to access the parameters\n        const {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            recordSearchParams,\n            keySearchParams,\n            privateKey,\n            offlineQuery\n        } = options;\n\n        let feeRecord = options.feeRecord;\n        let provingKey = options.provingKey;\n        let verifyingKey = options.verifyingKey;\n        let program = options.program;\n        let imports = options.imports;\n\n        // Ensure the function exists on the network\n        if (program === undefined) {\n            try {\n                program = <string>(await this.networkClient.getProgram(programName));\n            } catch (e: any) {\n                logAndThrow(`Error finding ${programName}. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`);\n            }\n        } else if (program instanceof Program) {\n            program = program.toString();\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e: any) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the fee proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Resolve the program imports if they exist\n        const numberOfImports = Program.fromString(program).getImports().length;\n        if (numberOfImports > 0 && !imports) {\n            try {\n                imports = <ProgramImports>await this.networkClient.getProgramImports(programName);\n            } catch (e: any) {\n                logAndThrow(`Error finding program imports. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n            }\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildExecutionTransaction(executionPrivateKey, program, functionName, inputs, fee, feeRecord, this.host, imports, provingKey, verifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const transaction = await programManager.execute({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   fee: 0.020,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async execute(options: ExecuteOptions): Promise<string> {\n        const tx = <Transaction>await this.buildExecutionTransaction(options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Run an Aleo program in offline mode\n     *\n     * @param {string} program Program source code containing the function to be executed\n     * @param {string} function_name Function name to execute\n     * @param {string[]} inputs Inputs to the function\n     * @param {number} proveExecution Whether to prove the execution of the function and return an execution transcript\n     * that contains the proof.\n     * @param {string[] | undefined} imports Optional imports to the program\n     * @param {KeySearchParams | undefined} keySearchParams Optional parameters for finding the matching proving &\n     * verifying keys for the function\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>}\n     *\n     * @example\n     * import { Account, Program } from '@provablehq/sdk';\n     *\n     * /// Create the source for the \"helloworld\" program\n     * const program = \"program helloworld.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager();\n     *\n     * /// Create a temporary account for the execution of the program\n     * const account = new Account();\n     * programManager.setAccount(account);\n     *\n     * /// Get the response and ensure that the program executed correctly\n     * const executionResponse = await programManager.run(program, \"hello\", [\"5u32\", \"5u32\"]);\n     * const result = executionResponse.getOutputs();\n     * assert(result === [\"10u32\"]);\n     */\n    async run(\n        program: string,\n        function_name: string,\n        inputs: string[],\n        proveExecution: boolean,\n        imports?: ProgramImports,\n        keySearchParams?: KeySearchParams,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<ExecutionResponse> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Run the program offline and return the result\n        console.log(\"Running program offline\")\n        console.log(\"Proving key: \", provingKey);\n        console.log(\"Verifying key: \", verifyingKey);\n        return WasmProgramManager.executeFunctionOffline(executionPrivateKey, program, function_name, inputs, proveExecution, false, imports, provingKey, verifyingKey, this.host, offlineQuery);\n    }\n\n    /**\n     * Join two credits records into a single credits record\n     *\n     * @param {RecordPlaintext | string} recordOne First credits record to join\n     * @param {RecordPlaintext | string} recordTwo Second credits record to join\n     * @param {number} fee Fee in credits pay for the join transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the fee record to use\n     * to pay the fee for the join transaction\n     * @param {RecordPlaintext | string | undefined} feeRecord Fee record to use for the join transaction\n     * @param {PrivateKey | undefined} privateKey Private key to use for the join transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>}\n     */\n    async join(\n        recordOne: RecordPlaintext | string,\n        recordTwo: RecordPlaintext | string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams | undefined,\n        feeRecord?: RecordPlaintext | string | undefined,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<string> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let joinKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            joinKeys = <FunctionKeyPair>await this.keyProvider.joinKeys();\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [joinProvingKey, joinVerifyingKey] = joinKeys;\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e: any) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Validate the records provided are valid plaintext records\n        try {\n            recordOne = recordOne instanceof RecordPlaintext ? recordOne : RecordPlaintext.fromString(recordOne);\n            recordTwo = recordTwo instanceof RecordPlaintext ? recordTwo : RecordPlaintext.fromString(recordTwo);\n        } catch (e: any) {\n            logAndThrow('Records provided are not valid. Please ensure they are valid plaintext records.')\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildJoinTransaction(executionPrivateKey, recordOne, recordTwo, fee, feeRecord, this.host, joinProvingKey, joinVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Split credits into two new credits records\n     *\n     * @param {number} splitAmount Amount in microcredits to split from the original credits record\n     * @param {RecordPlaintext | string} amountRecord Amount record to use for the split transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the split transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * const record = \"{  owner: aleo184vuwr5u7u0ha5f5k44067dd2uaqewxx6pe5ltha5pv99wvhfqxqv339h4.private,  microcredits: 45000000u64.private,  _nonce: 4106205762862305308495708971985748592380064201230396559307556388725936304984group.public}\"\n     * const tx_id = await programManager.split(25000000, record);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async split(splitAmount: number, amountRecord: RecordPlaintext | string, privateKey?: PrivateKey, offlineQuery?: OfflineQuery): Promise<string> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the split keys from the key provider\n        let splitKeys;\n        try {\n            splitKeys = <FunctionKeyPair>await this.keyProvider.splitKeys();\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [splitProvingKey, splitVerifyingKey] = splitKeys;\n\n        // Validate the record to be split\n        try {\n            amountRecord = amountRecord instanceof RecordPlaintext ? amountRecord : RecordPlaintext.fromString(amountRecord);\n        } catch (e: any) {\n            logAndThrow(\"Record provided is not valid. Please ensure it is a valid plaintext record.\");\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildSplitTransaction(executionPrivateKey, splitAmount, amountRecord, this.host, splitProvingKey, splitVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Pre-synthesize proving and verifying keys for a program\n     *\n     * @param program {string} The program source code to synthesize keys for\n     * @param function_id {string} The function id to synthesize keys for\n     * @param inputs {Array<string>}  Sample inputs to the function\n     * @param privateKey {PrivateKey | undefined} Optional private key to use for the key synthesis\n     *\n     * @returns {Promise<FunctionKeyPair>}\n     */\n    async synthesizeKeys(\n        program: string,\n        function_id: string,\n        inputs: Array<string>,\n        privateKey?: PrivateKey,\n    ): Promise<FunctionKeyPair> {\n        // Resolve the program imports if they exist\n        let imports;\n\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\") {\n            if (typeof this.account !== \"undefined\") {\n                executionPrivateKey = this.account.privateKey();\n            } else {\n                executionPrivateKey = new PrivateKey();\n            }\n        }\n\n        // Attempt to run an offline execution of the program and extract the proving and verifying keys\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n            const keyPair = await WasmProgramManager.synthesizeKeyPair(\n                executionPrivateKey,\n                program,\n                function_id,\n                inputs,\n                imports\n            );\n            return [<ProvingKey>keyPair.provingKey(), <VerifyingKey>keyPair.verifyingKey()];\n        } catch (e: any) {\n            logAndThrow(`Could not synthesize keys - error ${e.message}. Please ensure the program is valid and the inputs are correct.`);\n        }\n    }\n\n    /**\n     * Build a transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async buildTransferTransaction(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction> {\n        // Validate the transfer type\n        transferType = <string>validateTransferType(transferType);\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let transferKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            transferKeys = <FunctionKeyPair>await this.keyProvider.transferKeys(transferType);\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [transferProvingKey, transferVerifyingKey] = transferKeys;\n\n        // Get the amount and fee record from the account if it is not provided in the parameters\n        try {\n            // Track the nonces of the records found so no duplicate records are used\n            const nonces: string[] = [];\n            if (requiresAmountRecord(transferType)) {\n                // If the transfer type is private and requires an amount record, get it from the record provider\n                amountRecord = <RecordPlaintext>await this.getCreditsRecord(fee, [], amountRecord, recordSearchParams);\n                nonces.push(amountRecord.nonce());\n            } else {\n                amountRecord = undefined;\n            }\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, nonces, feeRecord, recordSearchParams) : undefined;\n        } catch (e: any) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildTransferTransaction(executionPrivateKey, amount, recipient, transferType, amountRecord, fee, feeRecord, this.host, transferProvingKey, transferVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Build a transfer_public transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     */\n    async buildTransferPublicTransaction(\n        amount: number,\n        recipient: string,\n        fee: number,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction> {\n        return this.buildTransferTransaction(amount, recipient, \"public\", fee, false, undefined, undefined, undefined, privateKey, offlineQuery);\n    }\n\n    /**\n     * Build a transfer_public_as_signer transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     */\n    async buildTransferPublicAsSignerTransaction(\n        amount: number,\n        recipient: string,\n        fee: number,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction> {\n        return this.buildTransferTransaction(amount, recipient, \"public\", fee, false, undefined, undefined, undefined, privateKey, offlineQuery);\n    }\n\n    /**\n     * Transfer credits to another account\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async transfer(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<string> {\n        const tx = <Transaction>await this.buildTransferTransaction(amount, recipient, transferType, fee, privateFee, recordSearchParams, amountRecord, feeRecord, privateKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build transaction to bond credits to a validator for later submission to the Aleo Network\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction object for later submission\n     * const tx = await programManager.buildBondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can be later submitted to the network using the network client.\n     * const result = await programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is bonding the credits\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async buildBondPublicTransaction(staker_address: string, validator_address: string, withdrawal_address: string, amount: number, options: Partial<ExecuteOptions> = {}) {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"bond_public\",\n            fee = options.fee || 0.86,\n            privateFee = false,\n            inputs = [staker_address, validator_address, withdrawal_address, `${scaledAmount.toString()}u64`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.bond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.bond_public.verifier,\n                cacheKey: \"credits.aleo/bond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Bond credits to validator.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is bonding the credits\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the signer (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 1,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {Options} options Options for the execution\n     */\n    async bondPublic(staker_address: string, validator_address: string, withdrawal_address:string, amount: number, options: Partial<ExecuteOptions> = {}) {\n        const tx = <Transaction>await this.buildBondPublicTransaction(staker_address, validator_address, withdrawal_address, amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a bond_validator transaction for later submission to the Aleo Network.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bond validator transaction object for later use.\n     * const tx = await programManager.buildBondValidatorTransaction(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can later be submitted to the network using the network client.\n     * const tx_id = await programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {number} commission The commission rate for the validator (must be between 0 and 100 - an error will be thrown if it is not)\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async buildBondValidatorTransaction(validator_address: string, withdrawal_address: string, amount: number, commission: number, options: Partial<ExecuteOptions> = {}) {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const adjustedCommission = Math.trunc(commission)\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"bond_validator\",\n            fee = options.fee || 0.86,\n            privateFee = false,\n            inputs = [validator_address, withdrawal_address, `${scaledAmount.toString()}u64`, `${adjustedCommission.toString()}u8`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.bond_validator.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.bond_validator.verifier,\n                cacheKey: \"credits.aleo/bond_validator\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Build transaction to bond a validator.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondValidator(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     *\n     * @returns string\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {number} commission The commission rate for the validator (must be between 0 and 100 - an error will be thrown if it is not)\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async bondValidator(validator_address: string, withdrawal_address: string, amount: number, commission: number, options: Partial<ExecuteOptions> = {}) {\n        const tx = <Transaction>await this.buildBondValidatorTransaction(validator_address, withdrawal_address, amount, commission, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to unbond public credits from a validator in the Aleo network.\n     *\n     * @param {string} staker_address - The address of the staker who is unbonding the credits.\n     * @param {number} amount - The amount of credits to unbond (scaled by 1,000,000).\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * // Create a keyProvider to handle key management.\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to unbond credits.\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * const tx = await programManager.buildUnbondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     */\n    async buildUnbondPublicTransaction(staker_address: string, amount: number, options: Partial<ExecuteOptions> = {}): Promise<Transaction> {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"unbond_public\",\n            fee = options.fee || 1.3,\n            privateFee = false,\n            inputs = [staker_address, `${scaledAmount.toString()}u64`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.unbond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.unbond_public.verifier,\n                cacheKey: \"credits.aleo/unbond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Unbond a specified amount of staked credits.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction and send it to the network\n     * const tx_id = await programManager.unbondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", 10);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is unbonding the credits\n     * @param {number} amount Amount of credits to unbond. If the address of the executor of this function is an\n     * existing validator, it will subtract this amount of credits from the validator's staked credits. If there are\n     * less than 1,000,000 credits staked pool after the unbond, the validator will be removed from the validator set.\n     * If the address of the executor of this function is not a validator and has credits bonded as a delegator, it will\n     * subtract this amount of credits from the delegator's staked credits. If there are less than 10 credits bonded\n     * after the unbond operation, the delegator will be removed from the validator's staking pool.\n     * @param {ExecuteOptions} options Options for the execution\n     */\n    async unbondPublic(staker_address: string, amount: number, options: Partial<ExecuteOptions> = {}): Promise<string> {\n        const tx = <Transaction>await this.buildUnbondPublicTransaction(staker_address, amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to claim unbonded public credits in the Aleo network.\n     *\n     * @param {string} staker_address - The address of the staker who is claiming the credits.\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to claim unbonded credits.\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     *\n     * // Create the claim unbonded transaction object for later use.\n     * const tx = await programManager.buildClaimUnbondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\");\n     * console.log(tx);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     */\n    async buildClaimUnbondPublicTransaction(staker_address: string, options: Partial<ExecuteOptions> = {}): Promise<Transaction> {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"claim_unbond_public\",\n            fee = options.fee || 2,\n            privateFee = false,\n            inputs = [staker_address],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier,\n                cacheKey: \"credits.aleo/claim_unbond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Claim unbonded credits. If credits have been unbonded by the account executing this function, this method will\n     * claim them and add them to the public balance of the account.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.claimUnbondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\");\n     *\n     * @param {string} staker_address Address of the staker who is claiming the credits\n     * @param {ExecuteOptions} options\n     * @returns string\n     */\n    async claimUnbondPublic(staker_address: string, options: Partial<ExecuteOptions> = {}): Promise<string> {\n        const tx = <Transaction>await this.buildClaimUnbondPublicTransaction(staker_address, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a set_validator_state transaction for later usage.\n     *\n     * This function allows a validator to set their state to be either opened or closed to new stakers.\n     * When the validator is open to new stakers, any staker (including the validator) can bond or unbond from the validator.\n     * When the validator is closed to new stakers, existing stakers can still bond or unbond from the validator, but new stakers cannot bond.\n     *\n     * This function serves two primary purposes:\n     * 1. Allow a validator to leave the committee, by closing themselves to stakers and then unbonding all of their stakers.\n     * 2. Allow a validator to maintain their % of stake, by closing themselves to allowing more stakers to bond to them.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"ValidatorPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx = await programManager.buildSetValidatorStateTransaction(true);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {boolean} validator_state\n     * @param {Partial<ExecuteOptions>} options - Override default execution options\n     */\n    async buildSetValidatorStateTransaction(validator_state: boolean, options: Partial<ExecuteOptions> = {}) {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"set_validator_state\",\n            fee = 1,\n            privateFee = false,\n            inputs = [validator_state.toString()],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.set_validator_state.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.set_validator_state.verifier,\n                cacheKey: \"credits.aleo/set_validator_state\"\n            }),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.execute(executeOptions);\n    }\n\n    /**\n     * Submit a set_validator_state transaction to the Aleo Network.\n     *\n     * This function allows a validator to set their state to be either opened or closed to new stakers.\n     * When the validator is open to new stakers, any staker (including the validator) can bond or unbond from the validator.\n     * When the validator is closed to new stakers, existing stakers can still bond or unbond from the validator, but new stakers cannot bond.\n     *\n     * This function serves two primary purposes:\n     * 1. Allow a validator to leave the committee, by closing themselves to stakers and then unbonding all of their stakers.\n     * 2. Allow a validator to maintain their % of stake, by closing themselves to allowing more stakers to bond to them.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"ValidatorPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.setValidatorState(true);\n     *\n     * @returns string\n     * @param {boolean} validator_state\n     * @param {Partial<ExecuteOptions>} options - Override default execution options\n     */\n    async setValidatorState(validator_state: boolean, options: Partial<ExecuteOptions> = {}) {\n        const tx = <string>await this.buildSetValidatorStateTransaction(validator_state, options);\n        return this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Verify a proof of execution from an offline execution\n     *\n     * @param {executionResponse} executionResponse\n     * @returns {boolean} True if the proof is valid, false otherwise\n     */\n    verifyExecution(executionResponse: ExecutionResponse): boolean {\n        try {\n            const execution = <FunctionExecution>executionResponse.getExecution();\n            const function_id = executionResponse.getFunctionId();\n            const program = executionResponse.getProgram();\n            const verifyingKey = executionResponse.getVerifyingKey();\n            return verifyFunctionExecution(execution, verifyingKey, program, function_id);\n        } catch(e) {\n            console.warn(\"The execution was not found in the response, cannot verify the execution\");\n            return false;\n        }\n    }\n\n    /**\n     * Create a program object from a program's source code\n     *\n     * @param {string} program Program source code\n     * @returns {Program} The program object\n     */\n    createProgramFromSource(program: string): Program {\n        return Program.fromString(program);\n    }\n\n    /**\n     * Get the credits program object\n     *\n     * @returns {Program} The credits program object\n     */\n    creditsProgram(): Program {\n        return Program.getCreditsProgram();\n    }\n\n    /**\n     * Verify a program is valid\n     *\n     * @param {string} program The program source code\n     */\n    verifyProgram(program: string): boolean {\n        try {\n            <Program>Program.fromString(program);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    // Internal utility function for getting a credits.aleo record\n    async getCreditsRecord(amount: number, nonces: string[], record?: RecordPlaintext | string, params?: RecordSearchParams): Promise<RecordPlaintext> {\n        try {\n            return record instanceof RecordPlaintext ? record : RecordPlaintext.fromString(<string>record);\n        } catch (e) {\n            try {\n                const recordProvider = <RecordProvider>this.recordProvider;\n                return <RecordPlaintext>(await recordProvider.findCreditsRecord(amount, true, nonces, params))\n            } catch (e: any) {\n                logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n            }\n        }\n    }\n}\n\n// Ensure the transfer type requires an amount record\nfunction requiresAmountRecord(transferType: string): boolean {\n    return PRIVATE_TRANSFER_TYPES.has(transferType);\n}\n\n// Validate the transfer type\nfunction validateTransferType(transferType: string): string {\n    return VALID_TRANSFER_TYPES.has(transferType) ? transferType :\n        logAndThrow(`Invalid transfer type '${transferType}'. Valid transfer types are 'private', 'privateToPublic', 'public', and 'publicToPrivate'.`);\n}\n\nexport { ProgramManager }\n","function spawnWorker(url, module, memory, address) {\n        return new Promise((resolve) => {\n            const worker = new Worker(url, {\n                type: \"module\",\n            });\n\n            worker.addEventListener(\"message\", (event) => {\n                // This is needed in Node to wait one extra tick, so that way\n                // the Worker can fully initialize before we return.\n                setTimeout(() => {\n                    resolve(worker);\n\n                    // When running in Node, this allows the process to exit\n                    // even though the Worker is still running.\n                    if (worker.unref) {\n                        worker.unref();\n                    }\n                }, 0);\n            }, {\n                capture: true,\n                once: true,\n            });\n\n            worker.postMessage({\n                module,\n                memory,\n                address,\n            });\n        });\n    }\n\nlet wasm;\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); }\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().slice(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_3.get(state.dtor)(state.a, state.b);\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_3.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\nfunction __wbg_adapter_34(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h6a363ba3fe56b221(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* Verify an execution with a single function and a single transition. Executions with multiple\n* transitions or functions will fail to verify. Also, this does not verify that the state root of\n* the execution is included in the Aleo Network ledger.\n*\n* @param {Execution} execution The function execution to verify\n* @param {VerifyingKey} verifying_key The verifying key for the function\n* @param {Program} program The program that the function execution belongs to\n* @param {String} function_id The name of the function that was executed\n* @returns {boolean} True if the execution is valid, false otherwise\n* @param {Execution} execution\n* @param {VerifyingKey} verifying_key\n* @param {Program} program\n* @param {string} function_id\n* @returns {boolean}\n*/\nfunction verifyFunctionExecution(execution, verifying_key, program, function_id) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(execution, Execution);\n        _assertClass(verifying_key, VerifyingKey);\n        _assertClass(program, Program);\n        const ptr0 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.verifyFunctionExecution(retptr, execution.__wbg_ptr, verifying_key.__wbg_ptr, program.__wbg_ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return r0 !== 0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nlet cachedBigInt64Memory0 = null;\n\nfunction getBigInt64Memory0() {\n    if (cachedBigInt64Memory0 === null || cachedBigInt64Memory0.buffer !== wasm.memory.buffer) {\n        cachedBigInt64Memory0 = new BigInt64Array(wasm.memory.buffer);\n    }\n    return cachedBigInt64Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {number} receiver\n*/\nfunction runRayonThread(receiver) {\n    wasm.runRayonThread(receiver);\n}\n\n/**\n* @param {URL} url\n* @param {number} num_threads\n* @returns {Promise<void>}\n*/\nfunction initThreadPool(url, num_threads) {\n    const ret = wasm.initThreadPool(addHeapObject(url), num_threads);\n    return takeObject(ret);\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_282(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__h3c510d875601a93b(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\nconst AddressFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_address_free(ptr >>> 0));\n/**\n* Public address of an Aleo account\n*/\nclass Address {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Address.prototype);\n        obj.__wbg_ptr = ptr;\n        AddressFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AddressFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n    * Derive an Aleo address from a private key\n    *\n    * @param {PrivateKey} private_key The private key to derive the address from\n    * @returns {Address} Address corresponding to the private key\n    * @param {PrivateKey} private_key\n    * @returns {Address}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.address_from_private_key(private_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Derive an Aleo address from a view key\n    *\n    * @param {ViewKey} view_key The view key to derive the address from\n    * @returns {Address} Address corresponding to the view key\n    * @param {ViewKey} view_key\n    * @returns {Address}\n    */\n    static from_view_key(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.address_from_view_key(view_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Create an aleo address object from a string representation of an address\n    *\n    * @param {string} address String representation of an addressm\n    * @returns {Address} Address\n    * @param {string} address\n    * @returns {Address}\n    */\n    static from_string(address) {\n        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.address_from_string(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Get a string representation of an Aleo address object\n    *\n    * @param {Address} Address\n    * @returns {string} String representation of the address\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Verify a signature for a message signed by the address\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {boolean} Boolean representing whether or not the signature is valid\n    * @param {Uint8Array} message\n    * @param {Signature} signature\n    * @returns {boolean}\n    */\n    verify(message, signature) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Signature);\n        const ret = wasm.address_verify(this.__wbg_ptr, ptr0, len0, signature.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst ExecutionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_execution_free(ptr >>> 0));\n/**\n* Execution of an Aleo program.\n*/\nclass Execution {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Execution.prototype);\n        obj.__wbg_ptr = ptr;\n        ExecutionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ExecutionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_execution_free(ptr);\n    }\n    /**\n    * Returns the string representation of the execution.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.execution_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates an execution object from a string representation of an execution.\n    * @param {string} execution\n    * @returns {Execution}\n    */\n    static fromString(execution) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(execution, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.execution_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Execution.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ExecutionResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_executionresponse_free(ptr >>> 0));\n/**\n* Webassembly Representation of an Aleo function execution response\n*\n* This object is returned by the execution of an Aleo function off-chain. It provides methods for\n* retrieving the outputs of the function execution.\n*/\nclass ExecutionResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ExecutionResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        ExecutionResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ExecutionResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_executionresponse_free(ptr);\n    }\n    /**\n    * Get the outputs of the executed function\n    *\n    * @returns {Array} Array of strings representing the outputs of the function\n    * @returns {Array<any>}\n    */\n    getOutputs() {\n        const ret = wasm.executionresponse_getOutputs(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns the execution object if present, null if otherwise.\n    *\n    * @returns {Execution | undefined} The execution object if present, null if otherwise\n    * @returns {Execution | undefined}\n    */\n    getExecution() {\n        const ret = wasm.executionresponse_getExecution(this.__wbg_ptr);\n        return ret === 0 ? undefined : Execution.__wrap(ret);\n    }\n    /**\n    * Returns the program keys if present\n    * @returns {KeyPair}\n    */\n    getKeys() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.executionresponse_getKeys(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the proving_key if the proving key was cached in the Execution response.\n    * Note the proving key is removed from the response object after the first call to this\n    * function. Subsequent calls will return null.\n    *\n    * @returns {ProvingKey | undefined} The proving key\n    * @returns {ProvingKey | undefined}\n    */\n    getProvingKey() {\n        const ret = wasm.executionresponse_getProvingKey(this.__wbg_ptr);\n        return ret === 0 ? undefined : ProvingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying_key associated with the program\n    *\n    * @returns {VerifyingKey} The verifying key\n    * @returns {VerifyingKey}\n    */\n    getVerifyingKey() {\n        const ret = wasm.executionresponse_getVerifyingKey(this.__wbg_ptr);\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the function identifier\n    * @returns {string}\n    */\n    getFunctionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.executionresponse_getFunctionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the program\n    * @returns {Program}\n    */\n    getProgram() {\n        const ret = wasm.executionresponse_getProgram(this.__wbg_ptr);\n        return Program.__wrap(ret);\n    }\n}\n\nconst FieldFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_field_free(ptr >>> 0));\n/**\n*/\nclass Field {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Field.prototype);\n        obj.__wbg_ptr = ptr;\n        FieldFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FieldFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_field_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.field_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} field\n    * @returns {Field}\n    */\n    static fromString(field) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(field, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.field_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Field.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst KeyPairFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keypair_free(ptr >>> 0));\n/**\n* Key pair object containing both the function proving and verifying keys\n*/\nclass KeyPair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeyPair.prototype);\n        obj.__wbg_ptr = ptr;\n        KeyPairFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeyPairFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keypair_free(ptr);\n    }\n    /**\n    * Create new key pair from proving and verifying keys\n    *\n    * @param {ProvingKey} proving_key Proving key corresponding to a function in an Aleo program\n    * @param {VerifyingKey} verifying_key Verifying key corresponding to a function in an Aleo program\n    * @returns {KeyPair} Key pair object containing both the function proving and verifying keys\n    * @param {ProvingKey} proving_key\n    * @param {VerifyingKey} verifying_key\n    */\n    constructor(proving_key, verifying_key) {\n        _assertClass(proving_key, ProvingKey);\n        var ptr0 = proving_key.__destroy_into_raw();\n        _assertClass(verifying_key, VerifyingKey);\n        var ptr1 = verifying_key.__destroy_into_raw();\n        const ret = wasm.keypair_new(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        return this;\n    }\n    /**\n    * Get the proving key. This method will remove the proving key from the key pair\n    *\n    * @returns {ProvingKey}\n    * @returns {ProvingKey}\n    */\n    provingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_provingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the verifying key. This method will remove the verifying key from the key pair\n    *\n    * @returns {VerifyingKey}\n    * @returns {VerifyingKey}\n    */\n    verifyingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_verifyingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst MetadataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_metadata_free(ptr >>> 0));\n/**\n*/\nclass Metadata {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Metadata.prototype);\n        obj.__wbg_ptr = ptr;\n        MetadataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MetadataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_metadata_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    get name() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_name(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set name(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_name(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    get locator() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_locator(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set locator(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_locator(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    get prover() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_prover(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set prover(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_prover(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    get verifier() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_verifier(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set verifier(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_verifier(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    get verifyingKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_metadata_verifyingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} arg0\n    */\n    set verifyingKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_metadata_verifyingKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    static baseUrl() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.metadata_baseUrl(retptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static bond_public() {\n        const ret = wasm.metadata_bond_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static bond_validator() {\n        const ret = wasm.metadata_bond_validator();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static claim_unbond_public() {\n        const ret = wasm.metadata_claim_unbond_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static fee_private() {\n        const ret = wasm.metadata_fee_private();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static fee_public() {\n        const ret = wasm.metadata_fee_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static inclusion() {\n        const ret = wasm.metadata_inclusion();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static join() {\n        const ret = wasm.metadata_join();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static set_validator_state() {\n        const ret = wasm.metadata_set_validator_state();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static split() {\n        const ret = wasm.metadata_split();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_private() {\n        const ret = wasm.metadata_transfer_private();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_private_to_public() {\n        const ret = wasm.metadata_transfer_private_to_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_public() {\n        const ret = wasm.metadata_transfer_public();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_public_as_signer() {\n        const ret = wasm.metadata_transfer_public_as_signer();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static transfer_public_to_private() {\n        const ret = wasm.metadata_transfer_public_to_private();\n        return Metadata.__wrap(ret);\n    }\n    /**\n    * @returns {Metadata}\n    */\n    static unbond_public() {\n        const ret = wasm.metadata_unbond_public();\n        return Metadata.__wrap(ret);\n    }\n}\n\nconst OfflineQueryFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_offlinequery_free(ptr >>> 0));\n/**\n* An offline query object used to insert the global state root and state paths needed to create\n* a valid inclusion proof offline.\n*/\nclass OfflineQuery {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OfflineQuery.prototype);\n        obj.__wbg_ptr = ptr;\n        OfflineQueryFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OfflineQueryFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_offlinequery_free(ptr);\n    }\n    /**\n    * Creates a new offline query object. The state root is required to be passed in as a string\n    * @param {number} block_height\n    * @param {string} state_root\n    */\n    constructor(block_height, state_root) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(state_root, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.offlinequery_new(retptr, block_height, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Add a new block height to the offline query object.\n    * @param {number} block_height\n    */\n    addBlockHeight(block_height) {\n        wasm.offlinequery_addBlockHeight(this.__wbg_ptr, block_height);\n    }\n    /**\n    * Add a new state path to the offline query object.\n    *\n    * @param {string} commitment: The commitment corresponding to a record inpout\n    * @param {string} state_path: The state path corresponding to the commitment\n    * @param {string} commitment\n    * @param {string} state_path\n    */\n    addStatePath(commitment, state_path) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(commitment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(state_path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.offlinequery_addStatePath(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a json string representation of the offline query object\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.offlinequery_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create an offline query object from a json string representation\n    * @param {string} s\n    * @returns {OfflineQuery}\n    */\n    static fromString(s) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.offlinequery_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return OfflineQuery.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst PrivateKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_privatekey_free(ptr >>> 0));\n/**\n* Private key of an Aleo account\n*/\nclass PrivateKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKey.prototype);\n        obj.__wbg_ptr = ptr;\n        PrivateKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PrivateKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n    * Generate a new private key using a cryptographically secure random number generator\n    *\n    * @returns {PrivateKey}\n    */\n    constructor() {\n        const ret = wasm.privatekey_new();\n        this.__wbg_ptr = ret >>> 0;\n        return this;\n    }\n    /**\n    * Get a private key from a series of unchecked bytes\n    *\n    * @param {Uint8Array} seed Unchecked 32 byte long Uint8Array acting as the seed for the private key\n    * @returns {PrivateKey}\n    * @param {Uint8Array} seed\n    * @returns {PrivateKey}\n    */\n    static from_seed_unchecked(seed) {\n        const ptr0 = passArray8ToWasm0(seed, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_from_seed_unchecked(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a string representation of a private key\n    *\n    * @param {string} seed String representation of a private key\n    * @returns {PrivateKey}\n    * @param {string} private_key\n    * @returns {PrivateKey}\n    */\n    static from_string(private_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(private_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_string(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the private key. This function should be used very carefully\n    * as it exposes the private key plaintext\n    *\n    * @returns {string} String representation of a private key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the view key corresponding to the private key\n    *\n    * @returns {ViewKey}\n    * @returns {ViewKey}\n    */\n    to_view_key() {\n        const ret = wasm.privatekey_to_view_key(this.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get the address corresponding to the private key\n    *\n    * @returns {Address}\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.privatekey_to_address(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Sign a message with the private key\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {Signature} Signature generated by signing the message with the address\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    sign(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(this.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a new randomly generated private key ciphertext using a secret. The secret is sensitive\n    * and will be needed to decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static newEncrypted(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_newEncrypted(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt an existing private key with a secret. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    toCiphertext(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get private key from a private key ciphertext and secret originally used to encrypt it\n    *\n    * @param {PrivateKeyCiphertext} ciphertext Ciphertext representation of the private key\n    * @param {string} secret Secret originally used to encrypt the private key\n    * @returns {PrivateKey} Private key\n    * @param {PrivateKeyCiphertext} ciphertext\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    static fromPrivateKeyCiphertext(ciphertext, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(ciphertext, PrivateKeyCiphertext);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_fromPrivateKeyCiphertext(retptr, ciphertext.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst PrivateKeyCiphertextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_privatekeyciphertext_free(ptr >>> 0));\n/**\n* Private Key in ciphertext form\n*/\nclass PrivateKeyCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKeyCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n        PrivateKeyCiphertextFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PrivateKeyCiphertextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekeyciphertext_free(ptr);\n    }\n    /**\n    * Encrypt a private key using a secret string. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {PrivateKey} private_key Private key to encrypt\n    * @param {string} secret Secret to encrypt the private key with\n    * @returns {PrivateKeyCiphertext} Private key ciphertext\n    * @param {PrivateKey} private_key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static encryptPrivateKey(private_key, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, private_key.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Decrypts a private ciphertext using a secret string. This must be the same secret used to\n    * encrypt the private key\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKey} Private key\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    decryptToPrivateKey(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_decryptToPrivateKey(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the ciphertext string\n    *\n    * @returns {string} Ciphertext string\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekeyciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates a PrivateKeyCiphertext from a string\n    *\n    * @param {string} ciphertext Ciphertext string\n    * @returns {PrivateKeyCiphertext} Private key ciphertext\n    * @param {string} ciphertext\n    * @returns {PrivateKeyCiphertext}\n    */\n    static fromString(ciphertext) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ProgramFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_program_free(ptr >>> 0));\n/**\n* Webassembly Representation of an Aleo program\n*/\nclass Program {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Program.prototype);\n        obj.__wbg_ptr = ptr;\n        ProgramFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ProgramFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_program_free(ptr);\n    }\n    /**\n    * Create a program from a program string\n    *\n    * @param {string} program Aleo program source code\n    * @returns {Program} Program object\n    * @param {string} program\n    * @returns {Program}\n    */\n    static fromString(program) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the program\n    *\n    * @returns {string} String containing the program source code\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Determine if a function is present in the program\n    *\n    * @param {string} functionName Name of the function to check for\n    * @returns {boolean} True if the program is valid, false otherwise\n    * @param {string} function_name\n    * @returns {boolean}\n    */\n    hasFunction(function_name) {\n        const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.program_hasFunction(this.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get javascript array of functions names in the program\n    *\n    * @returns {Array} Array of all function names present in the program\n    *\n    * @example\n    * const expected_functions = [\n    *   \"mint\",\n    *   \"transfer_private\",\n    *   \"transfer_private_to_public\",\n    *   \"transfer_public\",\n    *   \"transfer_public_to_private\",\n    *   \"join\",\n    *   \"split\",\n    *   \"fee\"\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_functions = credits_program.getFunctions();\n    * console.log(credits_functions === expected_functions); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getFunctions() {\n        const ret = wasm.program_getFunctions(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get a javascript object representation of the function inputs and types. This can be used\n    * to generate a web form to capture user inputs for an execution of a function.\n    *\n    * @param {string} function_name Name of the function to get inputs for\n    * @returns {Array} Array of function inputs\n    *\n    * @example\n    * const expected_inputs = [\n    *     {\n    *       type:\"record\",\n    *       visibility:\"private\",\n    *       record:\"credits\",\n    *       members:[\n    *         {\n    *           name:\"microcredits\",\n    *           type:\"u64\",\n    *           visibility:\"private\"\n    *         }\n    *       ],\n    *       register:\"r0\"\n    *     },\n    *     {\n    *       type:\"address\",\n    *       visibility:\"private\",\n    *       register:\"r1\"\n    *     },\n    *     {\n    *       type:\"u64\",\n    *       visibility:\"private\",\n    *       register:\"r2\"\n    *     }\n    * ];\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const transfer_function_inputs = credits_program.getFunctionInputs(\"transfer_private\");\n    * console.log(transfer_function_inputs === expected_inputs); // Output should be \"true\"\n    * @param {string} function_name\n    * @returns {Array<any>}\n    */\n    getFunctionInputs(function_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getFunctionInputs(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a the list of a program's mappings and the names/types of their keys and values.\n    *\n    * @returns {Array} - An array of objects representing the mappings in the program\n    * @example\n    * const expected_mappings = [\n    *    {\n    *       name: \"account\",\n    *       key_name: \"owner\",\n    *       key_type: \"address\",\n    *       value_name: \"microcredits\",\n    *       value_type: \"u64\"\n    *    }\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_mappings = credits_program.getMappings();\n    * console.log(credits_mappings === expected_mappings); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getMappings() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_getMappings(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program record and its types\n    *\n    * @param {string} record_name Name of the record to get members for\n    * @returns {Object} Object containing the record name, type, and members\n    *\n    * @example\n    *\n    * const expected_record = {\n    *     type: \"record\",\n    *     record: \"Credits\",\n    *     members: [\n    *       {\n    *         name: \"owner\",\n    *         type: \"address\",\n    *         visibility: \"private\"\n    *       },\n    *       {\n    *         name: \"microcredits\",\n    *         type: \"u64\",\n    *         visibility: \"private\"\n    *       }\n    *     ];\n    *  };\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_record = credits_program.getRecordMembers(\"Credits\");\n    * console.log(credits_record === expected_record); // Output should be \"true\"\n    * @param {string} record_name\n    * @returns {object}\n    */\n    getRecordMembers(record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getRecordMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program struct and its types\n    *\n    * @param {string} struct_name Name of the struct to get members for\n    * @returns {Array} Array containing the struct members\n    *\n    * @example\n    *\n    * const STRUCT_PROGRAM = \"program token_issue.aleo;\n    *\n    * struct token_metadata:\n    *     network as u32;\n    *     version as u32;\n    *\n    * struct token:\n    *     token_id as u32;\n    *     metadata as token_metadata;\n    *\n    * function no_op:\n    *    input r0 as u64;\n    *    output r0 as u64;\"\n    *\n    * const expected_struct_members = [\n    *    {\n    *      name: \"token_id\",\n    *      type: \"u32\",\n    *    },\n    *    {\n    *      name: \"metadata\",\n    *      type: \"struct\",\n    *      struct_id: \"token_metadata\",\n    *      members: [\n    *       {\n    *         name: \"network\",\n    *         type: \"u32\",\n    *       }\n    *       {\n    *         name: \"version\",\n    *         type: \"u32\",\n    *       }\n    *     ]\n    *   }\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(STRUCT_PROGRAM);\n    * const struct_members = program.getStructMembers(\"token\");\n    * console.log(struct_members === expected_struct_members); // Output should be \"true\"\n    * @param {string} struct_name\n    * @returns {Array<any>}\n    */\n    getStructMembers(struct_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(struct_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getStructMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the credits.aleo program\n    *\n    * @returns {Program} The credits.aleo program\n    * @returns {Program}\n    */\n    static getCreditsProgram() {\n        const ret = wasm.program_getCreditsProgram();\n        return Program.__wrap(ret);\n    }\n    /**\n    * Get the id of the program\n    *\n    * @returns {string} The id of the program\n    * @returns {string}\n    */\n    id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_id(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get a unique address of the program\n    *\n    * @returns {Address} The address of the program\n    * @returns {Address}\n    */\n    address() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_address(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Address.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Determine equality with another program\n    *\n    * @param {Program} other The other program to compare\n    * @returns {boolean} True if the programs are equal, false otherwise\n    * @param {Program} other\n    * @returns {boolean}\n    */\n    isEqual(other) {\n        _assertClass(other, Program);\n        const ret = wasm.program_isEqual(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get program_imports\n    *\n    * @returns {Array} The program imports\n    *\n    * @example\n    *\n    * const DOUBLE_TEST = \"import multiply_test.aleo;\n    *\n    * program double_test.aleo;\n    *\n    * function double_it:\n    *     input r0 as u32.private;\n    *     call multiply_test.aleo/multiply 2u32 r0 into r1;\n    *     output r1 as u32.private;\";\n    *\n    * const expected_imports = [\n    *    \"multiply_test.aleo\"\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(DOUBLE_TEST_PROGRAM);\n    * const imports = program.getImports();\n    * console.log(imports === expected_imports); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getImports() {\n        const ret = wasm.program_getImports(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst ProgramManagerFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_programmanager_free(ptr >>> 0));\n/**\n*/\nclass ProgramManager {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ProgramManagerFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_programmanager_free(ptr);\n    }\n    /**\n    * Deploy an Aleo program\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being deployed\n    * @param imports A javascript object holding the source code of any imported programs in the\n    * form \\{\"program_name1\": \"program_source_code\", \"program_name2\": \"program_source_code\", ..\\}.\n    * Note that all imported programs must be deployed on chain before the main program in order\n    * for the deployment to succeed\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the program deployment in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildDeploymentTransaction(private_key, program, fee_credits, fee_record, url, imports, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        let ptr1 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr1 = fee_record.__destroy_into_raw();\n        }\n        var ptr2 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr3 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr4 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildDeploymentTransaction(private_key.__wbg_ptr, ptr0, len0, fee_credits, ptr1, ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the fee for a program deployment\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The source code of the program being deployed\n    * @param imports (optional) Provide a list of imports to use for the deployment fee estimation\n    * in the form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @returns {u64}\n    * @param {string} program\n    * @param {object | undefined} [imports]\n    * @returns {Promise<bigint>}\n    */\n    static estimateDeploymentFee(program, imports) {\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_estimateDeploymentFee(ptr0, len0, isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the component of the deployment cost which comes from the fee for the program name.\n    * Note that this cost does not represent the entire cost of deployment. It is additional to\n    * the cost of the size (in bytes) of the deployment.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param name The name of the program to be deployed\n    * @returns {u64}\n    * @param {string} name\n    * @returns {bigint}\n    */\n    static estimateProgramNameCost(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateProgramNameCost(retptr, ptr0, len0);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Execute an arbitrary function locally\n    *\n    * @param {PrivateKey} private_key The private key of the sender\n    * @param {string} program The source code of the program being executed\n    * @param {string} function The name of the function to execute\n    * @param {Array} inputs A javascript array of inputs to the function\n    * @param {boolean} prove_execution If true, the execution will be proven and an execution object\n    * containing the proof and the encrypted inputs and outputs needed to verify the proof offline\n    * will be returned.\n    * @param {boolean} cache Cache the proving and verifying keys in the Execution response.\n    * If this is set to 'true' the keys synthesized will be stored in the Execution Response\n    * and the `ProvingKey` and `VerifyingKey` can be retrieved from the response via the `.getKeys()`\n    * method.\n    * @param {Object | undefined} imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param {ProvingKey | undefined} proving_key (optional) Provide a verifying key to use for the function execution\n    * @param {VerifyingKey | undefined} verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {boolean} prove_execution\n    * @param {boolean} cache\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [proving_key]\n    * @param {VerifyingKey | undefined} [verifying_key]\n    * @param {string | undefined} [url]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<ExecutionResponse>}\n    */\n    static executeFunctionOffline(private_key, program, _function, inputs, prove_execution, cache, imports, proving_key, verifying_key, url, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr2 = proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr3 = verifying_key.__destroy_into_raw();\n        }\n        var ptr4 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_executeFunctionOffline(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), prove_execution, cache, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr2, ptr3, ptr4, len4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Execute Aleo function and create an Aleo execution transaction\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being executed\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * If this is set to 'true' the keys synthesized (or passed in as optional parameters via the\n    * `proving_key` and `verifying_key` arguments) will be stored in the ProgramManager's memory\n    * and used for subsequent transactions. If this is set to 'false' the proving and verifying\n    * keys will be deallocated from memory after the transaction is executed.\n    * @param imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the function execution\n    * @param verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [proving_key]\n    * @param {VerifyingKey | undefined} [verifying_key]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildExecutionTransaction(private_key, program, _function, inputs, fee_credits, fee_record, url, imports, proving_key, verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        var ptr3 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr4 = proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr5 = verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr8 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildExecutionTransaction(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), fee_credits, ptr2, ptr3, len3, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr4, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate Fee for Aleo function execution. Note if \"cache\" is set to true, the proving and\n    * verifying keys will be stored in the ProgramManager's memory and used for subsequent\n    * program executions.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program to estimate the execution fee for\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the fee estimation in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the fee estimation\n    * @param verifying_key (optional) Provide a verifying key to use for the fee estimation\n    * @returns {u64} Fee in microcredits\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {string | undefined} [url]\n    * @param {object | undefined} [imports]\n    * @param {ProvingKey | undefined} [proving_key]\n    * @param {VerifyingKey | undefined} [verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<bigint>}\n    */\n    static estimateExecutionFee(private_key, program, _function, inputs, url, imports, proving_key, verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr3 = proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr4 = verifying_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_estimateExecutionFee(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the finalize fee component for executing a function. This fee is additional to the\n    * size of the execution of the program in bytes. If the function does not have a finalize\n    * step, then the finalize fee is 0.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The program containing the function to estimate the finalize fee for\n    * @param function The function to estimate the finalize fee for\n    * @returns {u64} Fee in microcredits\n    * @param {string} program\n    * @param {string} _function\n    * @returns {bigint}\n    */\n    static estimateFinalizeFee(program, _function) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateFinalizeFee(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Join two records together to create a new record with an amount of credits equal to the sum\n    * of the credits of the two original records\n    *\n    * @param private_key The private key of the sender\n    * @param record_1 The first record to combine\n    * @param record_2 The second record to combine\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param join_proving_key (optional) Provide a proving key to use for the join function\n    * @param join_verifying_key (optional) Provide a verifying key to use for the join function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {RecordPlaintext} record_1\n    * @param {RecordPlaintext} record_2\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {ProvingKey | undefined} [join_proving_key]\n    * @param {VerifyingKey | undefined} [join_verifying_key]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildJoinTransaction(private_key, record_1, record_2, fee_credits, fee_record, url, join_proving_key, join_verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(record_1, RecordPlaintext);\n        var ptr0 = record_1.__destroy_into_raw();\n        _assertClass(record_2, RecordPlaintext);\n        var ptr1 = record_2.__destroy_into_raw();\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        var ptr3 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(join_proving_key)) {\n            _assertClass(join_proving_key, ProvingKey);\n            ptr4 = join_proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(join_verifying_key)) {\n            _assertClass(join_verifying_key, VerifyingKey);\n            ptr5 = join_verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr8 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildJoinTransaction(private_key.__wbg_ptr, ptr0, ptr1, fee_credits, ptr2, ptr3, len3, ptr4, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Split an Aleo credits record into two separate records. This function does not require a fee.\n    *\n    * @param private_key The private key of the sender\n    * @param split_amount The amount of the credit split. This amount will be subtracted from the\n    * value of the record and two new records will be created with the split amount and the remainder\n    * @param amount_record The record to split\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param split_proving_key (optional) Provide a proving key to use for the split function\n    * @param split_verifying_key (optional) Provide a verifying key to use for the split function\n    * @returns {Transaction} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {number} split_amount\n    * @param {RecordPlaintext} amount_record\n    * @param {string | undefined} [url]\n    * @param {ProvingKey | undefined} [split_proving_key]\n    * @param {VerifyingKey | undefined} [split_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildSplitTransaction(private_key, split_amount, amount_record, url, split_proving_key, split_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(amount_record, RecordPlaintext);\n        var ptr0 = amount_record.__destroy_into_raw();\n        var ptr1 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(split_proving_key)) {\n            _assertClass(split_proving_key, ProvingKey);\n            ptr2 = split_proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(split_verifying_key)) {\n            _assertClass(split_verifying_key, VerifyingKey);\n            ptr3 = split_verifying_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr4 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildSplitTransaction(private_key.__wbg_ptr, split_amount, ptr0, ptr1, len1, ptr2, ptr3, ptr4);\n        return takeObject(ret);\n    }\n    /**\n    * Send credits from one Aleo account to another\n    *\n    * @param private_key The private key of the sender\n    * @param amount_credits The amount of credits to send\n    * @param recipient The recipient of the transaction\n    * @param transfer_type The type of the transfer (options: \"private\", \"public\", \"private_to_public\", \"public_to_private\")\n    * @param amount_record The record to fund the amount from\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param transfer_verifying_key (optional) Provide a verifying key to use for the transfer\n    * function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction}\n    * @param {PrivateKey} private_key\n    * @param {number} amount_credits\n    * @param {string} recipient\n    * @param {string} transfer_type\n    * @param {RecordPlaintext | undefined} amount_record\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} [fee_record]\n    * @param {string | undefined} [url]\n    * @param {ProvingKey | undefined} [transfer_proving_key]\n    * @param {VerifyingKey | undefined} [transfer_verifying_key]\n    * @param {ProvingKey | undefined} [fee_proving_key]\n    * @param {VerifyingKey | undefined} [fee_verifying_key]\n    * @param {OfflineQuery | undefined} [offline_query]\n    * @returns {Promise<Transaction>}\n    */\n    static buildTransferTransaction(private_key, amount_credits, recipient, transfer_type, amount_record, fee_credits, fee_record, url, transfer_proving_key, transfer_verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(recipient, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(transfer_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(amount_record)) {\n            _assertClass(amount_record, RecordPlaintext);\n            ptr2 = amount_record.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr3 = fee_record.__destroy_into_raw();\n        }\n        var ptr4 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(transfer_proving_key)) {\n            _assertClass(transfer_proving_key, ProvingKey);\n            ptr5 = transfer_proving_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(transfer_verifying_key)) {\n            _assertClass(transfer_verifying_key, VerifyingKey);\n            ptr6 = transfer_verifying_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr7 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr8 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr9 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr9 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildTransferTransaction(private_key.__wbg_ptr, amount_credits, ptr0, len0, ptr1, len1, ptr2, fee_credits, ptr3, ptr4, len4, ptr5, ptr6, ptr7, ptr8, ptr9);\n        return takeObject(ret);\n    }\n    /**\n    * Synthesize proving and verifying keys for a program\n    *\n    * @param program {string} The program source code of the program to synthesize keys for\n    * @param function_id {string} The function to synthesize keys for\n    * @param inputs {Array} The inputs to the function\n    * @param imports {Object | undefined} The imports for the program\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} function_id\n    * @param {Array<any>} inputs\n    * @param {object | undefined} [imports]\n    * @returns {Promise<KeyPair>}\n    */\n    static synthesizeKeyPair(private_key, program, function_id, inputs, imports) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_synthesizeKeyPair(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n}\n\nconst ProvingKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_provingkey_free(ptr >>> 0));\n/**\n* Proving key for a function within an Aleo program\n*/\nclass ProvingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ProvingKey.prototype);\n        obj.__wbg_ptr = ptr;\n        ProvingKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ProvingKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_provingkey_free(ptr);\n    }\n    /**\n    * Verify if the proving key is for the bond_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"bond_public_proving_key.bin\");\n    * provingKey.isBondPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the bond_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isBondPublicProver() {\n        const ret = wasm.provingkey_isBondPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the bond_validator function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"bond_validator_proving_key.bin\");\n    * provingKey.isBondPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the bond_validator function, false if otherwise\n    * @returns {boolean}\n    */\n    isBondValidatorProver() {\n        const ret = wasm.provingkey_isBondValidatorProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the claim_unbond function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"claim_unbond_proving_key.bin\");\n    * provingKey.isClaimUnbondProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the claim_unbond function, false if otherwise\n    * @returns {boolean}\n    */\n    isClaimUnbondPublicProver() {\n        const ret = wasm.provingkey_isClaimUnbondPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the fee_private function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"fee_private_proving_key.bin\");\n    * provingKey.isFeePrivateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the fee_private function, false if otherwise\n    * @returns {boolean}\n    */\n    isFeePrivateProver() {\n        const ret = wasm.provingkey_isFeePrivateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the fee_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"fee_public_proving_key.bin\");\n    * provingKey.isFeePublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the fee_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isFeePublicProver() {\n        const ret = wasm.provingkey_isFeePublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the inclusion function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"inclusion_proving_key.bin\");\n    * provingKey.isInclusionProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the inclusion function, false if otherwise\n    * @returns {boolean}\n    */\n    isInclusionProver() {\n        const ret = wasm.provingkey_isInclusionProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the join function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"join_proving_key.bin\");\n    * provingKey.isJoinProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the join function, false if otherwise\n    * @returns {boolean}\n    */\n    isJoinProver() {\n        const ret = wasm.provingkey_isJoinProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the set_validator_state function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"set_validator_set_proving_key.bin\");\n    * provingKey.isSetValidatorStateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the set_validator_state function, false if otherwise\n    * @returns {boolean}\n    */\n    isSetValidatorStateProver() {\n        const ret = wasm.provingkey_isSetValidatorStateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the split function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"split_proving_key.bin\");\n    * provingKey.isSplitProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the split function, false if otherwise\n    * @returns {boolean}\n    */\n    isSplitProver() {\n        const ret = wasm.provingkey_isSplitProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_private function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_private_proving_key.bin\");\n    * provingKey.isTransferPrivateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_private function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPrivateProver() {\n        const ret = wasm.provingkey_isTransferPrivateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_private_to_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_private_to_public_proving_key.bin\");\n    * provingKey.isTransferPrivateToPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_private_to_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPrivateToPublicProver() {\n        const ret = wasm.provingkey_isTransferPrivateToPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_public_proving_key.bin\");\n    * provingKey.isTransferPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPublicProver() {\n        const ret = wasm.provingkey_isTransferPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_public_as_signer function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_public_as_signer_proving_key.bin\");\n    * provingKey.isTransferPublicAsSignerProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_public function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPublicAsSignerProver() {\n        const ret = wasm.provingkey_isTransferPublicAsSignerProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the transfer_public_to_private function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"transfer_public_to_private_proving_key.bin\");\n    * provingKey.isTransferPublicToPrivateProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the transfer_public_to_private function, false if otherwise\n    * @returns {boolean}\n    */\n    isTransferPublicToPrivateProver() {\n        const ret = wasm.provingkey_isTransferPublicToPrivateProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verify if the proving key is for the unbond_public function\n    *\n    * @example\n    * const provingKey = ProvingKey.fromBytes(\"unbond_public.bin\");\n    * provingKey.isUnbondPublicProver() ? console.log(\"Key verified\") : throw new Error(\"Invalid key\");\n    *\n    * @returns {boolean} returns true if the proving key is for the unbond_public_prover function, false if otherwise\n    * @returns {boolean}\n    */\n    isUnbondPublicProver() {\n        const ret = wasm.provingkey_isUnbondPublicProver(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Return the checksum of the proving key\n    *\n    * @returns {string} Checksum of the proving key\n    * @returns {string}\n    */\n    checksum() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_checksum(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a copy of the proving key\n    *\n    * @returns {ProvingKey} A copy of the proving key\n    * @returns {ProvingKey}\n    */\n    copy() {\n        const ret = wasm.provingkey_copy(this.__wbg_ptr);\n        return ProvingKey.__wrap(ret);\n    }\n    /**\n    * Construct a new proving key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte array representation of a proving key\n    * @returns {ProvingKey}\n    * @param {Uint8Array} bytes\n    * @returns {ProvingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a proving key from string\n    *\n    * @param {string} String representation of the proving key\n    * @param {string} string\n    * @returns {ProvingKey}\n    */\n    static fromString(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the byte representation of a proving key\n    *\n    * @returns {Uint8Array} Byte array representation of a proving key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the proving key\n    *\n    * @returns {string} String representation of the proving key\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RecordCiphertextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_recordciphertext_free(ptr >>> 0));\n/**\n* Encrypted Aleo record\n*/\nclass RecordCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n        RecordCiphertextFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RecordCiphertextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordciphertext_free(ptr);\n    }\n    /**\n    * Create a record ciphertext from a string\n    *\n    * @param {string} record String representation of a record ciphertext\n    * @returns {RecordCiphertext} Record ciphertext\n    * @param {string} record\n    * @returns {RecordCiphertext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the string reprensentation of the record ciphertext\n    *\n    * @returns {string} String representation of the record ciphertext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Decrypt the record ciphertext into plaintext using the view key. The record will only\n    * decrypt if the record was encrypted by the account corresponding to the view key\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {RecordPlaintext} Record plaintext object\n    * @param {ViewKey} view_key\n    * @returns {RecordPlaintext}\n    */\n    decrypt(view_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(view_key, ViewKey);\n            wasm.recordciphertext_decrypt(retptr, this.__wbg_ptr, view_key.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Determines if the account corresponding to the view key is the owner of the record\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {boolean}\n    * @param {ViewKey} view_key\n    * @returns {boolean}\n    */\n    isOwner(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.recordciphertext_isOwner(this.__wbg_ptr, view_key.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst RecordPlaintextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_recordplaintext_free(ptr >>> 0));\n/**\n* Plaintext representation of an Aleo record\n*/\nclass RecordPlaintext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordPlaintext.prototype);\n        obj.__wbg_ptr = ptr;\n        RecordPlaintextFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RecordPlaintextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordplaintext_free(ptr);\n    }\n    /**\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {Field}\n    */\n    commitment(program_id, record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_commitment(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Field.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return a record plaintext from a string.\n    *\n    * @param {string} record String representation of a plaintext representation of an Aleo record\n    * @returns {RecordPlaintext} Record plaintext\n    * @param {string} record\n    * @returns {RecordPlaintext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the record plaintext string\n    *\n    * @returns {string} String representation of the record plaintext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the amount of microcredits in the record\n    *\n    * @returns {u64} Amount of microcredits in the record\n    * @returns {bigint}\n    */\n    microcredits() {\n        const ret = wasm.recordplaintext_microcredits(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * Returns the nonce of the record. This can be used to uniquely identify a record.\n    *\n    * @returns {string} Nonce of the record\n    * @returns {string}\n    */\n    nonce() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_nonce(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Attempt to get the serial number of a record to determine whether or not is has been spent\n    *\n    * @param {PrivateKey} private_key Private key of the account that owns the record\n    * @param {string} program_id Program ID of the program that the record is associated with\n    * @param {string} record_name Name of the record\n    * @returns {string} Serial number of the record\n    * @param {PrivateKey} private_key\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {string}\n    */\n    serialNumberString(private_key, program_id, record_name) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_serialNumberString(retptr, this.__wbg_ptr, private_key.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr3 = r0;\n            var len3 = r1;\n            if (r3) {\n                ptr3 = 0; len3 = 0;\n                throw takeObject(r2);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n}\n\nconst SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signature_free(ptr >>> 0));\n/**\n* Cryptographic signature of a message signed by an Aleo account\n*/\nclass Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr);\n    }\n    /**\n    * Sign a message with a private key\n    *\n    * @param {PrivateKey} private_key The private key to sign the message with\n    * @param {Uint8Array} message Byte representation of the message to sign\n    * @returns {Signature} Signature of the message\n    * @param {PrivateKey} private_key\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    static sign(private_key, message) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(private_key.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Verify a signature of a message with an address\n    *\n    * @param {Address} address The address to verify the signature with\n    * @param {Uint8Array} message Byte representation of the message to verify\n    * @returns {boolean} True if the signature is valid, false otherwise\n    * @param {Address} address\n    * @param {Uint8Array} message\n    * @returns {boolean}\n    */\n    verify(address, message) {\n        _assertClass(address, Address);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_verify(this.__wbg_ptr, address.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get a signature from a string representation of a signature\n    *\n    * @param {string} signature String representation of a signature\n    * @returns {Signature} Signature\n    * @param {string} signature\n    * @returns {Signature}\n    */\n    static from_string(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_from_string(ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a signature\n    *\n    * @returns {string} String representation of a signature\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst TransactionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_transaction_free(ptr >>> 0));\n/**\n* Webassembly Representation of an Aleo transaction\n*\n* This object is created when generating an on-chain function deployment or execution and is the\n* object that should be submitted to the Aleo Network in order to deploy or execute a function.\n*/\nclass Transaction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Transaction.prototype);\n        obj.__wbg_ptr = ptr;\n        TransactionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TransactionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n    * Create a transaction from a string\n    *\n    * @param {string} transaction String representation of a transaction\n    * @returns {Transaction}\n    * @param {string} transaction\n    * @returns {Transaction}\n    */\n    static fromString(transaction) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(transaction, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transaction_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the transaction as a string. If you want to submit this transaction to the Aleo Network\n    * this function will create the string that should be submitted in the `POST` data.\n    *\n    * @returns {string} String representation of the transaction\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the id of the transaction. This is the merkle root of the transaction's inclusion proof.\n    *\n    * This value can be used to query the status of the transaction on the Aleo Network to see\n    * if it was successful. If successful, the transaction will be included in a block and this\n    * value can be used to lookup the transaction data on-chain.\n    *\n    * @returns {string} Transaction id\n    * @returns {string}\n    */\n    transactionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the type of the transaction (will return \"deploy\" or \"execute\")\n    *\n    * @returns {string} Transaction type\n    * @returns {string}\n    */\n    transactionType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionType(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst VerifyingKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_verifyingkey_free(ptr >>> 0));\n/**\n* Verifying key for a function within an Aleo program\n*/\nclass VerifyingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerifyingKey.prototype);\n        obj.__wbg_ptr = ptr;\n        VerifyingKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VerifyingKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verifyingkey_free(ptr);\n    }\n    /**\n    * Returns the verifying key for the bond_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_public function\n    * @returns {VerifyingKey}\n    */\n    static bondPublicVerifier() {\n        const ret = wasm.verifyingkey_bondPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the bond_validator function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_validator function\n    * @returns {VerifyingKey}\n    */\n    static bondValidatorVerifier() {\n        const ret = wasm.verifyingkey_bondValidatorVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the claim_delegator function\n    *\n    * @returns {VerifyingKey} Verifying key for the claim_unbond_public function\n    * @returns {VerifyingKey}\n    */\n    static claimUnbondPublicVerifier() {\n        const ret = wasm.verifyingkey_claimUnbondPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the fee_private function\n    *\n    * @returns {VerifyingKey} Verifying key for the fee_private function\n    * @returns {VerifyingKey}\n    */\n    static feePrivateVerifier() {\n        const ret = wasm.verifyingkey_feePrivateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the fee_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the fee_public function\n    * @returns {VerifyingKey}\n    */\n    static feePublicVerifier() {\n        const ret = wasm.verifyingkey_feePublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the inclusion function\n    *\n    * @returns {VerifyingKey} Verifying key for the inclusion function\n    * @returns {VerifyingKey}\n    */\n    static inclusionVerifier() {\n        const ret = wasm.verifyingkey_inclusionVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the join function\n    *\n    * @returns {VerifyingKey} Verifying key for the join function\n    * @returns {VerifyingKey}\n    */\n    static joinVerifier() {\n        const ret = wasm.verifyingkey_joinVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the set_validator_state function\n    *\n    * @returns {VerifyingKey} Verifying key for the set_validator_state function\n    * @returns {VerifyingKey}\n    */\n    static setValidatorStateVerifier() {\n        const ret = wasm.verifyingkey_setValidatorStateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the split function\n    *\n    * @returns {VerifyingKey} Verifying key for the split function\n    * @returns {VerifyingKey}\n    */\n    static splitVerifier() {\n        const ret = wasm.verifyingkey_splitVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_private function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_private function\n    * @returns {VerifyingKey}\n    */\n    static transferPrivateVerifier() {\n        const ret = wasm.verifyingkey_transferPrivateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_private_to_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_private_to_public function\n    * @returns {VerifyingKey}\n    */\n    static transferPrivateToPublicVerifier() {\n        const ret = wasm.verifyingkey_transferPrivateToPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_public function\n    * @returns {VerifyingKey}\n    */\n    static transferPublicVerifier() {\n        const ret = wasm.verifyingkey_transferPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_public_as_signer function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_public_as_signer function\n    * @returns {VerifyingKey}\n    */\n    static transferPublicAsSignerVerifier() {\n        const ret = wasm.verifyingkey_transferPublicAsSignerVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the transfer_public_to_private function\n    *\n    * @returns {VerifyingKey} Verifying key for the transfer_public_to_private function\n    * @returns {VerifyingKey}\n    */\n    static transferPublicToPrivateVerifier() {\n        const ret = wasm.verifyingkey_transferPublicToPrivateVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the unbond_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the unbond_public function\n    * @returns {VerifyingKey}\n    */\n    static unbondPublicVerifier() {\n        const ret = wasm.verifyingkey_unbondPublicVerifier();\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying key for the bond_public function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_public function\n    * @returns {boolean}\n    */\n    isBondPublicVerifier() {\n        const ret = wasm.verifyingkey_isBondPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Returns the verifying key for the bond_validator function\n    *\n    * @returns {VerifyingKey} Verifying key for the bond_validator function\n    * @returns {boolean}\n    */\n    isBondValidatorVerifier() {\n        const ret = wasm.verifyingkey_isBondValidatorVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the claim_delegator function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isClaimUnbondPublicVerifier() {\n        const ret = wasm.verifyingkey_isClaimUnbondPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the fee_private function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isFeePrivateVerifier() {\n        const ret = wasm.verifyingkey_isFeePrivateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the fee_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isFeePublicVerifier() {\n        const ret = wasm.verifyingkey_isFeePublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the inclusion function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isInclusionVerifier() {\n        const ret = wasm.verifyingkey_isInclusionVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the join function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isJoinVerifier() {\n        const ret = wasm.verifyingkey_isJoinVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the set_validator_state function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isSetValidatorStateVerifier() {\n        const ret = wasm.verifyingkey_isSetValidatorStateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the split function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isSplitVerifier() {\n        const ret = wasm.verifyingkey_isSplitVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_private function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPrivateVerifier() {\n        const ret = wasm.verifyingkey_isTransferPrivateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_private_to_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPrivateToPublicVerifier() {\n        const ret = wasm.verifyingkey_isTransferPrivateToPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPublicVerifier() {\n        const ret = wasm.verifyingkey_isTransferPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_public_as_signer function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPublicAsSignerVerifier() {\n        const ret = wasm.verifyingkey_isTransferPublicAsSignerVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the transfer_public_to_private function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isTransferPublicToPrivateVerifier() {\n        const ret = wasm.verifyingkey_isTransferPublicToPrivateVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Verifies the verifying key is for the unbond_public function\n    *\n    * @returns {bool}\n    * @returns {boolean}\n    */\n    isUnbondPublicVerifier() {\n        const ret = wasm.verifyingkey_isUnbondPublicVerifier(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get the checksum of the verifying key\n    *\n    * @returns {string} Checksum of the verifying key\n    * @returns {string}\n    */\n    checksum() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_checksum(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a copy of the verifying key\n    *\n    * @returns {VerifyingKey} A copy of the verifying key\n    * @returns {VerifyingKey}\n    */\n    copy() {\n        const ret = wasm.verifyingkey_copy(this.__wbg_ptr);\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Construct a new verifying key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte representation of a verifying key\n    * @returns {VerifyingKey}\n    * @param {Uint8Array} bytes\n    * @returns {VerifyingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a verifying key from string\n    *\n    * @param {String} string String representation of a verifying key\n    * @returns {VerifyingKey}\n    * @param {string} string\n    * @returns {VerifyingKey}\n    */\n    static fromString(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a byte array from a verifying key\n    *\n    * @returns {Uint8Array} Byte representation of a verifying key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the verifying key\n    *\n    * @returns {String} String representation of the verifying key\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst ViewKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_viewkey_free(ptr >>> 0));\n/**\n*/\nclass ViewKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ViewKey.prototype);\n        obj.__wbg_ptr = ptr;\n        ViewKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ViewKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_viewkey_free(ptr);\n    }\n    /**\n    * Create a new view key from a private key\n    *\n    * @param {PrivateKey} private_key Private key\n    * @returns {ViewKey} View key\n    * @param {PrivateKey} private_key\n    * @returns {ViewKey}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.privatekey_to_view_key(private_key.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Create a new view key from a string representation of a view key\n    *\n    * @param {string} view_key String representation of a view key\n    * @returns {ViewKey} View key\n    * @param {string} view_key\n    * @returns {ViewKey}\n    */\n    static from_string(view_key) {\n        const ptr0 = passStringToWasm0(view_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.viewkey_from_string(ptr0, len0);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a view key\n    *\n    * @returns {string} String representation of a view key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.viewkey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the address corresponding to a view key\n    *\n    * @returns {Address} Address\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.address_from_view_key(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Decrypt a record ciphertext with a view key\n    *\n    * @param {string} ciphertext String representation of a record ciphertext\n    * @returns {string} String representation of a record plaintext\n    * @param {string} ciphertext\n    * @returns {string}\n    */\n    decrypt(ciphertext) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.viewkey_decrypt(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_new_71801a555ad9f2aa = function() { return handleError(function () {\n        const ret = new XMLHttpRequest();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_overrideMimeType_ee9c51919ceb418b = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).overrideMimeType(getStringFromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_open_c9eb0cf2c9d95679 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4, arg5) {\n        getObject(arg0).open(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4), arg5 !== 0);\n    }, arguments) };\n    imports.wbg.__wbg_send_80d29985093c1ec5 = function() { return handleError(function (arg0) {\n        getObject(arg0).send();\n    }, arguments) };\n    imports.wbg.__wbg_response_7c2e2759084f7279 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).response;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_status_d485fb5a478426fb = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_new_72fb9a18b5ae2624 = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_1f9b04f170055d33 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_new_ab6fd82b10560829 = function() { return handleError(function () {\n        const ret = new Headers();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_0d76b0581eca6298 = function() { return handleError(function () {\n        const ret = new AbortController();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_signal_a61f78a3478fd9bc = function(arg0) {\n        const ret = getObject(arg0).signal;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_append_7bfcb4937d1d5e29 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_Response_849eb93e75734b6e = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Response;\n        } catch (_) {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_status_61a01141acd3cf74 = function(arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    };\n    imports.wbg.__wbg_url_5f6dc4009ac5f99d = function(arg0, arg1) {\n        const ret = getObject(arg1).url;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_headers_9620bfada380764a = function(arg0) {\n        const ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_iterator_2cee6dadfd956dfa = function() {\n        const ret = Symbol.iterator;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_get_e3c254076557e348 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(getObject(arg0), getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbg_call_27c0f87801dedf93 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_next_40fc327bfc8770e6 = function(arg0) {\n        const ret = getObject(arg0).next;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_next_196c84450b364254 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).next();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_done_298b57d23c0fc80c = function(arg0) {\n        const ret = getObject(arg0).done;\n        return ret;\n    };\n    imports.wbg.__wbg_value_d93c65011f51a456 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_abort_2aa7521d5690750e = function(arg0) {\n        getObject(arg0).abort();\n    };\n    imports.wbg.__wbg_stringify_8887fe74e1c50d81 = function() { return handleError(function (arg0) {\n        const ret = JSON.stringify(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_log_eb85b4536c227931 = function(arg0, arg1) {\n        console.log(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_bigint_from_u64 = function(arg0) {\n        const ret = BigInt.asUintN(64, arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_b3ca7c6051f9bec1 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_transaction_new = function(arg0) {\n        const ret = Transaction.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_executionresponse_new = function(arg0) {\n        const ret = ExecutionResponse.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_keypair_new = function(arg0) {\n        const ret = KeyPair.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_66ae46612e7f0234 = function(arg0) {\n        const ret = new Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_d4638f722068f043 = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbindgen_module = function() {\n        const ret = __wbg_init.__wbindgen_wasm_module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_spawnWorker_4026f00664f3193f = function(arg0, arg1, arg2, arg3) {\n        const ret = spawnWorker(getObject(arg0), getObject(arg1), getObject(arg2), arg3 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_new_16b304a2cfa7ff4a = function() {\n        const ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_push_a5b05aedc7234f9f = function(arg0, arg1) {\n        const ret = getObject(arg0).push(getObject(arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_arrayBuffer_29931d52c7206b02 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).arrayBuffer();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_63b92bc8671ed464 = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_c20a40f15020d68a = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_new_81740750da40724f = function(arg0, arg1) {\n        try {\n            var state0 = {a: arg0, b: arg1};\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_282(a, state0.b, arg0, arg1);\n                } finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return addHeapObject(ret);\n        } finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_abda76e883ba8a5f = function() {\n        const ret = new Error();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stack_658279fe44541cf6 = function(arg0, arg1) {\n        const ret = getObject(arg1).stack;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_error_f851667af71bcfc6 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_buffer_12d079cc21e14bdb = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_randomFillSync_5c9c955aa56b6049 = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).randomFillSync(takeObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_subarray_a1f73cd4b5b42fe1 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_3aa56aa6edec874c = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_set_a47bac70306a19a7 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_crypto_1d1f22824a6a080c = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_process_4a72847cc503995b = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_f686565e586dd935 = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_104a2ff8d6ea03a2 = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbg_require_cca90b1a94a0255b = function() { return handleError(function () {\n        const ret = module.require;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_msCrypto_eb05e62b530a1508 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_e9b4878cebadb3d3 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_cd7af8117672b8b8 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_get_bd8e338fbd5f5cc8 = function(arg0, arg1) {\n        const ret = getObject(arg0)[arg1 >>> 0];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_self_ce0dbfc45cf2f5be = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_c6fb939a7f436783 = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_d1e6af4856ba331b = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_207b558942527489 = function() { return handleError(function () {\n        const ret = global.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_e258087cd0daa0ea = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_has_0af94d20077affa2 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.has(getObject(arg0), getObject(arg1));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_fetch_bc7c8e27076a5c84 = function(arg0) {\n        const ret = fetch(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_fetch_921fad6ef9e883dd = function(arg0, arg1) {\n        const ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_rethrow = function(arg0) {\n        throw takeObject(arg0);\n    };\n    imports.wbg.__wbg_then_a73caa9a87991566 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_0c86a60e8fcfe9f6 = function(arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_queueMicrotask_481971b0d87f3dd4 = function(arg0) {\n        queueMicrotask(getObject(arg0));\n    };\n    imports.wbg.__wbg_queueMicrotask_3cbae2ec6b6cd3d6 = function(arg0) {\n        const ret = getObject(arg0).queueMicrotask;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_resolve_b0083a7967828ec8 = function(arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_5d743fc9058ba01a = function() {\n        const ret = Atomics.waitAsync;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_8cccba86b0f574cb = function(arg0) {\n        const ret = new Int32Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_46d5c36955b71a79 = function(arg0, arg1, arg2) {\n        const ret = Atomics.waitAsync(getObject(arg0), arg1, arg2);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_async_19c0400d97cc72fe = function(arg0) {\n        const ret = getObject(arg0).async;\n        return ret;\n    };\n    imports.wbg.__wbg_value_571d60108110e917 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_link_fc1eedd35dc7e0a6 = function(arg0) {\n        const ret = \"data:application/javascript,\" + encodeURIComponent(`onmessage = function (ev) {\n            let [ia, index, value] = ev.data;\n            ia = new Int32Array(ia.buffer);\n            let result = Atomics.wait(ia, index, value);\n            postMessage(result);\n        };\n        `);\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_new_d1187ae36d662ef9 = function() { return handleError(function (arg0, arg1) {\n        const ret = new Worker(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setonmessage_503809e5bb51bd33 = function(arg0, arg1) {\n        getObject(arg0).onmessage = getObject(arg1);\n    };\n    imports.wbg.__wbg_of_6a70eed8d41f469c = function(arg0, arg1, arg2) {\n        const ret = Array.of(getObject(arg0), getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_postMessage_7380d10e8b8269df = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).postMessage(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_data_3ce7c145ca4fbcdc = function(arg0) {\n        const ret = getObject(arg0).data;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithstrandinit_3fd6fba4083ff2d0 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_responseText_c67ed2d48db10769 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg1).responseText;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    }, arguments) };\n    imports.wbg.__wbindgen_closure_wrapper5994 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 622, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper6020 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 622, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, maybe_memory) {\n    imports.wbg.memory = maybe_memory || new WebAssembly.Memory({initial:25,maximum:65536,shared:true});\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedBigInt64Memory0 = null;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n\n    const imports = __wbg_get_imports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nvar exports = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Address: Address,\n    Execution: Execution,\n    ExecutionResponse: ExecutionResponse,\n    Field: Field,\n    KeyPair: KeyPair,\n    Metadata: Metadata,\n    OfflineQuery: OfflineQuery,\n    PrivateKey: PrivateKey,\n    PrivateKeyCiphertext: PrivateKeyCiphertext,\n    Program: Program,\n    ProgramManager: ProgramManager,\n    ProvingKey: ProvingKey,\n    RecordCiphertext: RecordCiphertext,\n    RecordPlaintext: RecordPlaintext,\n    Signature: Signature,\n    Transaction: Transaction,\n    VerifyingKey: VerifyingKey,\n    ViewKey: ViewKey,\n    default: __wbg_init,\n    initSync: initSync,\n    initThreadPool: initThreadPool,\n    runRayonThread: runRayonThread,\n    verifyFunctionExecution: verifyFunctionExecution\n});\n\nconst wasm_path = \"aleo_wasm.wasm\";\n\n            \n            var Cargo = async (opt = {}) => {\n                let {importHook, serverPath, initializeHook} = opt;\n\n                let final_path = wasm_path;\n\n                if (serverPath != null) {\n                    final_path = serverPath + /[^\\/\\\\]*$/.exec(final_path)[0];\n                }\n\n                if (importHook != null) {\n                    final_path = importHook(final_path);\n                }\n\n                if (initializeHook != null) {\n                    await initializeHook(__wbg_init, final_path);\n\n                } else {\n                    await __wbg_init(final_path);\n                }\n\n                return exports;\n            };\n\nexport { Cargo as default };\n//# sourceMappingURL=aleo_wasm.js.map\n"],"names":["logAndThrow","message","console","error","Error","parseJSON","json","JSON","parse","key","value","context","Number","isInteger","BigInt","source","async","get","url","options","response","fetch","ok","status","post","method","AleoNetworkClient","host","headers","account","constructor","this","setAccount","getAccount","setHost","fetchData","text","findUnspentRecords","startHeight","endHeight","privateKey","amounts","maxMicrocredits","nonces","records","Array","start","end","resolvedPrivateKey","latestHeight","failures","totalRecordValue","_privateKey","PrivateKey","from_string","viewKey","to_view_key","blockHeight","getLatestHeight","blocks","getBlockRange","i","length","transactions","j","confirmedTransaction","type","transaction","execution","transitions","k","transition","program","outputs","l","output","record","RecordCiphertext","fromString","isOwner","recordPlaintext","decrypt","nonce","includes","serialNumber","serialNumberString","getTransitionId","push","microcredits","amounts_found","warn","toString","getBlock","height","getDeploymentTransactionIDForProgram","Program","replace","getDeploymentTransactionForProgram","transaction_id","getTransaction","getLatestBlock","getLatestCommittee","getProgram","programId","getProgramObject","inputProgram","getProgramImports","imports","importList","getImports","import_id","hasOwnProperty","programSource","nestedImports","getProgramImportNames","getProgramMappingNames","getProgramMappingValue","mappingName","getStateRoot","id","getTransactions","getTransactionsInMempool","inputOrOutputID","submitTransaction","transaction_string","Transaction","body","Object","assign","KEY_STORE","Metadata","baseUrl","convert","metadata","verifyingKey","VerifyingKey","name","locator","prover","verifier","CREDITS_PROGRAM_KEYS","bond_public","bond_validator","claim_unbond_public","fee_private","fee_public","inclusion","join","set_validator_state","split","transfer_private","transfer_private_to_public","transfer_public","transfer_public_as_signer","transfer_public_to_private","unbond_public","getKey","PRIVATE_TRANSFER_TYPES","Set","VALID_TRANSFER_TYPES","PRIVATE_TRANSFER","PRIVATE_TO_PUBLIC_TRANSFER","PUBLIC_TRANSFER","PUBLIC_TRANSFER_AS_SIGNER","PUBLIC_TO_PRIVATE_TRANSFER","AleoKeyProviderParams","proverUri","verifierUri","cacheKey","params","AleoKeyProvider","cache","cacheOption","keyUris","fetchBytes","data","arrayBuffer","Uint8Array","Map","useCache","clearCache","clear","cacheKeys","keyId","keys","provingKey","set","toBytes","containsKeys","has","deleteKeys","delete","getKeys","debug","provingKeyBytes","verifyingKeyBytes","ProvingKey","fromBytes","functionKeys","proverUrl","verifierUrl","fetchCreditsKeys","fetchRemoteKeys","getVerifyingKey","fetchProvingKey","keyPair","verifying_key","proving_key","bondPublicKeys","bondValidatorKeys","claimUnbondPublicKeys","transferKeys","visibility","joinKeys","splitKeys","feePrivateKeys","feePublicKeys","e","inner","unBondPublicKeys","ProgramManager","keyProvider","networkClient","recordProvider","setKeyProvider","setRecordProvider","deploy","fee","privateFee","recordSearchParams","feeRecord","programObject","log","feeKeys","deploymentPrivateKey","getCreditsRecord","undefined","feeProvingKey","feeVerifyingKey","tx","ProgramManager$1","buildDeploymentTransaction","buildExecutionTransaction","programName","functionName","inputs","keySearchParams","offlineQuery","executionPrivateKey","execute","run","function_name","proveExecution","executeFunctionOffline","recordOne","recordTwo","joinProvingKey","joinVerifyingKey","RecordPlaintext","buildJoinTransaction","splitAmount","amountRecord","splitProvingKey","splitVerifyingKey","buildSplitTransaction","synthesizeKeys","function_id","synthesizeKeyPair","buildTransferTransaction","amount","recipient","transferType","validateTransferType","transferProvingKey","transferVerifyingKey","requiresAmountRecord","buildTransferPublicTransaction","buildTransferPublicAsSignerTransaction","transfer","buildBondPublicTransaction","staker_address","validator_address","withdrawal_address","scaledAmount","Math","trunc","creditsProgram","additionalOptions","executeOptions","bondPublic","buildBondValidatorTransaction","commission","adjustedCommission","bondValidator","buildUnbondPublicTransaction","unbondPublic","buildClaimUnbondPublicTransaction","claimUnbondPublic","buildSetValidatorStateTransaction","validator_state","setValidatorState","verifyExecution","executionResponse","getExecution","getFunctionId","verifyFunctionExecution","createProgramFromSource","getCreditsProgram","verifyProgram","findCreditsRecord","spawnWorker","module","memory","address","Promise","resolve","worker","Worker","addEventListener","event","setTimeout","unref","capture","once","postMessage","wasm","heap","fill","getObject","idx","heap_next","dropObject","takeObject","ret","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachedUint8Memory0","getUint8Memory0","buffer","getStringFromWasm0","ptr","len","slice","addHeapObject","obj","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encode","encodeString","arg","view","buf","read","written","passStringToWasm0","malloc","realloc","subarray","mem","offset","code","charCodeAt","isLikeNone","x","cachedInt32Memory0","getInt32Memory0","Int32Array","debugString","val","description","isArray","builtInMatches","exec","call","className","stringify","_","stack","CLOSURE_DTORS","FinalizationRegistry","register","unregister","state","__wbindgen_export_3","dtor","a","b","makeMutClosure","arg0","arg1","f","cnt","real","args","original","__wbg_adapter_34","arg2","_dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h6a363ba3fe56b221","_assertClass","instance","klass","passArray8ToWasm0","verifyFunctionExecution$1","retptr","__wbindgen_add_to_stack_pointer","Execution$1","VerifyingKey$1","Program$1","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","__wbg_ptr","r0","r1","cachedBigInt64Memory0","getBigInt64Memory0","BigInt64Array","getArrayU8FromWasm0","runRayonThread","receiver","initThreadPool$1","num_threads","initThreadPool","handleError","apply","__wbindgen_exn_store","__wbg_adapter_282","arg3","wasm_bindgen__convert__closures__invoke2_mut__h3c510d875601a93b","AddressFinalization","__wbg_address_free","Address","__wrap","create","prototype","__destroy_into_raw","free","from_private_key","private_key","PrivateKey$1","address_from_private_key","from_view_key","view_key","ViewKey$1","address_from_view_key","address_from_string","to_string","deferred1_0","deferred1_1","address_to_string","__wbindgen_free","verify","signature","Signature$1","address_verify","ExecutionFinalization","__wbg_execution_free","Execution","execution_toString","execution_fromString","ExecutionResponseFinalization","__wbg_executionresponse_free","ExecutionResponse","getOutputs","executionresponse_getOutputs","executionresponse_getExecution","executionresponse_getKeys","KeyPair","getProvingKey","executionresponse_getProvingKey","ProvingKey$1","executionresponse_getVerifyingKey","executionresponse_getFunctionId","executionresponse_getProgram","FieldFinalization","__wbg_field_free","Field","field_toString","field","field_fromString","KeyPairFinalization","__wbg_keypair_free","ptr1","keypair_new","keypair_provingKey","keypair_verifyingKey","MetadataFinalization","__wbg_metadata_free","__wbg_get_metadata_name","__wbg_set_metadata_name","__wbg_get_metadata_locator","__wbg_set_metadata_locator","__wbg_get_metadata_prover","__wbg_set_metadata_prover","__wbg_get_metadata_verifier","__wbg_set_metadata_verifier","__wbg_get_metadata_verifyingKey","__wbg_set_metadata_verifyingKey","metadata_baseUrl","metadata_bond_public","metadata_bond_validator","metadata_claim_unbond_public","metadata_fee_private","metadata_fee_public","metadata_inclusion","metadata_join","metadata_set_validator_state","metadata_split","metadata_transfer_private","metadata_transfer_private_to_public","metadata_transfer_public","metadata_transfer_public_as_signer","metadata_transfer_public_to_private","metadata_unbond_public","OfflineQueryFinalization","__wbg_offlinequery_free","OfflineQuery","block_height","state_root","offlinequery_new","addBlockHeight","offlinequery_addBlockHeight","addStatePath","commitment","state_path","len1","offlinequery_addStatePath","offlinequery_toString","s","offlinequery_fromString","PrivateKeyFinalization","__wbg_privatekey_free","privatekey_new","from_seed_unchecked","seed","privatekey_from_seed_unchecked","privatekey_from_string","privatekey_to_string","privatekey_to_view_key","to_address","privatekey_to_address","Address$1","sign","privatekey_sign","newEncrypted","secret","privatekey_newEncrypted","PrivateKeyCiphertext$1","toCiphertext","privatekey_toCiphertext","fromPrivateKeyCiphertext","ciphertext","privatekey_fromPrivateKeyCiphertext","PrivateKeyCiphertextFinalization","__wbg_privatekeyciphertext_free","PrivateKeyCiphertext","encryptPrivateKey","decryptToPrivateKey","privatekeyciphertext_decryptToPrivateKey","privatekeyciphertext_toString","privatekeyciphertext_fromString","ProgramFinalization","__wbg_program_free","program_fromString","program_toString","hasFunction","program_hasFunction","getFunctions","program_getFunctions","getFunctionInputs","program_getFunctionInputs","getMappings","program_getMappings","getRecordMembers","record_name","program_getRecordMembers","getStructMembers","struct_name","program_getStructMembers","program_getCreditsProgram","program_id","program_address","isEqual","other","program_isEqual","program_getImports","ProgramManagerFinalization","__wbg_programmanager_free","fee_credits","fee_record","fee_proving_key","fee_verifying_key","offline_query","RecordPlaintext$1","ptr2","len2","ptr3","ptr4","ptr5","OfflineQuery$1","programmanager_buildDeploymentTransaction","estimateDeploymentFee","programmanager_estimateDeploymentFee","estimateProgramNameCost","programmanager_estimateProgramNameCost","r2","asUintN","_function","prove_execution","len4","programmanager_executeFunctionOffline","len3","ptr6","ptr7","ptr8","programmanager_buildExecutionTransaction","estimateExecutionFee","programmanager_estimateExecutionFee","estimateFinalizeFee","programmanager_estimateFinalizeFee","record_1","record_2","join_proving_key","join_verifying_key","programmanager_buildJoinTransaction","split_amount","amount_record","split_proving_key","split_verifying_key","programmanager_buildSplitTransaction","amount_credits","transfer_type","transfer_proving_key","transfer_verifying_key","ptr9","programmanager_buildTransferTransaction","programmanager_synthesizeKeyPair","ProvingKeyFinalization","__wbg_provingkey_free","isBondPublicProver","provingkey_isBondPublicProver","isBondValidatorProver","provingkey_isBondValidatorProver","isClaimUnbondPublicProver","provingkey_isClaimUnbondPublicProver","isFeePrivateProver","provingkey_isFeePrivateProver","isFeePublicProver","provingkey_isFeePublicProver","isInclusionProver","provingkey_isInclusionProver","isJoinProver","provingkey_isJoinProver","isSetValidatorStateProver","provingkey_isSetValidatorStateProver","isSplitProver","provingkey_isSplitProver","isTransferPrivateProver","provingkey_isTransferPrivateProver","isTransferPrivateToPublicProver","provingkey_isTransferPrivateToPublicProver","isTransferPublicProver","provingkey_isTransferPublicProver","isTransferPublicAsSignerProver","provingkey_isTransferPublicAsSignerProver","isTransferPublicToPrivateProver","provingkey_isTransferPublicToPrivateProver","isUnbondPublicProver","provingkey_isUnbondPublicProver","checksum","provingkey_checksum","copy","provingkey_copy","bytes","provingkey_fromBytes","string","provingkey_fromString","provingkey_toBytes","v1","provingkey_toString","RecordCiphertextFinalization","__wbg_recordciphertext_free","recordciphertext_fromString","recordciphertext_toString","recordciphertext_decrypt","recordciphertext_isOwner","RecordPlaintextFinalization","__wbg_recordplaintext_free","recordplaintext_commitment","Field$1","recordplaintext_fromString","recordplaintext_toString","recordplaintext_microcredits","recordplaintext_nonce","deferred4_0","deferred4_1","recordplaintext_serialNumberString","r3","SignatureFinalization","__wbg_signature_free","Signature","signature_verify","signature_from_string","signature_to_string","TransactionFinalization","__wbg_transaction_free","transaction_fromString","transaction_toString","transactionId","transaction_transactionId","transactionType","transaction_transactionType","VerifyingKeyFinalization","__wbg_verifyingkey_free","bondPublicVerifier","verifyingkey_bondPublicVerifier","bondValidatorVerifier","verifyingkey_bondValidatorVerifier","claimUnbondPublicVerifier","verifyingkey_claimUnbondPublicVerifier","feePrivateVerifier","verifyingkey_feePrivateVerifier","feePublicVerifier","verifyingkey_feePublicVerifier","inclusionVerifier","verifyingkey_inclusionVerifier","joinVerifier","verifyingkey_joinVerifier","setValidatorStateVerifier","verifyingkey_setValidatorStateVerifier","splitVerifier","verifyingkey_splitVerifier","transferPrivateVerifier","verifyingkey_transferPrivateVerifier","transferPrivateToPublicVerifier","verifyingkey_transferPrivateToPublicVerifier","transferPublicVerifier","verifyingkey_transferPublicVerifier","transferPublicAsSignerVerifier","verifyingkey_transferPublicAsSignerVerifier","transferPublicToPrivateVerifier","verifyingkey_transferPublicToPrivateVerifier","unbondPublicVerifier","verifyingkey_unbondPublicVerifier","isBondPublicVerifier","verifyingkey_isBondPublicVerifier","isBondValidatorVerifier","verifyingkey_isBondValidatorVerifier","isClaimUnbondPublicVerifier","verifyingkey_isClaimUnbondPublicVerifier","isFeePrivateVerifier","verifyingkey_isFeePrivateVerifier","isFeePublicVerifier","verifyingkey_isFeePublicVerifier","isInclusionVerifier","verifyingkey_isInclusionVerifier","isJoinVerifier","verifyingkey_isJoinVerifier","isSetValidatorStateVerifier","verifyingkey_isSetValidatorStateVerifier","isSplitVerifier","verifyingkey_isSplitVerifier","isTransferPrivateVerifier","verifyingkey_isTransferPrivateVerifier","isTransferPrivateToPublicVerifier","verifyingkey_isTransferPrivateToPublicVerifier","isTransferPublicVerifier","verifyingkey_isTransferPublicVerifier","isTransferPublicAsSignerVerifier","verifyingkey_isTransferPublicAsSignerVerifier","isTransferPublicToPrivateVerifier","verifyingkey_isTransferPublicToPrivateVerifier","isUnbondPublicVerifier","verifyingkey_isUnbondPublicVerifier","verifyingkey_checksum","verifyingkey_copy","verifyingkey_fromBytes","verifyingkey_fromString","verifyingkey_toBytes","verifyingkey_toString","ViewKeyFinalization","__wbg_viewkey_free","ViewKey","viewkey_from_string","viewkey_to_string","deferred3_0","deferred3_1","viewkey_decrypt","__wbg_load","Response","WebAssembly","instantiateStreaming","instantiate","Instance","__wbg_get_imports","wbg","__wbindgen_object_drop_ref","__wbg_new_71801a555ad9f2aa","XMLHttpRequest","arguments","__wbg_overrideMimeType_ee9c51919ceb418b","overrideMimeType","__wbg_open_c9eb0cf2c9d95679","arg4","arg5","open","__wbg_send_80d29985093c1ec5","send","__wbg_response_7c2e2759084f7279","__wbg_status_d485fb5a478426fb","__wbg_new_72fb9a18b5ae2624","__wbindgen_string_new","__wbg_set_1f9b04f170055d33","Reflect","__wbg_new_ab6fd82b10560829","Headers","__wbindgen_object_clone_ref","__wbg_new_0d76b0581eca6298","AbortController","__wbg_signal_a61f78a3478fd9bc","signal","__wbg_append_7bfcb4937d1d5e29","append","__wbg_instanceof_Response_849eb93e75734b6e","result","__wbg_status_61a01141acd3cf74","__wbg_url_5f6dc4009ac5f99d","__wbg_headers_9620bfada380764a","__wbg_iterator_2cee6dadfd956dfa","Symbol","iterator","__wbg_get_e3c254076557e348","__wbindgen_is_function","__wbg_call_27c0f87801dedf93","__wbindgen_is_object","__wbg_next_40fc327bfc8770e6","next","__wbg_next_196c84450b364254","__wbg_done_298b57d23c0fc80c","done","__wbg_value_d93c65011f51a456","__wbg_abort_2aa7521d5690750e","abort","__wbg_stringify_8887fe74e1c50d81","__wbindgen_string_get","__wbg_log_eb85b4536c227931","__wbindgen_bigint_from_u64","__wbg_call_b3ca7c6051f9bec1","__wbg_transaction_new","Transaction$1","__wbg_executionresponse_new","ExecutionResponse$1","__wbg_keypair_new","__wbg_newwithlength_66ae46612e7f0234","__wbg_set_d4638f722068f043","__wbindgen_module","__wbg_init","__wbindgen_wasm_module","__wbindgen_memory","__wbg_spawnWorker_4026f00664f3193f","__wbindgen_cb_drop","__wbg_new_16b304a2cfa7ff4a","__wbg_push_a5b05aedc7234f9f","__wbg_arrayBuffer_29931d52c7206b02","__wbg_new_63b92bc8671ed464","__wbg_length_c20a40f15020d68a","__wbg_new_81740750da40724f","state0","cb0","__wbindgen_number_new","__wbg_new_abda76e883ba8a5f","__wbg_stack_658279fe44541cf6","__wbg_error_f851667af71bcfc6","deferred0_0","deferred0_1","__wbg_buffer_12d079cc21e14bdb","__wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb","__wbg_randomFillSync_5c9c955aa56b6049","randomFillSync","__wbg_subarray_a1f73cd4b5b42fe1","__wbg_getRandomValues_3aa56aa6edec874c","getRandomValues","__wbg_set_a47bac70306a19a7","__wbg_crypto_1d1f22824a6a080c","crypto","__wbg_process_4a72847cc503995b","process","__wbg_versions_f686565e586dd935","versions","__wbg_node_104a2ff8d6ea03a2","node","__wbindgen_is_string","__wbg_require_cca90b1a94a0255b","require","__wbg_msCrypto_eb05e62b530a1508","msCrypto","__wbg_newwithlength_e9b4878cebadb3d3","__wbg_length_cd7af8117672b8b8","__wbg_get_bd8e338fbd5f5cc8","__wbg_self_ce0dbfc45cf2f5be","self","__wbg_window_c6fb939a7f436783","window","__wbg_globalThis_d1e6af4856ba331b","globalThis","__wbg_global_207b558942527489","global","__wbindgen_is_undefined","__wbg_newnoargs_e258087cd0daa0ea","Function","__wbg_has_0af94d20077affa2","__wbg_fetch_bc7c8e27076a5c84","__wbg_fetch_921fad6ef9e883dd","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","__wbg_then_a73caa9a87991566","then","__wbg_then_0c86a60e8fcfe9f6","__wbg_queueMicrotask_481971b0d87f3dd4","queueMicrotask","__wbg_queueMicrotask_3cbae2ec6b6cd3d6","__wbg_resolve_b0083a7967828ec8","__wbg_waitAsync_5d743fc9058ba01a","Atomics","waitAsync","__wbg_new_8cccba86b0f574cb","__wbg_waitAsync_46d5c36955b71a79","__wbg_async_19c0400d97cc72fe","__wbg_value_571d60108110e917","__wbindgen_link_fc1eedd35dc7e0a6","encodeURIComponent","__wbg_new_d1187ae36d662ef9","__wbg_setonmessage_503809e5bb51bd33","onmessage","__wbg_of_6a70eed8d41f469c","of","__wbg_postMessage_7380d10e8b8269df","__wbg_data_3ce7c145ca4fbcdc","__wbg_newwithstrandinit_3fd6fba4083ff2d0","Request","__wbg_responseText_c67ed2d48db10769","responseText","__wbindgen_closure_wrapper5994","__wbindgen_closure_wrapper6020","__wbg_init_memory","maybe_memory","Memory","initial","maximum","shared","__wbg_finalize_init","exports","__wbindgen_start","initSync","Module","input","URL","freeze","__proto__","Metadata$1","RecordCiphertext$1","default","wasm_path","opt","importHook","serverPath","initializeHook","final_path"],"sourceRoot":""}