{"version":3,"file":"427.bundle.js","mappings":";UAAIA,EACAC,EACAC,EACAC,ECHAC,ECAAC,uLCAE,SAAUC,EAAUC,GAUtB,OAAOC,KAAKC,MAAMF,GATlB,SAAgBG,EAAaC,EAAYC,GACrC,OAAIC,OAAOC,UAAUH,GACVI,OAAOH,EAAQI,QAGfL,IAKnB,CAGOM,eAAeC,EAAIC,EAAmBC,GACzC,MAAMC,QAAiBC,MAAMH,EAAKC,GAElC,IAAKC,EAASE,GACV,MAAM,IAAIC,MAAMH,EAASI,OAAS,sBAAwBN,GAG9D,OAAOE,CACX,CAGOJ,eAAeS,EAAKP,EAAmBC,GAC1CA,EAAQO,OAAS,OAEjB,MAAMN,QAAiBC,MAAMH,EAAKC,GAElC,IAAKC,EAASE,GACV,MAAM,IAAIC,MAAMH,EAASI,OAAS,uBAAyBN,GAG/D,OAAOE,CACX,CCJA,MAAMO,EACJC,KACAC,QACAC,QAEAC,WAAAA,CAAYH,EAAcT,GACxBa,KAAKJ,KAAOA,EAAO,WAEfT,GAAWA,EAAQU,QACrBG,KAAKH,QAAUV,EAAQU,QAGvBG,KAAKH,QAAU,CAEb,qBAAsB,UAa5BI,UAAAA,CAAWH,GACTE,KAAKF,QAAUA,EASjBI,UAAAA,GACE,OAAOF,KAAKF,QASdK,OAAAA,CAAQP,GACNI,KAAKJ,KAAOA,EAAO,WAGrB,eAAMQ,CACFlB,EAAM,KAER,IACE,MAAME,QAAiBH,EAAIe,KAAKJ,KAAOV,EAAK,CAC1CW,QAASG,KAAKH,UAIhB,OAAOxB,QADYe,EAASiB,QAG5B,MAAOC,GACP,MAAM,IAAIf,MAAM,yBA2BpB,wBAAMgB,CACFC,EACAC,EACAC,EACAC,EACAC,EACAC,GAIF,GAFAA,EAASA,GAAU,GAEfL,EAAc,EAChB,MAAM,IAAIjB,MAAM,mDAIlB,MAAMuB,EAAU,IAAIC,MACpB,IAAIC,EACAC,EACAC,EAGAC,EAFAC,EAAW,EACXC,EAAmBvC,OAAO,GAI9B,QAA0B,IAAf4B,EAA4B,CACrC,QAA4B,IAAjBV,KAAKF,QACd,MAAM,IAAIP,MAAM,oGAEhB2B,EAAqBlB,KAAKF,QAAQwB,iBAGpC,IACEJ,EAAqBR,aAAsBa,EAAAA,GAAab,EAAaa,EAAAA,GAAWC,YAAYd,GAC5F,MAAOJ,GACP,MAAM,IAAIf,MAAM,uCAGpB,MAAMkC,EAAUP,EAAmBQ,cAGnC,IACE,MAAMC,QAAoB3B,KAAK4B,kBAC/B,GAA2B,iBAAhBD,EAGT,MAAM,IAAIpC,MAAM,uCAFhB4B,EAAeQ,EAIjB,MAAOrB,GACP,MAAM,IAAIf,MAAM,uCAWlB,GANE0B,EADuB,iBAAdR,GAA0BA,GAAaU,EAC1CV,EAEAU,EAIJX,EAAcS,EAChB,MAAM,IAAI1B,MAAM,0DAIlB,KAAO0B,EAAMT,GAAa,CACxBQ,EAAQC,EAAM,GACVD,EAAQR,IACVQ,EAAQR,GAEV,IAEE,MAAMqB,QAAe7B,KAAK8B,cAAcd,EAAOC,GAC/CA,EAAMD,EAEN,IAAK,IAAIe,EAAI,EAAGA,EAAIF,EAAOG,OAAQD,IAAK,CACtC,MACME,EADQJ,EAAOE,GACME,aAC3B,QAA8B,IAAjBA,EACX,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAaD,OAAQE,IAAK,CAC5C,MAAMC,EAAuBF,EAAaC,GAE1C,GAAiC,WAA7BC,EAAqBC,KAAmB,CAC1C,MAAMC,EAAcF,EAAqBE,YACzC,GAAIA,EAAYC,gBAA2D,IAArCD,EAAYC,UAAUC,YAC1D,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAYC,UAAUC,YAAYP,OAAQQ,IAAK,CACjE,MAAMC,EAAaJ,EAAYC,UAAUC,YAAYC,GAErD,GAA2B,iBAAvBC,EAAWC,cAGoB,IAAtBD,EAAWE,QACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAWE,QAAQX,OAAQY,IAAK,CAClD,MAAMC,EAASJ,EAAWE,QAAQC,GAClC,GAAoB,WAAhBC,EAAOT,KACT,IAEE,MAAMU,EAASC,EAAAA,GAAiBC,WAAWH,EAAOnE,OAElD,GAAIoE,EAAOG,QAAQxB,GAAU,CAE3B,MAAMyB,EAAkBJ,EAAOK,QAAQ1B,GAGjC2B,EAAQF,EAAgBE,QAC9B,GAAIvC,EAAOwC,SAASD,GAClB,SAIF,MAAME,EAAeJ,EAAgBK,mBAAmBrC,EAAoB,eAAgB,WAE5F,UACQlB,KAAKwD,gBAAgBF,GAC3B,MAAOhD,GAEP,IAAKK,IACHG,EAAQ2C,KAAKP,GAEkB,iBAApBtC,IACTS,GAAoB6B,EAAgBQ,eAEhCrC,GAAoBvC,OAAO8B,KAC7B,OAAOE,EAKb,QAAyB,IAAZH,GAA4BA,EAAQqB,OAAS,EAAG,CAC3D,IAAI2B,EAAgB,EACpB,GAAIT,EAAgBQ,eAAiB/C,EAAQgD,GAAgB,CAIzD,GAHAA,GAAiB,EACjB7C,EAAQ2C,KAAKP,GAEkB,iBAApBtC,IACTS,GAAoB6B,EAAgBQ,eAEhCrC,GAAoBvC,OAAO8B,IAC7B,OAAOE,EAGX,GAAIA,EAAQkB,QAAUrB,EAAQqB,OAC5B,OAAOlB,MAMnB,MAAOR,GAAQ,OAWnC,MAAOA,GAKP,GAHAsD,QAAQC,KAAK,mCAAqC7C,EAAM8C,WAAa,IAAM7C,EAAI6C,YAC/EF,QAAQC,KAAK,UAAWvD,GACxBc,GAAY,EACRA,EAAW,GAEb,OADAwC,QAAQC,KAAK,0EACN/C,GAIb,OAAOA,EAUT,cAAMiD,CAASC,GACb,IAEE,aADoBhE,KAAKI,UAAiB,UAAY4D,GAEtD,MAAO1D,GACP,MAAM,IAAIf,MAAM,0BAYpB,mBAAMuC,CAAcd,EAAeC,GACjC,IACE,aAAajB,KAAKI,UAAwB,iBAAmBY,EAAQ,QAAUC,GAC/E,MAAOX,GAEP,MAAM,IAAIf,MADW,iCAAiCyB,SAAaC,OAWvE,0CAAMgD,CAAqCvB,GACrCA,aAAmBwB,EAAAA,KACrBxB,EAAUA,EAAQoB,YAEpB,IAEE,aADiB9D,KAAKI,UAAkB,kCAAoCsC,IAClEyB,QAAQ,IAAM,IACxB,MAAO7D,GACP,MAAM,IAAIf,MAAM,uDAUpB,wCAAM6E,CAAmC1B,GACvC,IACE,MAAM2B,QAA+BrE,KAAKiE,qCAAqCvB,GAC/E,aAA+B1C,KAAKsE,eAAeD,GACnD,MAAO/D,GACP,MAAM,IAAIf,MAAM,uDAUpB,oBAAMgF,GACJ,IACE,aAAavE,KAAKI,UAAiB,iBACnC,MAAOE,GACP,MAAM,IAAIf,MAAM,iCASpB,wBAAMiF,GACJ,IACE,aAAaxE,KAAKI,UAAkB,qBACpC,MAAOE,GACP,MAAM,IAAIf,MAAM,iCAUpB,qBAAMqC,GACJ,IACE,OAAOhD,aAAaoB,KAAKI,UAAkB,mBAC3C,MAAOE,GACP,MAAM,IAAIf,MAAM,kCAepB,gBAAMkF,CAAWC,GACf,IACE,aAAa1E,KAAKI,UAAkB,YAAcsE,GAClD,MAAOpE,GACP,MAAM,IAAIf,MAAM,2BAqBpB,sBAAMoF,CAAiBC,GACrB,IACE,OAAOV,EAAAA,GAAQlB,WAAW4B,GAC1B,MAAOtE,GACP,IACE,OAAO4D,EAAAA,GAAQlB,iBAA0BhD,KAAKyE,WAAWG,IACzD,MAAOtE,GACP,MAAM,IAAIf,MAAM,GAAGqF,oDA8BzB,uBAAMC,CAAkBD,GACtB,IACE,MAAME,EAA0B,CAAC,EAM3BC,GAHUH,aAAwBV,EAAAA,GAAUU,QAA+B5E,KAAK2E,iBAAiBC,IAG5EI,aAG3B,IAAK,IAAIjD,EAAI,EAAGA,EAAIgD,EAAW/C,OAAQD,IAAK,CAC1C,MAAMkD,EAAYF,EAAWhD,GAC7B,IAAK+C,EAAQI,eAAeD,GAAY,CACtC,MAAME,QAA8BnF,KAAKyE,WAAWQ,GAC9CG,QAAsCpF,KAAK6E,kBAAkBI,GACnE,IAAK,MAAMxG,KAAO2G,EACXN,EAAQI,eAAezG,KAC1BqG,EAAQrG,GAAO2G,EAAc3G,IAGjCqG,EAAQG,GAAaE,GAGzB,OAAOL,EACP,MAAOxE,GACP+E,EAAY,mCAAqC/E,EAAMgF,UAe3D,2BAAMC,CAAsBX,GAC1B,IAEE,OADgBA,aAAwBV,EAAAA,GAAUU,QAA+B5E,KAAK2E,iBAAiBC,IACxFI,aACf,MAAO1E,GACP,MAAM,IAAIf,MAAM,8CAAgDe,EAAMgF,UAa1E,4BAAME,CAAuBd,GAC3B,IACE,aAAa1E,KAAKI,UAAyB,YAAcsE,EAAY,aACrE,MAAOpE,GACP,MAAM,IAAIf,MAAM,6FAkBpB,4BAAMkG,CAAuBf,EAAmBgB,EAAqBjH,GACnE,IACE,aAAauB,KAAKI,UAAkB,YAAcsE,EAAY,YAAcgB,EAAc,IAAMjH,GAChG,MAAO6B,GACP,MAAM,IAAIf,MAAM,oFAUpB,kBAAMoG,GACJ,IACE,aAAa3F,KAAKI,UAAkB,qBACpC,MAAOE,GACP,MAAM,IAAIf,MAAM,mCAWpB,oBAAM+E,CAAesB,GACnB,IACA,aAAa5F,KAAKI,UAA4B,gBAAkBwF,GAC9D,MAAOtF,GACP,MAAM,IAAIf,MAAM,gCAWpB,qBAAMsG,CAAgB7B,GACpB,IACA,aAAahE,KAAKI,UAAmC,UAAY4D,EAAOF,WAAa,iBACnF,MAAOxD,GACP,MAAM,IAAIf,MAAM,iCAUpB,8BAAMuG,GACJ,IACE,aAAa9F,KAAKI,UAAmC,4BACrD,MAAOE,GACP,MAAM,IAAIf,MAAM,8CAWpB,qBAAMiE,CAAgBuC,GACpB,IACE,aAAa/F,KAAKI,UAAkB,sBAAwB2F,GAC5D,MAAOzF,GACP,MAAM,IAAIf,MAAM,kCAUpB,uBAAMyG,CAAkB3D,GACtB,MAAM4D,EAAqB5D,aAAuB6D,EAAAA,GAAc7D,EAAYyB,WAAazB,EACzF,IACE,MAAMjD,QAAiBK,EAAKO,KAAKJ,KAAO,yBAA0B,CAChEuG,KAAMF,EACNpG,QAASuG,OAAOC,OAAO,CAAC,EAAGrG,KAAKH,QAAS,CACvC,eAAgB,uBAIpB,IAEE,OAAOxB,QADYe,EAASiB,QAG5B,MAAOC,GACP,MAAM,IAAIf,MAAM,qDAAqDe,EAAMgF,YAE7E,MAAOhF,GACP,MAAM,IAAIf,MAAM,oDAAoDe,EAAMgF,aCjnBhF,MAAMgB,EACFC,KACAC,UACAC,YACAC,SAUA3G,WAAAA,CAAY4G,GACR3G,KAAKwG,UAAYG,EAAOH,UACxBxG,KAAKyG,YAAcE,EAAOF,YAC1BzG,KAAK0G,SAAWC,EAAOD,SACvB1G,KAAKuG,KAAOI,EAAOJ,MAyK3B,MAAMK,EACFC,MACAC,YACAC,QAEA,gBAAMC,CACF9H,EAAM,KAEN,IACA,MAAME,QAAiBH,EAAIC,GACrB+H,QAAa7H,EAAS8H,cAC5B,OAAO,IAAIC,WAAWF,GACpB,MAAO3G,GACL,MAAM,IAAIf,MAAM,uBAAyBe,EAAMgF,UAIvDvF,WAAAA,GACIC,KAAK+G,QAAUK,EACfpH,KAAK6G,MAAQ,IAAIQ,IACjBrH,KAAK8G,aAAc,EAQvBQ,QAAAA,CAASA,GACLtH,KAAK8G,YAAcQ,EAMvBC,UAAAA,GACIvH,KAAK6G,MAAMW,QAUfC,SAAAA,CAAUC,EAAeC,GACrB,MAAOC,EAAYC,GAAgBF,EACnC3H,KAAK6G,MAAMiB,IAAIJ,EAAO,CAACE,EAAWG,UAAWF,EAAaE,YAS9DC,YAAAA,CAAaN,GACT,OAAO1H,KAAK6G,MAAMoB,IAAIP,GAS1BQ,UAAAA,CAAWR,GACP,OAAO1H,KAAK6G,MAAMsB,OAAOT,GAS7BU,OAAAA,CAAQV,GAEJ,GADA9D,QAAQyE,MAAM,2CAA2CX,KACrD1H,KAAK6G,MAAMoB,IAAIP,GAAQ,CACvB,MAAOY,EAAiBC,GAAoCvI,KAAK6G,MAAM5H,IAAIyI,GAC3E,MAAO,CAACc,EAAAA,GAAWC,UAAUH,GAAkBI,EAAAA,GAAaD,UAAUF,IAEtE,MAAM,IAAIhJ,MAAM,2BAwBxB,kBAAMoJ,CAAahC,GACf,GAAIA,EAAQ,CACR,IAAIiC,EACAC,EACAnC,EACJ,GAAI,SAAUC,GAAmC,iBAAlBA,EAAa,KAAe,CACvD,IAAIlI,EAAMqK,EAAqBC,OAAOpC,EAAa,MACnD,OAAO3G,KAAKgJ,iBAAiBvK,GAejC,GAZI,cAAekI,GAAwC,iBAAvBA,EAAkB,YAClDiC,EAAYjC,EAAkB,WAG9B,gBAAiBA,GAA0C,iBAAzBA,EAAoB,cACtDkC,EAAclC,EAAoB,aAGlC,aAAcA,GAAuC,iBAAtBA,EAAiB,WAChDD,EAAWC,EAAiB,UAG5BiC,GAAaC,EACb,aAAa7I,KAAKiJ,gBAAgBL,EAAWC,EAAanC,GAG9D,GAAIA,EACA,OAAO1G,KAAKoI,QAAQ1B,GAG5B,MAAM,IAAInH,MAAM,oGA4BpB,qBAAM0J,CAAgBL,EAAmBC,EAAqBnC,GAC1D,IAEI,GAAI1G,KAAK8G,YAAa,CACbJ,IACDA,EAAWkC,GAEf,MAAMlK,EAAQsB,KAAK6G,MAAM5H,IAAIyH,GAC7B,QAAqB,IAAVhI,EACP,MAAO,CAAC8J,EAAAA,GAAWC,UAAU/J,EAAM,IAAKgK,EAAAA,GAAaD,UAAU/J,EAAM,KAClE,CACHkF,QAAQyE,MAAM,kCAAoCO,GAClD,MAAMhB,EAAyBY,EAAAA,GAAWC,gBAAgBzI,KAAKgH,WAAW4B,IAC1EhF,QAAQyE,MAAM,2BAA6BQ,GAC3C,MAAMhB,QAAoC7H,KAAKkJ,gBAAgBL,GAE/D,OADA7I,KAAK6G,MAAMiB,IAAIpB,EAAU,CAACkB,EAAWG,UAAWF,EAAaE,YACtD,CAACH,EAAYC,IAGvB,CAED,MAAMD,EAAyBY,EAAAA,GAAWC,gBAAgBzI,KAAKgH,WAAW4B,IAE1E,MAAO,CAAChB,QADkC5H,KAAKkJ,gBAAgBL,KAGrE,MAAOvI,GACL,MAAM,IAAIf,MAAM,UAAUe,EAAMgF,wDAAwDsD,SAAiBC,OAYjH,qBAAMM,CAAgBP,EAAmBlC,GACrC,IAEI,GAAI1G,KAAK8G,YAAa,CACbJ,IACDA,EAAWkC,GAEf,MAAMlK,EAAQsB,KAAK6G,MAAM5H,IAAIyH,GAC7B,QAAqB,IAAVhI,EACP,OAAO8J,EAAAA,GAAWC,UAAU/J,EAAM,IAElCkF,QAAQyE,MAAM,kCAAoCO,GAElD,OAD+BJ,EAAAA,GAAWC,gBAAgBzI,KAAKgH,WAAW4B,IAM9E,OAD+BJ,EAAAA,GAAWC,gBAAgBzI,KAAKgH,WAAW4B,IAGhF,MAAOtI,GACL,MAAM,IAAIf,MAAM,UAAUe,EAAMgF,0CAA0CsD,MAIlF,sBAAMI,CAAiBvK,GACnB,IACI,GAAKuB,KAAK6G,MAAMoB,IAAIxJ,EAAI2K,UAAapJ,KAAK8G,YAOnC,CACH,MAAMuC,EAAyBrJ,KAAK6G,MAAM5H,IAAIR,EAAI2K,SAClD,MAAO,CAACZ,EAAAA,GAAWC,UAAUY,EAAQ,IAAKX,EAAAA,GAAaD,UAAUY,EAAQ,KATtB,CACnD,MAAMC,EAAgB7K,EAAIoJ,eACpB0B,QAAgCvJ,KAAKmJ,gBAAgB1K,EAAI+K,OAAQ/K,EAAI2K,SAI3E,OAHIpJ,KAAK8G,aACL9G,KAAK6G,MAAMiB,IAAIgB,EAAqBW,YAAYL,QAAS,CAACG,EAAYxB,UAAWuB,EAAcvB,YAE5F,CAACwB,EAAaD,IAK3B,MAAOhJ,GACL,MAAM,IAAIf,MAAM,sCAAsCe,EAAMgF,YAIpE,oBAAMoE,GACF,OAAO1J,KAAKgJ,iBAAiBF,EAAqBW,aAGtDE,iBAAAA,GACI,OAAO3J,KAAKgJ,iBAAiBF,EAAqBc,gBAGtDC,qBAAAA,GACI,OAAO7J,KAAKgJ,iBAAiBF,EAAqBgB,qBAqBtD,kBAAMC,CAAaC,GACf,GAAIC,EAAiBhC,IAAI+B,GACrB,aAAahK,KAAKgJ,iBAAiBF,EAAqBoB,kBACrD,GAAIC,EAA2BlC,IAAI+B,GACtC,aAAahK,KAAKgJ,iBAAiBF,EAAqBsB,4BACrD,GAAIC,EAAgBpC,IAAI+B,GAC3B,aAAahK,KAAKgJ,iBAAiBF,EAAqBwB,iBACrD,GAAIC,EAA0BtC,IAAI+B,GACrC,aAAahK,KAAKgJ,iBAAiBF,EAAqB0B,2BACrD,GAAIC,EAA2BxC,IAAI+B,GACtC,aAAahK,KAAKgJ,iBAAiBF,EAAqB4B,4BAExD,MAAM,IAAInL,MAAM,2BASxB,cAAMoL,GACF,aAAa3K,KAAKgJ,iBAAiBF,EAAqB8B,MAQ5D,eAAMC,GACF,aAAa7K,KAAKgJ,iBAAiBF,EAAqBgC,OAQ5D,oBAAMC,GACF,aAAa/K,KAAKgJ,iBAAiBF,EAAqBkC,aAQ5D,mBAAMC,GACF,aAAajL,KAAKgJ,iBAAiBF,EAAqBoC,YAS5D,qBAAMhC,CAAgBzC,GAClB,OAAQA,GACJ,KAAKqC,EAAqBW,YAAY0B,SAClC,OAAOrC,EAAqBW,YAAY5B,eAC5C,KAAKiB,EAAqBc,eAAeuB,SACrC,OAAOrC,EAAqBc,eAAe/B,eAC/C,KAAKiB,EAAqBgB,oBAAoBqB,SAC1C,OAAOrC,EAAqBgB,oBAAoBjC,eACpD,KAAKiB,EAAqBkC,YAAYG,SAClC,OAAOrC,EAAqBkC,YAAYnD,eAC5C,KAAKiB,EAAqBoC,WAAWC,SACjC,OAAOrC,EAAqBoC,WAAWrD,eAC3C,KAAKiB,EAAqBsC,UAAUD,SAChC,OAAOrC,EAAqBsC,UAAUvD,eAC1C,KAAKiB,EAAqB8B,KAAKO,SAC3B,OAAOrC,EAAqB8B,KAAK/C,eACrC,KAAKiB,EAAqBuC,oBAAoBF,SAC1C,OAAOrC,EAAqBuC,oBAAoBxD,eACpD,KAAKiB,EAAqBgC,MAAMK,SAC5B,OAAOrC,EAAqBgC,MAAMjD,eACtC,KAAKiB,EAAqBoB,iBAAiBiB,SACvC,OAAOrC,EAAqBoB,iBAAiBrC,eACjD,KAAKiB,EAAqBsB,2BAA2Be,SACjD,OAAOrC,EAAqBsB,2BAA2BvC,eAC3D,KAAKiB,EAAqBwB,gBAAgBa,SACtC,OAAOrC,EAAqBwB,gBAAgBzC,eAChD,KAAKiB,EAAqB0B,0BAA0BW,SAChD,OAAOrC,EAAqB0B,0BAA0B3C,eAC1D,KAAKiB,EAAqB4B,2BAA2BS,SACjD,OAAOrC,EAAqB4B,2BAA2B7C,eAC3D,KAAKiB,EAAqBwC,cAAcH,SACpC,OAAOrC,EAAqBwC,cAAczD,eAC9C,QACI,IAEI,MAAMzI,QAAiBH,EAAIwH,GACrBpG,QAAajB,EAASiB,OAC5B,OAAqBqI,EAAAA,GAAa1F,WAAW3C,GAC/C,MAAOkL,GAEL,IACA,OAAqB7C,EAAAA,GAAaD,gBAAgBzI,KAAKgH,WAAWP,IAChE,MAAO+E,GACL,MAAM,IAAIjM,MAAM,iCAAmCiM,EAAMlG,YAM7EmG,gBAAAA,GACI,OAAOzL,KAAKgJ,iBAAiBF,EAAqBwC,gBC7hB1D,MAAMI,EACF5L,QACA6L,YACA/L,KACAgM,cACAC,eAQA9L,WAAAA,CAAYH,EAA2B+L,EAA+CE,GAClF7L,KAAKJ,KAAOA,GAAc,uCAC1BI,KAAK4L,cAAgB,IAAIjM,EAAkBK,KAAKJ,MAEhDI,KAAK2L,YAAcA,GAA4B,IAAI/E,EACnD5G,KAAK6L,eAAiBA,EAQ1B5L,UAAAA,CAAWH,GACPE,KAAKF,QAAUA,EAQnBgM,cAAAA,CAAeH,GACX3L,KAAK2L,YAAcA,EAQvBxL,OAAAA,CAAQP,GACJI,KAAKJ,KAAOA,EACZI,KAAK4L,cAAczL,QAAQP,GAQ/BmM,iBAAAA,CAAkBF,GACd7L,KAAK6L,eAAiBA,EAkC1B,YAAMG,CACFtJ,EACAuJ,EACAC,EACAC,EACAC,EACA1L,GAGA,IACI,MAAM2L,EAAgBnI,EAAAA,GAAQlB,WAAWN,GACzC,IAAIyC,EACJ,IACIA,QAAsBnF,KAAK4L,cAAcnH,WAAW4H,EAAczG,MACpE,MAAO2F,GAEL3H,QAAQ0I,IAAI,WAAWD,EAAczG,oDAEzC,GAA4B,iBAAjBT,EACP,KAAO,WAAWkH,EAAczG,iEAEtC,MAAO2F,GACLlG,EAAY,6BAA6BkG,EAAEjG,WAI/C,IAiBIiH,EAjBAC,EAAuB9L,EAK3B,QAJ0B,IAAfA,QAAsD,IAAjBV,KAAKF,UACjD0M,EAAuBxM,KAAKF,QAAQY,mBAGJ,IAAzB8L,EACP,KAAM,uEAIV,IACIJ,EAAYF,QAAoClM,KAAKyM,iBAAiBR,EAAK,GAAIG,EAAWD,QAAsBO,EAClH,MAAOnB,GACLlG,EAAY,sDAAsDkG,EAAEjG,6GAKxE,IACIiH,EAAUL,QAAoClM,KAAK2L,YAAYZ,uBAA0C/K,KAAK2L,YAAYV,gBAC5H,MAAOM,GACLlG,EAAY,iDAAiDkG,EAAEjG,sEAEnE,MAAOqH,EAAeC,GAAmBL,EAGzC,IAAIzH,EACJ,IACIA,QAAgB9E,KAAK4L,cAAc/G,kBAAkBnC,GACvD,MAAO6I,GACLlG,EAAY,qDAAqDkG,EAAEjG,gHAIvE,MAAMuH,QAAWC,EAAAA,GAAmBC,2BAA2BP,EAAsB9J,EAASuJ,EAAKG,EAAWpM,KAAKJ,KAAMkF,EAAS6H,EAAeC,GACjJ,aAAa5M,KAAK4L,cAAc5F,kBAAkB6G,GA8BtD,+BAAMG,CAA0B7N,GAE5B,MAAM,YACF8N,EAAW,aACXC,EAAY,IACZjB,EAAG,WACHC,EAAU,OACViB,EAAM,mBACNhB,EAAkB,gBAClBiB,EAAe,WACf1M,EAAU,aACV2M,GACAlO,EAEJ,IAAIiN,EAAYjN,EAAQiN,UACpBxE,EAAazI,EAAQyI,WACrBC,EAAe1I,EAAQ0I,aACvBnF,EAAUvD,EAAQuD,QAClBoC,EAAU3F,EAAQ2F,QAGtB,QAAgB4H,IAAZhK,EACA,IACIA,QAAyB1C,KAAK4L,cAAcnH,WAAWwI,GACzD,MAAO1B,GACLlG,EAAY,iBAAiB4H,yBAAmC1B,EAAEjG,iHAE/D5C,aAAmBwB,EAAAA,KAC1BxB,EAAUA,EAAQoB,YAItB,IAiBIyI,EAjBAe,EAAsB5M,EAK1B,QAJ0B,IAAfA,QAAsD,IAAjBV,KAAKF,UACjDwN,EAAsBtN,KAAKF,QAAQY,mBAGJ,IAAxB4M,EACP,KAAM,uEAIV,IACIlB,EAAYF,QAAoClM,KAAKyM,iBAAiBR,EAAK,GAAIG,EAAWD,QAAsBO,EAClH,MAAOnB,GACLlG,EAAY,sDAAsDkG,EAAEjG,6GAKxE,IACIiH,EAAUL,QAAoClM,KAAK2L,YAAYZ,uBAA0C/K,KAAK2L,YAAYV,gBAC5H,MAAOM,GACLlG,EAAY,iDAAiDkG,EAAEjG,sEAEnE,MAAOqH,EAAeC,GAAmBL,EAGzC,IAAK3E,IAAeC,EAChB,KACKD,EAAYC,SAAuC7H,KAAK2L,YAAYhD,aAAayE,GACpF,MAAO7B,GACL3H,QAAQ0I,IAAI,kDAAkDf,6CAMtE,GADwBrH,EAAAA,GAAQlB,WAAWN,GAASsC,aAAahD,OAC3C,IAAM8C,EACxB,IACIA,QAAgC9E,KAAK4L,cAAc/G,kBAAkBoI,GACvE,MAAO1B,GACLlG,EAAY,qDAAqDkG,EAAEjG,gHAK3E,aAAawH,EAAAA,GAAmBE,0BAA0BM,EAAqB5K,EAASwK,EAAcC,EAAQlB,EAAKG,EAAWpM,KAAKJ,KAAMkF,EAAS8C,EAAYC,EAAc8E,EAAeC,EAAiBS,GA8BhN,aAAME,CAAQpO,GACV,MAAM0N,QAAwB7M,KAAKgN,0BAA0B7N,GAC7D,aAAaa,KAAK4L,cAAc5F,kBAAkB6G,GAoCtD,SAAMW,CACF9K,EACA+K,EACAN,EACAO,EACA5I,EACAsI,EACAxF,EACAC,EACAnH,EACA2M,GAGA,IAAIC,EAAsB5M,EAK1B,QAJ0B,IAAfA,QAAsD,IAAjBV,KAAKF,UACjDwN,EAAsBtN,KAAKF,QAAQY,mBAGJ,IAAxB4M,EACP,KAAM,uEAIV,IAAK1F,IAAeC,EAChB,KACKD,EAAYC,SAAuC7H,KAAK2L,YAAYhD,aAAayE,GACpF,MAAO7B,GACL3H,QAAQ0I,IAAI,kDAAkDf,6CAQtE,OAHA3H,QAAQ0I,IAAI,2BACZ1I,QAAQ0I,IAAI,gBAAiB1E,GAC7BhE,QAAQ0I,IAAI,kBAAmBzE,GACxBiF,EAAAA,GAAmBa,uBAAuBL,EAAqB5K,EAAS+K,EAAeN,EAAQO,GAAgB,EAAO5I,EAAS8C,EAAYC,EAAc7H,KAAKJ,KAAMyN,GAiB/K,UAAMzC,CACFgD,EACAC,EACA5B,EACAC,EACAC,EACAC,EACA1L,EACA2M,GAGA,IAUId,EACA5B,EAXA2C,EAAsB5M,EAK1B,QAJ0B,IAAfA,QAAsD,IAAjBV,KAAKF,UACjDwN,EAAsBtN,KAAKF,QAAQY,mBAGJ,IAAxB4M,EACP,KAAM,uEAMV,IACIf,EAAUL,QAAoClM,KAAK2L,YAAYZ,uBAA0C/K,KAAK2L,YAAYV,gBAC1HN,QAAkC3K,KAAK2L,YAAYhB,WACrD,MAAOY,GACLlG,EAAY,iDAAiDkG,EAAEjG,sEAEnE,MAAOqH,EAAeC,GAAmBL,GAClCuB,EAAgBC,GAAoBpD,EAG3C,IACIyB,EAAYF,QAAoClM,KAAKyM,iBAAiBR,EAAK,GAAIG,EAAWD,QAAsBO,EAClH,MAAOnB,GACLlG,EAAY,sDAAsDkG,EAAEjG,6GAIxE,IACIsI,EAAYA,aAAqBI,EAAAA,GAAkBJ,EAAYI,EAAAA,GAAgBhL,WAAW4K,GAC1FC,EAAYA,aAAqBG,EAAAA,GAAkBH,EAAYG,EAAAA,GAAgBhL,WAAW6K,GAC5F,MAAOtC,GACLlG,EAAY,mFAIhB,MAAMwH,QAAWC,EAAAA,GAAmBmB,qBAAqBX,EAAqBM,EAAWC,EAAW5B,EAAKG,EAAWpM,KAAKJ,KAAMkO,EAAgBC,EAAkBpB,EAAeC,EAAiBS,GACjM,aAAarN,KAAK4L,cAAc5F,kBAAkB6G,GAyBtD,WAAM/B,CAAMoD,EAAqBC,EAAwCzN,EAAyB2M,GAE9F,IAUIxC,EAVAyC,EAAsB5M,EAK1B,QAJmC,IAAxB4M,QAA+D,IAAjBtN,KAAKF,UAC1DwN,EAAsBtN,KAAKF,QAAQY,mBAGJ,IAAxB4M,EACP,KAAM,uEAKV,IACIzC,QAAmC7K,KAAK2L,YAAYd,YACtD,MAAOU,GACLlG,EAAY,iDAAiDkG,EAAEjG,sEAEnE,MAAO8I,EAAiBC,GAAqBxD,EAG7C,IACIsD,EAAeA,aAAwBH,EAAAA,GAAkBG,EAAeH,EAAAA,GAAgBhL,WAAWmL,GACrG,MAAO5C,GACLlG,EAAY,+EAIhB,MAAMwH,QAAWC,EAAAA,GAAmBwB,sBAAsBhB,EAAqBY,EAAaC,EAAcnO,KAAKJ,KAAMwO,EAAiBC,EAAmBhB,GACzJ,aAAarN,KAAK4L,cAAc5F,kBAAkB6G,GAatD,oBAAM0B,CACF7L,EACA8L,EACArB,EACAzM,GAGA,IAAIoE,EAEAwI,EAAsB5M,OACS,IAAxB4M,IAEHA,OADwB,IAAjBtN,KAAKF,QACUE,KAAKF,QAAQY,aAEb,IAAIa,EAAAA,IAKlC,IACIuD,QAAgB9E,KAAK4L,cAAc/G,kBAAkBnC,GACrD,MAAM2G,QAAgByD,EAAAA,GAAmB2B,kBACrCnB,EACA5K,EACA8L,EACArB,EACArI,GAEJ,MAAO,CAAauE,EAAQzB,aAA4ByB,EAAQxB,gBAClE,MAAO0D,GACLlG,EAAY,qCAAqCkG,EAAEjG,4EAiC3D,8BAAMoJ,CACFC,EACAC,EACAC,EACA5C,EACAC,EACAC,EACAgC,EACA/B,EACA1L,EACA2M,GAGAwB,EAAuBC,EAAqBD,GAG5C,IAUItC,EACAxC,EAXAuD,EAAsB5M,EAK1B,QAJmC,IAAxB4M,QAA+D,IAAjBtN,KAAKF,UAC1DwN,EAAsBtN,KAAKF,QAAQY,mBAGJ,IAAxB4M,EACP,KAAM,uEAMV,IACIf,EAAUL,QAAoClM,KAAK2L,YAAYZ,uBAA0C/K,KAAK2L,YAAYV,gBAC1HlB,QAAsC/J,KAAK2L,YAAY5B,aAAa8E,GACtE,MAAOtD,GACLlG,EAAY,iDAAiDkG,EAAEjG,sEAEnE,MAAOqH,EAAeC,GAAmBL,GAClCwC,EAAoBC,GAAwBjF,EAGnD,IAEI,MAAMlJ,EAAmB,GACrBoO,EAAqBJ,IAErBV,QAAsCnO,KAAKyM,iBAAiBR,EAAK,GAAIkC,EAAchC,GACnFtL,EAAO4C,KAAK0K,EAAa/K,UAEzB+K,OAAezB,EAEnBN,EAAYF,QAAoClM,KAAKyM,iBAAiBR,EAAKpL,EAAQuL,EAAWD,QAAsBO,EACtH,MAAOnB,GACLlG,EAAY,sDAAsDkG,EAAEjG,6GAIxE,aAAawH,EAAAA,GAAmB4B,yBAAyBpB,EAAqBqB,EAAQC,EAAWC,EAAcV,EAAclC,EAAKG,EAAWpM,KAAKJ,KAAMmP,EAAoBC,EAAsBrC,EAAeC,EAAiBS,GAmBtO,oCAAM6B,CACFP,EACAC,EACA3C,EACAvL,EACA2M,GAEA,OAAOrN,KAAK0O,yBAAyBC,EAAQC,EAAW,SAAU3C,GAAK,OAAOS,OAAWA,OAAWA,EAAWhM,EAAY2M,GAmB/H,4CAAM8B,CACFR,EACAC,EACA3C,EACAvL,EACA2M,GAEA,OAAOrN,KAAK0O,yBAAyBC,EAAQC,EAAW,SAAU3C,GAAK,OAAOS,OAAWA,OAAWA,EAAWhM,EAAY2M,GA+B/H,cAAM+B,CACFT,EACAC,EACAC,EACA5C,EACAC,EACAC,EACAgC,EACA/B,EACA1L,EACA2M,GAEA,MAAMR,QAAwB7M,KAAK0O,yBAAyBC,EAAQC,EAAWC,EAAc5C,EAAKC,EAAYC,EAAoBgC,EAAc/B,EAAW1L,EAAY2M,GACvK,aAAarN,KAAK4L,cAAc5F,kBAAkB6G,GAiCtD,gCAAMwC,CAA2BC,EAAwBC,EAA2BC,EAA4Bb,EAAgBxP,EAAmC,CAAC,GAChK,MAAMsQ,EAAeC,KAAKC,MAAe,IAAThB,IAE1B,YACF1B,EAAc,eAAc,aAC5BC,EAAe,cAAa,IAC5BjB,EAAM9M,EAAQ8M,KAAO,IAAI,WACzBC,GAAa,EAAK,OAClBiB,EAAS,CAACmC,EAAgBC,EAAmBC,EAAoB,GAAGC,EAAa3L,iBAAgB,gBACjGsJ,EAAkB,IAAI9G,EAAsB,CACxCE,UAAWsC,EAAqBW,YAAYD,OAC5C/C,YAAaqC,EAAqBW,YAAY0B,SAC9CzE,SAAU,6BACZ,QACFhE,EAAU1C,KAAK4P,oBACZC,GACH1Q,EAEE2Q,EAAiC,CACnC7C,cACAC,eACAjB,MACAC,aACAiB,SACAC,qBACGyC,GAGP,aAAa7P,KAAKgN,0BAA0B8C,GA6BhD,gBAAMC,CAAWT,EAAwBC,EAA2BC,EAA2Bb,EAAgBxP,EAAmC,CAAC,GAC/I,MAAM0N,QAAwB7M,KAAKqP,2BAA2BC,EAAgBC,EAAmBC,EAAoBb,EAAQxP,GAC7H,aAAaa,KAAK4L,cAAc5F,kBAAkB6G,GAiCtD,mCAAMmD,CAA8BT,EAA2BC,EAA4Bb,EAAgBsB,EAAoB9Q,EAAmC,CAAC,GAC/J,MAAMsQ,EAAeC,KAAKC,MAAe,IAAThB,GAE1BuB,EAAqBR,KAAKC,MAAMM,IAEhC,YACFhD,EAAc,eAAc,aAC5BC,EAAe,iBAAgB,IAC/BjB,EAAM9M,EAAQ8M,KAAO,IAAI,WACzBC,GAAa,EAAK,OAClBiB,EAAS,CAACoC,EAAmBC,EAAoB,GAAGC,EAAa3L,gBAAiB,GAAGoM,EAAmBpM,gBAAe,gBACvHsJ,EAAkB,IAAI9G,EAAsB,CACxCE,UAAWsC,EAAqBc,eAAeJ,OAC/C/C,YAAaqC,EAAqBc,eAAeuB,SACjDzE,SAAU,gCACZ,QACFhE,EAAU1C,KAAK4P,oBACZC,GACH1Q,EAEE2Q,EAAiC,CACnC7C,cACAC,eACAjB,MACAC,aACAiB,SACAC,qBACGyC,GAGP,aAAa7P,KAAKgN,0BAA0B8C,GA6BhD,mBAAMK,CAAcZ,EAA2BC,EAA4Bb,EAAgBsB,EAAoB9Q,EAAmC,CAAC,GAC/I,MAAM0N,QAAwB7M,KAAKgQ,8BAA8BT,EAAmBC,EAAoBb,EAAQsB,EAAY9Q,GAC5H,aAAaa,KAAK4L,cAAc5F,kBAAkB6G,GAwBtD,kCAAMuD,CAA6Bd,EAAwBX,EAAgBxP,EAAmC,CAAC,GAC3G,MAAMsQ,EAAeC,KAAKC,MAAe,IAAThB,IAE1B,YACF1B,EAAc,eAAc,aAC5BC,EAAe,gBAAe,IAC9BjB,EAAM9M,EAAQ8M,KAAO,IAAG,WACxBC,GAAa,EAAK,OAClBiB,EAAS,CAACmC,EAAgB,GAAGG,EAAa3L,iBAAgB,gBAC1DsJ,EAAkB,IAAI9G,EAAsB,CACxCE,UAAWsC,EAAqBwC,cAAc9B,OAC9C/C,YAAaqC,EAAqBwC,cAAcH,SAChDzE,SAAU,+BACZ,QACFhE,EAAU1C,KAAK4P,oBACZC,GACH1Q,EAEE2Q,EAAiC,CACnC7C,cACAC,eACAjB,MACAC,aACAiB,SACAC,qBACGyC,GAGP,OAAO7P,KAAKgN,0BAA0B8C,GA4B1C,kBAAMO,CAAaf,EAAwBX,EAAgBxP,EAAmC,CAAC,GAC3F,MAAM0N,QAAwB7M,KAAKoQ,6BAA6Bd,EAAgBX,EAAQxP,GACxF,aAAaa,KAAK4L,cAAc5F,kBAAkB6G,GAyBtD,uCAAMyD,CAAkChB,EAAwBnQ,EAAmC,CAAC,GAChG,MAAM,YACF8N,EAAc,eAAc,aAC5BC,EAAe,sBAAqB,IACpCjB,EAAM9M,EAAQ8M,KAAO,EAAC,WACtBC,GAAa,EAAK,OAClBiB,EAAS,CAACmC,GAAe,gBACzBlC,EAAkB,IAAI9G,EAAsB,CACxCE,UAAWsC,EAAqBgB,oBAAoBN,OACpD/C,YAAaqC,EAAqBgB,oBAAoBqB,SACtDzE,SAAU,qCACZ,QACFhE,EAAU1C,KAAK4P,oBACZC,GACH1Q,EAEE2Q,EAAiC,CACnC7C,cACAC,eACAjB,MACAC,aACAiB,SACAC,qBACGyC,GAGP,aAAa7P,KAAKgN,0BAA0B8C,GAuBhD,uBAAMS,CAAkBjB,EAAwBnQ,EAAmC,CAAC,GAChF,MAAM0N,QAAwB7M,KAAKsQ,kCAAkChB,EAAgBnQ,GACrF,aAAaa,KAAK4L,cAAc5F,kBAAkB6G,GAiCtD,uCAAM2D,CAAkCC,EAA0BtR,EAAmC,CAAC,GAClG,MAAM,YACF8N,EAAc,eAAc,aAC5BC,EAAe,sBAAqB,IACpCjB,EAAM,EAAC,WACPC,GAAa,EAAK,OAClBiB,EAAS,CAACsD,EAAgB3M,YAAW,gBACrCsJ,EAAkB,IAAI9G,EAAsB,CACxCE,UAAWsC,EAAqBuC,oBAAoB7B,OACpD/C,YAAaqC,EAAqBuC,oBAAoBF,SACtDzE,SAAU,wCAEXmJ,GACH1Q,EAEE2Q,EAAiC,CACnC7C,cACAC,eACAjB,MACAC,aACAiB,SACAC,qBACGyC,GAGP,aAAa7P,KAAKuN,QAAQuC,GA8B9B,uBAAMY,CAAkBD,EAA0BtR,EAAmC,CAAC,GAClF,MAAM0N,QAAmB7M,KAAKwQ,kCAAkCC,EAAiBtR,GACjF,OAAOa,KAAK4L,cAAc5F,kBAAkB6G,GAShD8D,eAAAA,CAAgBC,GACZ,IACI,MAAMtO,EAA+BsO,EAAkBC,eACjDrC,EAAcoC,EAAkBE,gBAChCpO,EAAUkO,EAAkBnM,aAC5BoD,EAAe+I,EAAkB1H,kBACvC,OAAO6H,EAAAA,EAAAA,IAAwBzO,EAAWuF,EAAcnF,EAAS8L,GACnE,MAAMjD,GAEJ,OADA3H,QAAQC,KAAK,6EACN,GAUfmN,uBAAAA,CAAwBtO,GACpB,OAAOwB,EAAAA,GAAQlB,WAAWN,GAQ9BkN,cAAAA,GACI,OAAO1L,EAAAA,GAAQ+M,oBAQnBC,aAAAA,CAAcxO,GACV,IAEI,OADSwB,EAAAA,GAAQlB,WAAWN,IACrB,EACT,MAAO6I,GACL,OAAO,GAKf,sBAAMkB,CAAiBkC,EAAgB9N,EAAkBiC,EAAmC6D,GACxF,IACI,OAAO7D,aAAkBkL,EAAAA,GAAkBlL,EAASkL,EAAAA,GAAgBhL,WAAmBF,GACzF,MAAOyI,GACL,IACI,MAAMM,EAAiC7L,KAAK6L,eAC5C,aAA+BA,EAAesF,kBAAkBxC,GAAQ,EAAM9N,EAAQ8F,GACxF,MAAO4E,GACLlG,EAAY,sDAAsDkG,EAAEjG,gHAOpF,SAAS2J,EAAqBJ,GAC1B,OAAOuC,EAAuBnJ,IAAI4G,EACtC,CAGA,SAASC,EAAqBD,GAC1B,OAAOwC,EAAqBpJ,IAAI4G,GAAgBA,EAC5CxJ,EAAY,0BAA0BwJ,8FAC9C,CChwCA,MAAMzH,EAAYkK,EAAAA,GAASC,UAU3B,SAASC,EAAQC,GAEb,MAAM5J,EAAgBa,EAAAA,GAAqB+I,EAAS5J,cAEpD,IAAKA,EACD,MAAM,IAAItI,MAAM,wBAA0BkS,EAAS5J,cAGvD,MAAO,CACHtB,KAAMkL,EAASlL,KACf6C,QAASqI,EAASrI,QAClBI,OAAQiI,EAASjI,OACjB2B,SAAUsG,EAAStG,SACnBtD,eAER,CAEA,MAAMiB,EAAuB,CACzBW,YAAa+H,EAAQF,EAAAA,GAAS7H,eAC9BG,eAAgB4H,EAAQF,EAAAA,GAAS1H,kBACjCE,oBAAqB0H,EAAQF,EAAAA,GAASxH,uBACtCkB,YAAawG,EAAQF,EAAAA,GAAStG,eAC9BE,WAAYsG,EAAQF,EAAAA,GAASpG,cAC7BE,UAAWoG,EAAQF,EAAAA,GAASlG,aAC5BR,KAAM4G,EAAQF,EAAAA,GAAS1G,QACvBS,oBAAqBmG,EAAQF,EAAAA,GAASjG,uBACtCP,MAAO0G,EAAQF,EAAAA,GAASxG,SACxBZ,iBAAkBsH,EAAQF,EAAAA,GAASpH,oBACnCE,2BAA4BoH,EAAQF,EAAAA,GAASlH,8BAC7CE,gBAAiBkH,EAAQF,EAAAA,GAAShH,mBAClCE,0BAA2BgH,EAAQF,EAAAA,GAAS9G,6BAC5CE,2BAA4B8G,EAAQF,EAAAA,GAAS5G,8BAC7CY,cAAekG,EAAQF,EAAAA,GAAShG,iBAChCvC,OAAQ,SAAStK,GACb,GAAIuB,KAAKkF,eAAezG,GACpB,OAAQuB,KAAavB,GAErB,MAAM,IAAIc,MAAM,QAAQd,mBAK9B2S,EAAyB,IAAIM,IAAI,CACnC,mBACA,UACA,kBACA,6BACA,kBACA,4BAEEL,EAAuB,IAAIK,IAAI,CACjC,mBACA,UACA,kBACA,6BACA,kBACA,0BACA,kBACA,4BACA,SACA,mBACA,iBACA,yBACA,6BACA,kBACA,iBACA,4BAEEzH,EAAmB,IAAIyH,IAAI,CAC7B,UACA,mBACA,oBAEEvH,EAA6B,IAAIuH,IAAI,CACvC,oBACA,kBACA,6BACA,4BAEErH,EAAkB,IAAIqH,IAAI,CAC5B,SACA,kBACA,mBAEEnH,EAA4B,IAAImH,IAAI,CACtC,mBACA,4BACA,2BAEEjH,EAA6B,IAAIiH,IAAI,CACvC,oBACA,kBACA,6BACA,4BAGJ,SAASrM,EAAYC,GAEjB,MADA1B,QAAQtD,MAAMgF,GACR,IAAI/F,MAAM+F,EACpB,qJC3GMqM,EAAAA,EAAAA,MAEN,MAAMC,EAAc,uCACdjG,EAAc,IAAI/E,EAAAA,gBAClBiL,EAAiB,IAAInG,EAAAA,eACvBkG,EACAjG,OACAe,GAGJf,EAAYrE,UAAS,GAErB,IAAIwK,EAA2B,GAY/B9S,eAAewO,EACXuE,EACAC,EACA7E,EACAzM,EACAgN,GAAiB,GAEjB9J,QAAQ0I,IAAI,6CACZ,MAAM2F,EAAYC,YAAYC,MAG9B,IAAIzP,EAEJ,IACIA,EAAUmP,EAAeb,wBAAwBe,GACnD,MAAOxG,GACL,MAAM,IAAIhM,MAAM,sCAGpB,MAAM6S,EAAa1P,EAAQkD,KAC3B,IAAKlD,EAAQ2P,YAAYL,GACrB,MAAM,IAAIzS,MAAM,WAAW6S,+BAAwCJ,KAEvE,MAAMtL,EAAW,GAAG0L,KAAcJ,IAIlC,IAAIlN,EAEJ,IACIA,QAAgB+M,EAAejG,cAAc/G,kBACzCkN,GAEN,MAAOxG,GACL,MAAM,IAAIhM,MAAM,iCAIpB,GAAIuS,IAAqBC,EAAc,CACnC,MAAMpK,QAA8BkK,EAAetD,eAC/CwD,EACAC,EACA7E,EACA5L,EAAAA,GAAWC,YAAYd,IAE3BmR,EAAelG,YAAYlE,UAAUf,EAAUiB,GAC/CmK,EAAmBC,EAIvB,MAAMO,EAAY,IAAIhM,EAAAA,sBAAsB,CACxCI,SAAUA,IAIRtH,QAAiByS,EAAerE,IAClCuE,EACAC,EACA7E,EACAO,EACA5I,EACAwN,OACA5F,OACAA,EACAnL,EAAAA,GAAWC,YAAYd,IAI3BkD,QAAQ0I,IACJ,4CACI4F,YAAYC,MAAQF,QAG5B,MAAMtP,EAAUvD,EAASmT,aACnBjQ,EAAYlD,EAASyR,eAC3B,IAEIlJ,EAFA6K,EAAkB,GAItB,IACI7K,EAAOgE,EAAYvD,QAAQ1B,GAC7B,MAAO6E,GACL,MAAM,IAAIhM,MAAM,+BAGpB,MAAMsI,EAAeF,EAAK,GAiB1B,OAfIrF,IACAyO,EAAAA,EAAAA,IACIzO,EACAuF,EACAnF,EACA,SAEJ8P,EAAkBlQ,EAAUwB,WAC5BF,QAAQ0I,IAAI,oCAAsChK,IAElDkQ,EAAkB,GAGtB5O,QAAQ0I,IAAI,gCAAgC3J,KAErC,CAAEA,QAASA,EAASL,UAAWkQ,EAC1C,CAEAxT,eAAeyT,IAEX,OADmB,IAAIlR,EAAAA,IACLmR,WACtB,CAEA,MAAMC,EAAY,CAAEnF,MAAKiF,kBACzBG,EAAAA,EAAAA,GAAOD,4DCvIP,MAAME,EAAcC,OAAO,iBACrBC,EAAiBD,OAAO,oBACxBE,EAAeF,OAAO,wBACtBG,EAAYH,OAAO,qBACnBI,EAAcJ,OAAO,kBACrBK,EAAYC,GAAwB,iBAARA,GAA4B,OAARA,GAAgC,mBAARA,EAgDxEC,EAAmB,IAAIhM,IAAI,CAC7B,CAAC,QA7CwB,CACzBiM,UAAYF,GAAQD,EAASC,IAAQA,EAAIP,GACzC,SAAAU,CAAUC,GACN,MAAM,MAAEC,EAAK,MAAEC,GAAU,IAAIC,eAE7B,OADAf,EAAOY,EAAKC,GACL,CAACC,EAAO,CAACA,GACpB,EACA,WAAAE,CAAYC,GAER,OADAA,EAAK7S,QAiJF8S,EAhJSD,EAgJO,GAAIE,GAD/B,IAAkBA,CA9Id,IAoCA,CAAC,QA/BwB,CACzBT,UAAY5U,GAAUyU,EAASzU,IAAUwU,KAAexU,EACxD,SAAA6U,EAAU,MAAE7U,IACR,IAAIsV,EAcJ,OAZIA,EADAtV,aAAiBa,MACJ,CACT0U,SAAS,EACTvV,MAAO,CACH4G,QAAS5G,EAAM4G,QACfiB,KAAM7H,EAAM6H,KACZ2N,MAAOxV,EAAMwV,QAKR,CAAED,SAAS,EAAOvV,SAE5B,CAACsV,EAAY,GACxB,EACA,WAAAJ,CAAYI,GACR,GAAIA,EAAWC,QACX,MAAM7N,OAAOC,OAAO,IAAI9G,MAAMyU,EAAWtV,MAAM4G,SAAU0O,EAAWtV,OAExE,MAAMsV,EAAWtV,KACrB,MAoBJ,SAASkU,EAAOY,EAAKW,EAAKC,WAAYC,EAAiB,CAAC,MACpDF,EAAGG,iBAAiB,WAAW,SAASC,EAASC,GAC7C,IAAKA,IAAOA,EAAGvN,KACX,OAEJ,IAhBR,SAAyBoN,EAAgBI,GACrC,IAAK,MAAMC,KAAiBL,EAAgB,CACxC,GAAII,IAAWC,GAAmC,MAAlBA,EAC5B,OAAO,EAEX,GAAIA,aAAyBC,QAAUD,EAAcE,KAAKH,GACtD,OAAO,CAEf,CACA,OAAO,CACX,CAMaI,CAAgBR,EAAgBG,EAAGC,QAEpC,YADA7Q,QAAQC,KAAK,mBAAmB2Q,EAAGC,6BAGvC,MAAM,GAAE7O,EAAE,KAAExD,EAAI,KAAE0S,GAAS1O,OAAOC,OAAO,CAAEyO,KAAM,IAAMN,EAAGvN,MACpD8N,GAAgBP,EAAGvN,KAAK8N,cAAgB,IAAIC,IAAIC,GACtD,IAAIC,EACJ,IACI,MAAMC,EAASL,EAAKM,MAAM,GAAI,GAAGC,QAAO,CAAC7B,EAAK8B,IAAS9B,EAAI8B,IAAO9B,GAC5D+B,EAAWT,EAAKO,QAAO,CAAC7B,EAAK8B,IAAS9B,EAAI8B,IAAO9B,GACvD,OAAQpR,GACJ,IAAK,MAEG8S,EAAcK,EAElB,MACJ,IAAK,MAEGJ,EAAOL,EAAKM,OAAO,GAAG,IAAMH,EAAcT,EAAGvN,KAAKvI,OAClDwW,GAAc,EAElB,MACJ,IAAK,QAEGA,EAAcK,EAASC,MAAML,EAAQJ,GAEzC,MACJ,IAAK,YAGGG,EA6KxB,SAAe1B,GACX,OAAOpN,OAAOC,OAAOmN,EAAK,CAAE,CAACX,IAAc,GAC/C,CA/KsC4C,CADA,IAAIF,KAAYR,IAGlC,MACJ,IAAK,WACD,CACI,MAAM,MAAEtB,EAAK,MAAEC,GAAU,IAAIC,eAC7Bf,EAAOY,EAAKE,GACZwB,EAkKxB,SAAkB1B,EAAKkC,GAEnB,OADAC,EAAc7N,IAAI0L,EAAKkC,GAChBlC,CACX,CArKsCpE,CAASqE,EAAO,CAACA,GACnC,CACA,MACJ,IAAK,UAEGyB,OAAcxI,EAElB,MACJ,QACI,OAEZ,CACA,MAAOhO,GACHwW,EAAc,CAAExW,QAAO,CAACwU,GAAc,EAC1C,CACA0C,QAAQC,QAAQX,GACXY,OAAOpX,IACD,CAAEA,QAAO,CAACwU,GAAc,MAE9B6C,MAAMb,IACP,MAAOc,EAAWC,GAAiBC,EAAYhB,GAC/Cf,EAAGgC,YAAY/P,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAG2P,GAAY,CAAEpQ,OAAOqQ,GACvD,YAAT7T,IAEA+R,EAAGiC,oBAAoB,UAAW7B,GAClC8B,EAAclC,GACVlB,KAAaO,GAAiC,mBAAnBA,EAAIP,IAC/BO,EAAIP,KAEZ,IAEC6C,OAAOxV,IAER,MAAO0V,EAAWC,GAAiBC,EAAY,CAC3CxX,MAAO,IAAI4X,UAAU,+BACrB,CAACpD,GAAc,IAEnBiB,EAAGgC,YAAY/P,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAG2P,GAAY,CAAEpQ,OAAOqQ,EAAc,GAE1F,IACI9B,EAAGnT,OACHmT,EAAGnT,OAEX,CAIA,SAASqV,EAAcE,IAHvB,SAAuBA,GACnB,MAAqC,gBAA9BA,EAASxW,YAAYwG,IAChC,EAEQiQ,CAAcD,IACdA,EAASE,OACjB,CAIA,SAASC,EAAqBC,GAC1B,GAAIA,EACA,MAAM,IAAIpX,MAAM,6CAExB,CACA,SAASqX,EAAgBzC,GACrB,OAAO0C,EAAuB1C,EAAI,CAC9B/R,KAAM,YACP2T,MAAK,KACJM,EAAclC,EAAG,GAEzB,CACA,MAAM2C,EAAe,IAAIC,QACnBC,EAAkB,yBAA0B5C,YAC9C,IAAI6C,sBAAsB9C,IACtB,MAAM+C,GAAYJ,EAAa7X,IAAIkV,IAAO,GAAK,EAC/C2C,EAAahP,IAAIqM,EAAI+C,GACJ,IAAbA,GACAN,EAAgBzC,EACpB,IAcR,SAASL,EAAYK,EAAIW,EAAO,GAAIf,EAAS,WAAc,GACvD,IAAIoD,GAAkB,EACtB,MAAM1B,EAAQ,IAAI2B,MAAMrD,EAAQ,CAC5B,GAAA9U,CAAIoY,EAAS/B,GAET,GADAoB,EAAqBS,GACjB7B,IAAStC,EACT,MAAO,MAXvB,SAAyByC,GACjBuB,GACAA,EAAgBM,WAAW7B,EAEnC,CAQoB8B,CAAgB9B,GAChBmB,EAAgBzC,GAChBgD,GAAkB,CAAI,EAG9B,GAAa,SAAT7B,EAAiB,CACjB,GAAoB,IAAhBR,EAAK9S,OACL,MAAO,CAAE+T,KAAM,IAAMN,GAEzB,MAAM+B,EAAIX,EAAuB1C,EAAI,CACjC/R,KAAM,MACN0S,KAAMA,EAAKE,KAAKyC,GAAMA,EAAE3T,eACzBiS,KAAKd,GACR,OAAOuC,EAAEzB,KAAK2B,KAAKF,EACvB,CACA,OAAO1D,EAAYK,EAAI,IAAIW,EAAMQ,GACrC,EACA,GAAAxN,CAAIuP,EAAS/B,EAAMC,GACfmB,EAAqBS,GAGrB,MAAOzY,EAAOuX,GAAiBC,EAAYX,GAC3C,OAAOsB,EAAuB1C,EAAI,CAC9B/R,KAAM,MACN0S,KAAM,IAAIA,EAAMQ,GAAMN,KAAKyC,GAAMA,EAAE3T,aACnCpF,SACDuX,GAAeF,KAAKd,EAC3B,EACA,KAAAO,CAAM6B,EAASM,EAAUC,GACrBlB,EAAqBS,GACrB,MAAMU,EAAO/C,EAAKA,EAAK9S,OAAS,GAChC,GAAI6V,IAAS9E,EACT,OAAO8D,EAAuB1C,EAAI,CAC9B/R,KAAM,aACP2T,KAAKd,GAGZ,GAAa,SAAT4C,EACA,OAAO/D,EAAYK,EAAIW,EAAKM,MAAM,GAAI,IAE1C,MAAOL,EAAckB,GAAiB6B,EAAiBF,GACvD,OAAOf,EAAuB1C,EAAI,CAC9B/R,KAAM,QACN0S,KAAMA,EAAKE,KAAKyC,GAAMA,EAAE3T,aACxBiR,gBACDkB,GAAeF,KAAKd,EAC3B,EACA,SAAA8C,CAAUV,EAASO,GACflB,EAAqBS,GACrB,MAAOpC,EAAckB,GAAiB6B,EAAiBF,GACvD,OAAOf,EAAuB1C,EAAI,CAC9B/R,KAAM,YACN0S,KAAMA,EAAKE,KAAKyC,GAAMA,EAAE3T,aACxBiR,gBACDkB,GAAeF,KAAKd,EAC3B,IAGJ,OA7EJ,SAAuBQ,EAAOtB,GAC1B,MAAM+C,GAAYJ,EAAa7X,IAAIkV,IAAO,GAAK,EAC/C2C,EAAahP,IAAIqM,EAAI+C,GACjBF,GACAA,EAAgBgB,SAASvC,EAAOtB,EAAIsB,EAE5C,CAsEIwC,CAAcxC,EAAOtB,GACdsB,CACX,CAIA,SAASqC,EAAiB/C,GACtB,MAAMmD,EAAYnD,EAAaC,IAAIkB,GACnC,MAAO,CAACgC,EAAUlD,KAAKmD,GAAMA,EAAE,MALnBC,EAK+BF,EAAUlD,KAAKmD,GAAMA,EAAE,KAJ3DpX,MAAMsX,UAAUC,OAAO9C,MAAM,GAAI4C,KAD5C,IAAgBA,CAMhB,CACA,MAAMzC,EAAgB,IAAIoB,QAe1B,SAASb,EAAYxX,GACjB,IAAK,MAAO6H,EAAMgS,KAAYlF,EAC1B,GAAIkF,EAAQjF,UAAU5U,GAAQ,CAC1B,MAAO8Z,EAAiBvC,GAAiBsC,EAAQhF,UAAU7U,GAC3D,MAAO,CACH,CACI0D,KAAM,UACNmE,OACA7H,MAAO8Z,GAEXvC,EAER,CAEJ,MAAO,CACH,CACI7T,KAAM,MACN1D,SAEJiX,EAAc1W,IAAIP,IAAU,GAEpC,CACA,SAASuW,EAAcvW,GACnB,OAAQA,EAAM0D,MACV,IAAK,UACD,OAAOiR,EAAiBpU,IAAIP,EAAM6H,MAAMqN,YAAYlV,EAAMA,OAC9D,IAAK,MACD,OAAOA,EAAMA,MAEzB,CACA,SAASmY,EAAuB1C,EAAIsE,EAAK/C,GACrC,OAAO,IAAIE,SAASC,IAChB,MAAMjQ,EAeH,IAAI7E,MAAM,GACZ2X,KAAK,GACL1D,KAAI,IAAMtF,KAAKiJ,MAAMjJ,KAAKkJ,SAAWha,OAAOia,kBAAkB/U,SAAS,MACvE8G,KAAK,KAjBNuJ,EAAGG,iBAAiB,WAAW,SAAS1R,EAAE4R,GACjCA,EAAGvN,MAASuN,EAAGvN,KAAKrB,IAAM4O,EAAGvN,KAAKrB,KAAOA,IAG9CuO,EAAGiC,oBAAoB,UAAWxT,GAClCiT,EAAQrB,EAAGvN,MACf,IACIkN,EAAGnT,OACHmT,EAAGnT,QAEPmT,EAAGgC,YAAY/P,OAAOC,OAAO,CAAET,MAAM6S,GAAM/C,EAAU,GAE7D,IC/UIoD,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBtM,IAAjBuM,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAUK,KAAKF,EAAOD,QAASC,EAAQA,EAAOD,QAASH,GAGpEI,EAAOD,OACf,CAGAH,EAAoBO,EAAIF,EAGxBL,EAAoBQ,EAAI,KAGvB,IAAIC,EAAsBT,EAAoBU,OAAE/M,EAAW,CAAC,IAAI,MAAM,IAAOqM,EAAoB,QAEjG,OADAS,EAAsBT,EAAoBU,EAAED,EAClB,EVjCvBzb,EAAkC,mBAAX+U,OAAwBA,OAAO,kBAAoB,qBAC1E9U,EAAmC,mBAAX8U,OAAwBA,OAAO,mBAAqB,sBAC5E7U,EAAiC,mBAAX6U,OAAwBA,OAAO,iBAAmB,oBACxE5U,EAAgBwb,IAChBA,GAASA,EAAMC,EAAI,IACrBD,EAAMC,EAAI,EACVD,EAAME,SAASC,GAAQA,EAAGrC,MAC1BkC,EAAME,SAASC,GAAQA,EAAGrC,IAAMqC,EAAGrC,IAAMqC,MAC1C,EAyBDd,EAAoBe,EAAI,CAACX,EAAQhT,EAAM4T,KACtC,IAAIL,EACJK,KAAcL,EAAQ,IAAIC,GAAK,GAC/B,IAEIK,EACAC,EACAC,EAJAC,EAAY,IAAIzI,IAChBwH,EAAUC,EAAOD,QAIjBkB,EAAU,IAAIxE,SAAQ,CAACC,EAASwE,KACnCH,EAASG,EACTJ,EAAepE,CAAO,IAEvBuE,EAAQpc,GAAkBkb,EAC1BkB,EAAQrc,GAAkB8b,IAAQH,GAASG,EAAGH,GAAQS,EAAUP,QAAQC,GAAKO,EAAe,OAAEb,SAC9FJ,EAAOD,QAAUkB,EACjBjU,GAAMmU,IAEL,IAAIT,EADJG,EAvCa,CAACM,GAAUA,EAAKtF,KAAKuF,IACnC,GAAW,OAARA,GAA+B,iBAARA,EAAkB,CAC3C,GAAGA,EAAIxc,GAAgB,OAAOwc,EAC9B,GAAGA,EAAIxE,KAAM,CACZ,IAAI2D,EAAQ,GACZA,EAAMC,EAAI,EACVY,EAAIxE,MAAMyB,IACThE,EAAIxV,GAAkBwZ,EACtBtZ,EAAawb,EAAM,IAChBnO,IACHiI,EAAIvV,GAAgBsN,EACpBrN,EAAawb,EAAM,IAEpB,IAAIlG,EAAM,CAAC,EAEX,OADAA,EAAIzV,GAAkB8b,GAAQA,EAAGH,GAC1BlG,CACR,CACD,CACA,IAAIgH,EAAM,CAAC,EAGX,OAFAA,EAAIzc,GAAiBwb,MACrBiB,EAAIxc,GAAkBuc,EACfC,CAAG,IAkBKC,CAASH,GAEvB,IAAII,EAAY,IAAOV,EAAYhF,KAAK2E,IACvC,GAAGA,EAAE1b,GAAe,MAAM0b,EAAE1b,GAC5B,OAAO0b,EAAE3b,EAAe,IAErBoc,EAAU,IAAIxE,SAASC,KAC1BgE,EAAK,IAAOhE,EAAQ6E,IACjBlD,EAAI,EACP,IAAImD,EAAWC,GAAOA,IAAMlB,IAAUS,EAAUlS,IAAI2S,KAAOT,EAAUU,IAAID,GAAIA,IAAMA,EAAEjB,IAAME,EAAGrC,IAAKoD,EAAEnX,KAAKoW,KAC1GG,EAAYhF,KAAKuF,GAASA,EAAIxc,GAAe4c,IAAU,IAExD,OAAOd,EAAGrC,EAAI4C,EAAUM,GAAW,IAChCI,IAAUA,EAAMZ,EAAOE,EAAQnc,GAAgB6c,GAAOb,EAAaf,GAAWhb,EAAawb,MAC/FA,GAASA,EAAMC,EAAI,IAAMD,EAAMC,EAAI,EAAE,EC/DlCxb,EAAW,GACf4a,EAAoBU,EAAI,CAACsB,EAAQC,EAAUnB,EAAIoB,KAC9C,IAAGD,EAAH,CAMA,IAAIE,EAAeC,IACnB,IAASpZ,EAAI,EAAGA,EAAI5D,EAAS6D,OAAQD,IAAK,CAGzC,IAFA,IAAKiZ,EAAUnB,EAAIoB,GAAY9c,EAAS4D,GACpCqZ,GAAY,EACPlZ,EAAI,EAAGA,EAAI8Y,EAAShZ,OAAQE,MACpB,EAAX+Y,GAAsBC,GAAgBD,IAAa7U,OAAOuB,KAAKoR,EAAoBU,GAAG4B,OAAO5c,GAASsa,EAAoBU,EAAEhb,GAAKuc,EAAS9Y,MAC9I8Y,EAASM,OAAOpZ,IAAK,IAErBkZ,GAAY,EACTH,EAAWC,IAAcA,EAAeD,IAG7C,GAAGG,EAAW,CACbjd,EAASmd,OAAOvZ,IAAK,GACrB,IAAIyV,EAAIqC,SACEnN,IAAN8K,IAAiBuD,EAASvD,EAC/B,CACD,CACA,OAAOuD,CAnBP,CAJCE,EAAWA,GAAY,EACvB,IAAI,IAAIlZ,EAAI5D,EAAS6D,OAAQD,EAAI,GAAK5D,EAAS4D,EAAI,GAAG,GAAKkZ,EAAUlZ,IAAK5D,EAAS4D,GAAK5D,EAAS4D,EAAI,GACrG5D,EAAS4D,GAAK,CAACiZ,EAAUnB,EAAIoB,EAqBjB,EUzBdlC,EAAoBY,EAAI,CAACT,EAASqC,KACjC,IAAI,IAAI9c,KAAO8c,EACXxC,EAAoByC,EAAED,EAAY9c,KAASsa,EAAoByC,EAAEtC,EAASza,IAC5E2H,OAAOqV,eAAevC,EAASza,EAAK,CAAEid,YAAY,EAAMzc,IAAKsc,EAAW9c,IAE1E,ECNDsa,EAAoB4C,EAAI,CAAC,EAGzB5C,EAAoBxN,EAAKqQ,GACjBhG,QAAQiG,IAAIzV,OAAOuB,KAAKoR,EAAoB4C,GAAGtG,QAAO,CAACyG,EAAUrd,KACvEsa,EAAoB4C,EAAEld,GAAKmd,EAASE,GAC7BA,IACL,KCNJ/C,EAAoBgD,EAAKH,GAEZA,EAAU,aCHvB7C,EAAoBiD,EAAI,WACvB,GAA0B,iBAAf5H,WAAyB,OAAOA,WAC3C,IACC,OAAOpU,MAAQ,IAAIic,SAAS,cAAb,EAChB,CAAE,MAAO1Q,GACR,GAAsB,iBAAX2Q,OAAqB,OAAOA,MACxC,CACA,CAPuB,GCAxBnD,EAAoByC,EAAI,CAAChI,EAAK8B,IAAUlP,OAAOiS,UAAUnT,eAAemU,KAAK7F,EAAK8B,SCAlF,IAAI6G,EACApD,EAAoBiD,EAAEI,gBAAeD,EAAYpD,EAAoBiD,EAAEK,SAAW,IACtF,IAAIC,EAAWvD,EAAoBiD,EAAEM,SACrC,IAAKH,GAAaG,IACbA,EAASC,eAAkE,WAAjDD,EAASC,cAAcC,QAAQC,gBAC5DN,EAAYG,EAASC,cAAcG,MAC/BP,GAAW,CACf,IAAIQ,EAAUL,EAASM,qBAAqB,UAC5C,GAAGD,EAAQ3a,OAEV,IADA,IAAID,EAAI4a,EAAQ3a,OAAS,EAClBD,GAAK,KAAOoa,IAAc,aAAavH,KAAKuH,KAAaA,EAAYQ,EAAQ5a,KAAK2a,GAE3F,CAID,IAAKP,EAAW,MAAM,IAAI5c,MAAM,yDAChC4c,EAAYA,EAAUhY,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KACpF4U,EAAoBtB,EAAI0E,YClBxBpD,EAAoB8D,EAAIC,KAAKT,SAAW,GAIxC,IAAIU,EAAkB,CACrB,IAAK,GAgBNhE,EAAoB4C,EAAE5Z,EAAI,CAAC6Z,EAASE,KAE/BiB,EAAgBnB,IAElBQ,cAAcrD,EAAoBtB,EAAIsB,EAAoBgD,EAAEH,GAE9D,EAGD,IAAIoB,EAAqBF,KAA+B,yBAAIA,KAA+B,0BAAK,GAC5FG,EAA6BD,EAAmBvZ,KAAKiU,KAAKsF,GAC9DA,EAAmBvZ,KAvBCwD,IACnB,IAAK+T,EAAUkC,EAAaC,GAAWlW,EACvC,IAAI,IAAI+R,KAAYkE,EAChBnE,EAAoByC,EAAE0B,EAAalE,KACrCD,EAAoBO,EAAEN,GAAYkE,EAAYlE,IAIhD,IADGmE,GAASA,EAAQpE,GACdiC,EAAShZ,QACd+a,EAAgB/B,EAASoC,OAAS,EACnCH,EAA2BhW,EAAK,MfnB7B7I,EAAO2a,EAAoBQ,EAC/BR,EAAoBQ,EAAI,IAChB3D,QAAQiG,IAAI,CAClB9C,EAAoBxN,EAAE,KACtBwN,EAAoBxN,EAAE,OACpBwK,KAAK3X,GgBJiB2a,EAAoBQ","sources":["webpack://aleo-website/webpack/runtime/async module","webpack://aleo-website/webpack/runtime/chunk loaded","webpack://aleo-website/webpack/runtime/startup chunk dependencies","webpack://aleo-website/../../src/utils.ts","webpack://aleo-website/../../src/network-client.ts","webpack://aleo-website/../../src/function-key-provider.ts","webpack://aleo-website/../../src/program-manager.ts","webpack://aleo-website/../../src/browser.ts","webpack://aleo-website/../../src/worker.ts","webpack://aleo-website/../node_modules/comlink/dist/esm/comlink.mjs","webpack://aleo-website/webpack/bootstrap","webpack://aleo-website/webpack/runtime/define property getters","webpack://aleo-website/webpack/runtime/ensure chunk","webpack://aleo-website/webpack/runtime/get javascript chunk filename","webpack://aleo-website/webpack/runtime/global","webpack://aleo-website/webpack/runtime/hasOwnProperty shorthand","webpack://aleo-website/webpack/runtime/publicPath","webpack://aleo-website/webpack/runtime/importScripts chunk loading","webpack://aleo-website/webpack/startup"],"sourcesContent":["var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([\n\t\t__webpack_require__.e(357),\n\t\t__webpack_require__.e(879)\n\t]).then(next);\n};","export function parseJSON(json: string): any {\n    function revive(key: string, value: any, context: any) {\n        if (Number.isInteger(value)) {\n            return BigInt(context.source);\n\n        } else {\n            return value;\n        }\n    }\n\n    return JSON.parse(json, revive as any);\n}\n\n\nexport async function get(url: URL | string, options?: RequestInit) {\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not get URL \" + url);\n    }\n\n    return response;\n}\n\n\nexport async function post(url: URL | string, options: RequestInit) {\n    options.method = \"POST\";\n\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not post URL \" + url);\n    }\n\n    return response;\n}\n","import { get, post, parseJSON } from \"./utils\";\nimport {\n  Account,\n  Block,\n  RecordCiphertext,\n  Program,\n  RecordPlaintext,\n  PrivateKey,\n  Transaction,\n  TransactionModel,\n  logAndThrow\n} from \"./browser\";\n\ntype ProgramImports = { [key: string]: string | Program };\n\ninterface AleoNetworkClientOptions {\n  headers?: { [key: string]: string };\n}\n\n/**\n * Client library that encapsulates REST calls to publicly exposed endpoints of Aleo nodes. The methods provided in this\n * allow users to query public information from the Aleo blockchain and submit transactions to the network.\n *\n * @param {string} host\n * @example\n * // Connection to a local node\n * const localNetworkClient = new AleoNetworkClient(\"http://localhost:3030\");\n *\n * // Connection to a public beacon node\n * const publicnetworkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n */\nclass AleoNetworkClient {\n  host: string;\n  headers: { [key: string]: string };\n  account: Account | undefined;\n\n  constructor(host: string, options?: AleoNetworkClientOptions) {\n    this.host = host + \"/%%NETWORK%%\";\n\n    if (options && options.headers) {\n      this.headers = options.headers;\n\n    } else {\n      this.headers = {\n        // This is replaced by the actual version by a Rollup plugin\n        \"X-Aleo-SDK-Version\": \"%%VERSION%%\",\n      };\n    }\n  }\n\n  /**\n   * Set an account to use in networkClient calls\n   *\n   * @param {Account} account\n   * @example\n   * const account = new Account();\n   * networkClient.setAccount(account);\n   */\n  setAccount(account: Account) {\n    this.account = account;\n  }\n\n  /**\n   * Return the Aleo account used in the networkClient\n   *\n   * @example\n   * const account = networkClient.getAccount();\n   */\n  getAccount(): Account | undefined {\n    return this.account;\n  }\n\n  /**\n   * Set a new host for the networkClient\n   *\n   * @param {string} host The address of a node hosting the Aleo API\n   * @param host\n   */\n  setHost(host: string) {\n    this.host = host + \"/%%NETWORK%%\";\n  }\n\n  async fetchData<Type>(\n      url = \"/\",\n  ): Promise<Type> {\n    try {\n      const response = await get(this.host + url, {\n        headers: this.headers\n      });\n\n      const text = await response.text();\n      return parseJSON(text);\n\n    } catch (error) {\n      throw new Error(\"Error fetching data.\");\n    }\n  }\n\n  /**\n   * Attempts to find unspent records in the Aleo blockchain for a specified private key\n   * @param {number} startHeight - The height at which to start searching for unspent records\n   * @param {number} endHeight - The height at which to stop searching for unspent records\n   * @param {string | PrivateKey} privateKey - The private key to use to find unspent records\n   * @param {number[]} amounts - The amounts (in microcredits) to search for (eg. [100, 200, 3000])\n   * @param {number} maxMicrocredits - The maximum number of microcredits to search for\n   * @param {string[]} nonces - The nonces of already found records to exclude from the search\n   *\n   * @example\n   * // Find all unspent records\n   * const privateKey = \"[PRIVATE_KEY]\";\n   * const records = networkClient.findUnspentRecords(0, undefined, privateKey);\n   *\n   * // Find specific amounts\n   * const startHeight = 500000;\n   * const amounts = [600000, 1000000];\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, amounts);\n   *\n   * // Find specific amounts with a maximum number of cumulative microcredits\n   * const maxMicrocredits = 100000;\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, undefined, maxMicrocredits);\n   */\n  async findUnspentRecords(\n      startHeight: number,\n      endHeight: number | undefined,\n      privateKey: string | PrivateKey | undefined,\n      amounts: number[] | undefined,\n      maxMicrocredits?: number | undefined,\n      nonces?: string[] | undefined,\n  ): Promise<Array<RecordPlaintext>> {\n    nonces = nonces || [];\n    // Ensure start height is not negative\n    if (startHeight < 0) {\n      throw new Error(\"Start height must be greater than or equal to 0\");\n    }\n\n    // Initialize search parameters\n    const records = new Array<RecordPlaintext>();\n    let start;\n    let end;\n    let resolvedPrivateKey: PrivateKey;\n    let failures = 0;\n    let totalRecordValue = BigInt(0);\n    let latestHeight: number;\n\n    // Ensure a private key is present to find owned records\n    if (typeof privateKey === \"undefined\") {\n      if (typeof this.account === \"undefined\") {\n        throw new Error(\"Private key must be specified in an argument to findOwnedRecords or set in the AleoNetworkClient\");\n      } else {\n        resolvedPrivateKey = this.account._privateKey;\n      }\n    } else {\n      try {\n        resolvedPrivateKey = privateKey instanceof PrivateKey ? privateKey : PrivateKey.from_string(privateKey);\n      } catch (error) {\n        throw new Error(\"Error parsing private key provided.\");\n      }\n    }\n    const viewKey = resolvedPrivateKey.to_view_key();\n\n    // Get the latest height to ensure the range being searched is valid\n    try {\n      const blockHeight = await this.getLatestHeight();\n      if (typeof blockHeight === \"number\") {\n        latestHeight = blockHeight;\n      } else {\n        throw new Error(\"Error fetching latest block height.\");\n      }\n    } catch (error) {\n      throw new Error(\"Error fetching latest block height.\");\n    }\n\n    // If no end height is specified or is greater than the latest height, set the end height to the latest height\n    if (typeof endHeight === \"number\" && endHeight <= latestHeight) {\n      end = endHeight\n    } else {\n      end = latestHeight;\n    }\n\n    // If the starting is greater than the ending height, return an error\n    if (startHeight > end) {\n      throw new Error(\"Start height must be less than or equal to end height.\");\n    }\n\n    // Iterate through blocks in reverse order in chunks of 50\n    while (end > startHeight) {\n      start = end - 50;\n      if (start < startHeight) {\n        start = startHeight;\n      }\n      try {\n        // Get 50 blocks (or the difference between the start and end if less than 50)\n        const blocks = await this.getBlockRange(start, end);\n        end = start;\n        // Iterate through blocks to find unspent records\n        for (let i = 0; i < blocks.length; i++) {\n          const block = blocks[i];\n          const transactions = block.transactions;\n          if (!(typeof transactions === \"undefined\")) {\n            for (let j = 0; j < transactions.length; j++) {\n              const confirmedTransaction = transactions[j];\n              // Search for unspent records in execute transactions of credits.aleo\n              if (confirmedTransaction.type == \"execute\") {\n                const transaction = confirmedTransaction.transaction;\n                if (transaction.execution && !(typeof transaction.execution.transitions == \"undefined\")) {\n                  for (let k = 0; k < transaction.execution.transitions.length; k++) {\n                    const transition = transaction.execution.transitions[k];\n                    // Only search for unspent records in credits.aleo (for now)\n                    if (transition.program !== \"credits.aleo\") {\n                      continue;\n                    }\n                    if (!(typeof transition.outputs == \"undefined\")) {\n                      for (let l = 0; l < transition.outputs.length; l++) {\n                        const output = transition.outputs[l];\n                        if (output.type === \"record\") {\n                          try {\n                            // Create a wasm record ciphertext object from the found output\n                            const record = RecordCiphertext.fromString(output.value);\n                            // Determine if the record is owned by the specified view key\n                            if (record.isOwner(viewKey)) {\n                              // Decrypt the record and get the serial number\n                              const recordPlaintext = record.decrypt(viewKey);\n\n                              // If the record has already been found, skip it\n                              const nonce = recordPlaintext.nonce();\n                              if (nonces.includes(nonce)) {\n                                continue;\n                              }\n\n                              // Otherwise record the nonce that has been found\n                              const serialNumber = recordPlaintext.serialNumberString(resolvedPrivateKey, \"credits.aleo\", \"credits\");\n                              // Attempt to see if the serial number is spent\n                              try {\n                                await this.getTransitionId(serialNumber);\n                              } catch (error) {\n                                // If it's not found, add it to the list of unspent records\n                                if (!amounts) {\n                                  records.push(recordPlaintext);\n                                  // If the user specified a maximum number of microcredits, check if the search has found enough\n                                  if (typeof maxMicrocredits === \"number\") {\n                                    totalRecordValue += recordPlaintext.microcredits();\n                                    // Exit if the search has found the amount specified\n                                    if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                      return records;\n                                    }\n                                  }\n                                }\n                                // If the user specified a list of amounts, check if the search has found them\n                                if (!(typeof amounts === \"undefined\") && amounts.length > 0) {\n                                  let amounts_found = 0;\n                                  if (recordPlaintext.microcredits() > amounts[amounts_found]) {\n                                      amounts_found += 1;\n                                      records.push(recordPlaintext);\n                                      // If the user specified a maximum number of microcredits, check if the search has found enough\n                                      if (typeof maxMicrocredits === \"number\") {\n                                        totalRecordValue += recordPlaintext.microcredits();\n                                        // Exit if the search has found the amount specified\n                                        if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                          return records;\n                                        }\n                                      }\n                                      if (records.length >= amounts.length) {\n                                        return records;\n                                      }\n                                  }\n                                }\n                              }\n                            }\n                          } catch (error) {\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // If there is an error fetching blocks, log it and keep searching\n        console.warn(\"Error fetching blocks in range: \" + start.toString() + \"-\" + end.toString());\n        console.warn(\"Error: \", error);\n        failures += 1;\n        if (failures > 10) {\n          console.warn(\"10 failures fetching records reached. Returning records fetched so far\");\n          return records;\n        }\n      }\n    }\n    return records;\n  }\n\n  /**\n   * Returns the contents of the block at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const block = networkClient.getBlock(1234);\n   */\n  async getBlock(height: number): Promise<Block> {\n    try {\n      const block = await this.fetchData<Block>(\"/block/\" + height);\n      return block;\n    } catch (error) {\n      throw new Error(\"Error fetching block.\");\n    }\n  }\n\n  /**\n   * Returns a range of blocks between the specified block heights\n   *\n   * @param {number} start\n   * @param {number} end\n   * @example\n   * const blockRange = networkClient.getBlockRange(2050, 2100);\n   */\n  async getBlockRange(start: number, end: number): Promise<Array<Block>> {\n    try {\n      return await this.fetchData<Array<Block>>(\"/blocks?start=\" + start + \"&end=\" + end);\n    } catch (error) {\n      const errorMessage = `Error fetching blocks between ${start} and ${end}.`;\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Returns the deployment transaction id associated with the specified program\n   *\n   * @param {Program | string} program\n   * @returns {TransactionModel}\n   */\n  async getDeploymentTransactionIDForProgram(program: Program | string): Promise<string> {\n    if (program instanceof Program) {\n      program = program.toString();\n    }\n    try {\n      const id = await this.fetchData<string>(\"/find/transactionID/deployment/\" + program);\n      return id.replace(\"\\\"\", \"\")\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the deployment transaction associated with a specified program\n   *\n   * @param {Program | string} program\n   * @returns {TransactionModel}\n   */\n  async getDeploymentTransactionForProgram(program: Program | string): Promise<TransactionModel> {\n    try {\n      const transaction_id = <string>await this.getDeploymentTransactionIDForProgram(program);\n      return <TransactionModel>await this.getTransaction(transaction_id);\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the contents of the latest block\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestBlock();\n   */\n  async getLatestBlock(): Promise<Block> {\n    try {\n      return await this.fetchData<Block>(\"/latest/block\") as Block;\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest committee\n   *\n   * @returns {Promise<object>} A javascript object containing the latest committee\n   */\n  async getLatestCommittee(): Promise<object> {\n    try {\n      return await this.fetchData<object>(\"/committee/latest\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest block height\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestHeight();\n   */\n  async getLatestHeight(): Promise<number> {\n    try {\n      return Number(await this.fetchData<bigint>(\"/latest/height\"));\n    } catch (error) {\n      throw new Error(\"Error fetching latest height.\");\n    }\n  }\n\n  /**\n   * Returns the source code of a program given a program ID\n   *\n   * @param {string} programId The program ID of a program deployed to the Aleo Network\n   * @return {Promise<string>} Source code of the program\n   *\n   * @example\n   * const program = networkClient.getProgram(\"hello_hello.aleo\");\n   * const expectedSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * assert.equal(program, expectedSource);\n   */\n  async getProgram(programId: string): Promise<string> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId)\n    } catch (error) {\n      throw new Error(\"Error fetching program\");\n    }\n  }\n\n  /**\n   * Returns a program object from a program ID or program source code\n   *\n   * @param {string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @return {Promise<Program>} Source code of the program\n   *\n   * @example\n   * const programID = \"hello_hello.aleo\";\n   * const programSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   *\n   * // Get program object from program ID or program source code\n   * const programObjectFromID = await networkClient.getProgramObject(programID);\n   * const programObjectFromSource = await networkClient.getProgramObject(programSource);\n   *\n   * // Both program objects should be equal\n   * assert.equal(programObjectFromID.to_string(), programObjectFromSource.to_string());\n   */\n  async getProgramObject(inputProgram: string): Promise<Program> {\n    try {\n      return Program.fromString(inputProgram);\n    } catch (error) {\n      try {\n        return Program.fromString(<string>(await this.getProgram(inputProgram)));\n      } catch (error) {\n        throw new Error(`${inputProgram} is neither a program name or a valid program`);\n      }\n    }\n  }\n\n  /**\n   *  Returns an object containing the source code of a program and the source code of all programs it imports\n   *\n   * @param {Program | string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @returns {Promise<ProgramImports>} Object of the form { \"program_id\": \"program_source\", .. } containing program id & source code for all program imports\n   *\n   * @example\n   * const double_test_source = \"import multiply_test.aleo;\\n\\nprogram double_test.aleo;\\n\\nfunction double_it:\\n    input r0 as u32.private;\\n    call multiply_test.aleo/multiply 2u32 r0 into r1;\\n    output r1 as u32.private;\\n\"\n   * const double_test = Program.fromString(double_test_source);\n   * const expectedImports = {\n   *     \"multiply_test.aleo\": \"program multiply_test.aleo;\\n\\nfunction multiply:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    mul r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * }\n   *\n   * // Imports can be fetched using the program ID, source code, or program object\n   * let programImports = await networkClient.getProgramImports(\"double_test.aleo\");\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program source code\n   * programImports = await networkClient.getProgramImports(double_test_source);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program object\n   * programImports = await networkClient.getProgramImports(double_test);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   */\n  async getProgramImports(inputProgram: Program | string): Promise<ProgramImports> {\n    try {\n      const imports: ProgramImports = {};\n\n      // Get the program object or fail if the program is not valid or does not exist\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n\n      // Get the list of programs that the program imports\n      const importList = program.getImports();\n\n      // Recursively get any imports that the imported programs have in a depth first search order\n      for (let i = 0; i < importList.length; i++) {\n        const import_id = importList[i];\n        if (!imports.hasOwnProperty(import_id)) {\n          const programSource = <string>await this.getProgram(import_id);\n          const nestedImports = <ProgramImports>await this.getProgramImports(import_id);\n          for (const key in nestedImports) {\n            if (!imports.hasOwnProperty(key)) {\n              imports[key] = nestedImports[key];\n            }\n          }\n          imports[import_id] = programSource;\n        }\n      }\n      return imports;\n    } catch (error: any) {\n      logAndThrow(\"Error fetching program imports: \" + error.message);\n    }\n  }\n\n  /**\n   * Get a list of the program names that a program imports\n   *\n   * @param {Program | string} inputProgram - The program id or program source code to get the imports of\n   * @returns {string[]} - The list of program names that the program imports\n   *\n   * @example\n   * const programImportsNames = networkClient.getProgramImports(\"double_test.aleo\");\n   * const expectedImportsNames = [\"multiply_test.aleo\"];\n   * assert.deepStrictEqual(programImportsNames, expectedImportsNames);\n   */\n  async getProgramImportNames(inputProgram: Program | string): Promise<string[]> {\n    try {\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n      return program.getImports();\n    } catch (error: any) {\n      throw new Error(\"Error fetching program imports with error: \" + error.message);\n    }\n  }\n\n  /**\n   * Returns the names of the mappings of a program\n   *\n   * @param {string} programId - The program ID to get the mappings of (e.g. \"credits.aleo\")\n   * @example\n   * const mappings = networkClient.getProgramMappingNames(\"credits.aleo\");\n   * const expectedMappings = [\"account\"];\n   * assert.deepStrictEqual(mappings, expectedMappings);\n   */\n  async getProgramMappingNames(programId: string): Promise<Array<string>> {\n    try {\n      return await this.fetchData<Array<string>>(\"/program/\" + programId + \"/mappings\")\n    } catch (error) {\n      throw new Error(\"Error fetching program mappings - ensure the program exists on chain before trying again\");\n    }\n  }\n\n  /**\n   * Returns the value of a program's mapping for a specific key\n   *\n   * @param {string} programId - The program ID to get the mapping value of (e.g. \"credits.aleo\")\n   * @param {string} mappingName - The name of the mapping to get the value of (e.g. \"account\")\n   * @param {string} key - The key of the mapping to get the value of (e.g. \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\")\n   * @return {Promise<string>} String representation of the value of the mapping\n   *\n   * @example\n   * // Get public balance of an account\n   * const mappingValue = networkClient.getMappingValue(\"credits.aleo\", \"account\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\");\n   * const expectedValue = \"0u64\";\n   * assert.equal(mappingValue, expectedValue);\n   */\n  async getProgramMappingValue(programId: string, mappingName: string, key: string): Promise<string> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId + \"/mapping/\" + mappingName + \"/\" + key)\n    } catch (error) {\n      throw new Error(\"Error fetching mapping value - ensure the mapping exists and the key is correct\");\n    }\n  }\n\n  /**\n   * Returns the latest state/merkle root of the Aleo blockchain\n   *\n   * @example\n   * const stateRoot = networkClient.getStateRoot();\n   */\n  async getStateRoot(): Promise<string> {\n    try {\n      return await this.fetchData<string>(\"/latest/stateRoot\");\n    } catch (error) {\n      throw new Error(\"Error fetching Aleo state root\");\n    }\n  }\n\n  /**\n   * Returns a transaction by its unique identifier\n   *\n   * @param {string} id\n   * @example\n   * const transaction = networkClient.getTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n   */\n  async getTransaction(id: string): Promise<TransactionModel> {\n    try {\n    return await this.fetchData<TransactionModel>(\"/transaction/\" + id);\n    } catch (error) {\n      throw new Error(\"Error fetching transaction.\");\n    }\n  }\n\n  /**\n   * Returns the transactions present at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const transactions = networkClient.getTransactions(654);\n   */\n  async getTransactions(height: number): Promise<Array<TransactionModel>> {\n    try {\n    return await this.fetchData<Array<TransactionModel>>(\"/block/\" + height.toString() + \"/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions.\");\n    }\n  }\n\n  /**\n   * Returns the transactions in the memory pool.\n   *\n   * @example\n   * const transactions = networkClient.getTransactionsInMempool();\n   */\n  async getTransactionsInMempool(): Promise<Array<TransactionModel>> {\n    try {\n      return await this.fetchData<Array<TransactionModel>>(\"/memoryPool/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions from mempool.\");\n    }\n  }\n\n  /**\n   * Returns the transition ID of the transition corresponding to the ID of the input or output.\n   * @param {string} inputOrOutputID - ID of the input or output.\n   *\n   * @example\n   * const transitionId = networkClient.getTransitionId(\"2429232855236830926144356377868449890830704336664550203176918782554219952323field\");\n   */\n  async getTransitionId(inputOrOutputID: string): Promise<string> {\n    try {\n      return await this.fetchData<string>(\"/find/transitionID/\" + inputOrOutputID);\n    } catch (error) {\n      throw new Error(\"Error fetching transition ID.\");\n    }\n  }\n\n  /**\n   * Submit an execute or deployment transaction to the Aleo network\n   *\n   * @param {Transaction | string} transaction  - The transaction to submit to the network\n   * @returns {string} - The transaction id of the submitted transaction or the resulting error\n   */\n  async submitTransaction(transaction: Transaction | string): Promise<string> {\n    const transaction_string = transaction instanceof Transaction ? transaction.toString() : transaction;\n    try {\n      const response = await post(this.host + \"/transaction/broadcast\", {\n        body: transaction_string,\n        headers: Object.assign({}, this.headers, {\n          \"Content-Type\": \"application/json\",\n        }),\n      });\n\n      try {\n        const text = await response.text();\n        return parseJSON(text);\n\n      } catch (error: any) {\n        throw new Error(`Error posting transaction. Aleo network response: ${error.message}`);\n      }\n    } catch (error: any) {\n      throw new Error(`Error posting transaction: No response received: ${error.message}`);\n    }\n  }\n}\n\nexport { AleoNetworkClient, AleoNetworkClientOptions, ProgramImports }\n","import {\n    ProvingKey,\n    VerifyingKey,\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    Key,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PUBLIC_TRANSFER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    PUBLIC_TRANSFER_AS_SIGNER\n} from \"./browser\";\nimport { get } from \"./utils\";\n\ntype FunctionKeyPair = [ProvingKey, VerifyingKey];\ntype CachedKeyPair = [Uint8Array, Uint8Array];\ntype AleoKeyProviderInitParams = {\n    proverUri?: string;\n    verifierUri?: string;\n    cacheKey?: string;\n};\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface KeySearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * AleoKeyProviderParams search parameter for the AleoKeyProvider. It allows for the specification of a proverUri and\n * verifierUri to fetch keys via HTTP from a remote resource as well as a unique cacheKey to store the keys in memory.\n */\nclass AleoKeyProviderParams implements KeySearchParams {\n    name: string | undefined;\n    proverUri: string | undefined;\n    verifierUri: string | undefined;\n    cacheKey: string | undefined;\n\n    /**\n     * Create a new AleoKeyProviderParams object which implements the KeySearchParams interface. Users can optionally\n     * specify a url for the proverUri & verifierUri to fetch keys via HTTP from a remote resource as well as a unique\n     * cacheKey to store the keys in memory for future use. If no proverUri or verifierUri is specified, a cachekey must\n     * be provided.\n     *\n     * @param { AleoKeyProviderInitParams } params - Optional search parameters\n     */\n    constructor(params: {proverUri?: string, verifierUri?: string, cacheKey?: string, name?: string}) {\n        this.proverUri = params.proverUri;\n        this.verifierUri = params.verifierUri;\n        this.cacheKey = params.cacheKey;\n        this.name = params.name;\n    }\n}\n\n/**\n * KeyProvider interface. Enables the retrieval of public proving and verifying keys for Aleo Programs.\n */\ninterface FunctionKeyProvider {\n    /**\n     * Get bond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the bond_public function\n     */\n    bondPublicKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get bond_validator function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the bond_validator function\n     */\n    bondValidatorKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void;\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the unbond_public function\n     */\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a search object which implements the KeySearchParams interface\n     * class IndexDbSearch implements KeySearchParams {\n     *     db: string\n     *     keyId: string\n     *     constructor(params: {db: string, keyId: string}) {\n     *         this.db = params.db;\n     *         this.keyId = params.keyId;\n     *     }\n     * }\n     *\n     * // Create a new object which implements the KeyProvider interface\n     * class IndexDbKeyProvider implements FunctionKeyProvider {\n     *     async functionKeys(params: KeySearchParams): Promise<FunctionKeyPair> {\n     *         return new Promise((resolve, reject) => {\n     *             const request = indexedDB.open(params.db, 1);\n     *\n     *             request.onupgradeneeded = function(e) {\n     *                 const db = e.target.result;\n     *                 if (!db.objectStoreNames.contains('keys')) {\n     *                     db.createObjectStore('keys', { keyPath: 'id' });\n     *                 }\n     *             };\n     *\n     *             request.onsuccess = function(e) {\n     *                 const db = e.target.result;\n     *                 const transaction = db.transaction([\"keys\"], \"readonly\");\n     *                 const store = transaction.objectStore(\"keys\");\n     *                 const request = store.get(params.keyId);\n     *                 request.onsuccess = function(e) {\n     *                     if (request.result) {\n     *                         resolve(request.result as FunctionKeyPair);\n     *                     } else {\n     *                         reject(new Error(\"Key not found\"));\n     *                     }\n     *                 };\n     *                 request.onerror = function(e) { reject(new Error(\"Error fetching key\")); };\n     *             };\n     *\n     *             request.onerror = function(e) { reject(new Error(\"Error opening database\")); };\n     *         });\n     *     }\n     *\n     *     // implement the other methods...\n     * }\n     *\n     *\n     * const keyProvider = new AleoKeyProvider();\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const searchParams = new IndexDbSearch({db: \"keys\", keyId: \"credits.aleo:transferPrivate\"});\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(searchParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair>;\n\n    /**\n     * Get fee_private function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get fee_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get join function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get split function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair>;\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    unBondPublicKeys(): Promise<FunctionKeyPair>;\n\n}\n\n\n/**\n * AleoKeyProvider class. Implements the KeyProvider interface. Enables the retrieval of Aleo program proving and\n * verifying keys for the credits.aleo program over http from official Aleo sources and storing and retrieving function\n * keys from a local memory cache.\n */\nclass AleoKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n    cacheOption: boolean;\n    keyUris: string;\n\n    async fetchBytes(\n        url = \"/\",\n    ): Promise<Uint8Array> {\n        try {\n        const response = await get(url);\n        const data = await response.arrayBuffer();\n        return new Uint8Array(data);\n        } catch (error: any) {\n            throw new Error(\"Error fetching data.\" + error.message);\n        }\n    }\n\n    constructor() {\n        this.keyUris = KEY_STORE;\n        this.cache = new Map<string, CachedKeyPair>();\n        this.cacheOption = false;\n    }\n\n    /**\n     * Use local memory to store keys\n     *\n     * @param {boolean} useCache whether to store keys in local memory\n     */\n    useCache(useCache: boolean) {\n        this.cacheOption = useCache;\n    }\n\n    /**\n     * Clear the key cache\n     */\n    clearCache() {\n        this.cache.clear();\n    }\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair) {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    }\n\n    /**\n     * Determine if a keyId exists in the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair\n     * @returns {boolean} true if the keyId exists in the cache, false otherwise\n     */\n    containsKeys(keyId: string): boolean {\n        return this.cache.has(keyId)\n    }\n\n    /**\n     * Delete a set of keys from the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair to delete from memory\n     * @returns {boolean} true if the keyId exists in the cache and was deleted, false if the key did not exist\n     */\n    deleteKeys(keyId: string): boolean {\n        return this.cache.delete(keyId)\n    }\n\n    /**\n     * Get a set of keys from the cache\n     * @param keyId keyId of a proving and verifying key pair\n     *\n     * @returns {FunctionKeyPair} Proving and verifying keys for the specified program\n     */\n    getKeys(keyId: string): FunctionKeyPair {\n        console.debug(`Checking if key exists in cache. KeyId: ${keyId}`)\n        if (this.cache.has(keyId)) {\n            const [provingKeyBytes, verifyingKeyBytes] = <CachedKeyPair>this.cache.get(keyId);\n            return [ProvingKey.fromBytes(provingKeyBytes), VerifyingKey.fromBytes(verifyingKeyBytes)];\n        } else {\n            throw new Error(\"Key not found in cache.\");\n        }\n    }\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams} params parameters for the key search in form of: {proverUri: string, verifierUri: string, cacheKey: string}\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually using the key provider\n     * const keySearchParams = { \"cacheKey\": \"myProgram:myFunction\" };\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(keySearchParams);\n     */\n    async functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair> {\n        if (params) {\n            let proverUrl;\n            let verifierUrl;\n            let cacheKey;\n            if (\"name\" in params && typeof params[\"name\"] == \"string\") {\n                let key = CREDITS_PROGRAM_KEYS.getKey(params[\"name\"]);\n                return this.fetchCreditsKeys(key);\n            }\n\n            if (\"proverUri\" in params && typeof params[\"proverUri\"] == \"string\") {\n                proverUrl = params[\"proverUri\"];\n            }\n\n            if (\"verifierUri\" in params && typeof params[\"verifierUri\"] == \"string\") {\n                verifierUrl = params[\"verifierUri\"];\n            }\n\n            if (\"cacheKey\" in params && typeof params[\"cacheKey\"] == \"string\") {\n                cacheKey = params[\"cacheKey\"];\n            }\n\n            if (proverUrl && verifierUrl) {\n                return await this.fetchRemoteKeys(proverUrl, verifierUrl, cacheKey);\n            }\n\n            if (cacheKey) {\n                return this.getKeys(cacheKey);\n            }\n        }\n        throw new Error(\"Invalid parameters provided, must provide either a cacheKey and/or a proverUrl and a verifierUrl\");\n    }\n\n    /**\n     * Returns the proving and verifying keys for a specified program from a specified url.\n     *\n     * @param {string} verifierUrl Url of the proving key\n     * @param {string} proverUrl Url the verifying key\n     * @param {string} cacheKey Key to store the keys in the cache\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new AleoKeyProvider object\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.fetchKeys(\n     *     CREDITS_PROGRAM_KEYS.transfer_private.prover,\n     *     CREDITS_PROGRAM_KEYS.transfer_private.verifier,\n     * );\n     */\n    async fetchRemoteKeys(proverUrl: string, verifierUrl: string, cacheKey?: string): Promise<FunctionKeyPair> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return [ProvingKey.fromBytes(value[0]), VerifyingKey.fromBytes(value[1])];\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                    console.debug(\"Fetching verifying keys \" + verifierUrl);\n                    const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                    this.cache.set(cacheKey, [provingKey.toBytes(), verifyingKey.toBytes()]);\n                    return [provingKey, verifyingKey];\n                }\n            }\n            else {\n                // If cache is disabled, fetch the keys and return them\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                return [provingKey, verifyingKey];\n            }\n        } catch (error: any) {\n            throw new Error(`Error: ${error.message} fetching fee proving and verifying keys from ${proverUrl} and ${verifierUrl}.`);\n        }\n    }\n\n    /***\n     * Fetches the proving key from a remote source.\n     *\n     * @param proverUrl\n     * @param cacheKey\n     *\n     * @returns {Promise<ProvingKey>} Proving key for the specified program\n     */\n    async fetchProvingKey(proverUrl: string, cacheKey?: string): Promise<ProvingKey> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return ProvingKey.fromBytes(value[0]);\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl));\n                    return provingKey;\n                }\n            }\n            else {\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl));\n                return provingKey;\n            }\n        } catch (error: any) {\n            throw new Error(`Error: ${error.message} fetching fee proving keys from ${proverUrl}`);\n        }\n    }\n\n    async fetchCreditsKeys(key: Key): Promise<FunctionKeyPair> {\n        try {\n            if (!this.cache.has(key.locator) || !this.cacheOption) {\n                const verifying_key = key.verifyingKey()\n                const proving_key = <ProvingKey>await this.fetchProvingKey(key.prover, key.locator);\n                if (this.cacheOption) {\n                    this.cache.set(CREDITS_PROGRAM_KEYS.bond_public.locator, [proving_key.toBytes(), verifying_key.toBytes()]);\n                }\n                return [proving_key, verifying_key];\n            } else {\n                const keyPair = <CachedKeyPair>this.cache.get(key.locator);\n                return [ProvingKey.fromBytes(keyPair[0]), VerifyingKey.fromBytes(keyPair[1])];\n            }\n        } catch (error: any) {\n            throw new Error(`Error: fetching credits.aleo keys: ${error.message}`);\n        }\n    }\n\n    async bondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.bond_public);\n    }\n\n    bondValidatorKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.bond_validator);\n    }\n\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.claim_unbond_public)\n    }\n\n    /**\n     * Returns the proving and verifying keys for the transfer functions in the credits.aleo program\n     * @param {string} visibility Visibility of the transfer function\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the transfer functions\n     *\n     * @example\n     * // Create a new AleoKeyProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    async transferKeys(visibility: string): Promise<FunctionKeyPair> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_private);\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_private_to_public);\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public);\n        } else if (PUBLIC_TRANSFER_AS_SIGNER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public_as_signer);\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public_to_private);\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the join function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    async joinKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.join);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the split function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the split function\n     * */\n    async splitKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.split);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_private function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the fee function\n     */\n    async feePrivateKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.fee_private);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_public function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the fee function\n     */\n    async feePublicKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.fee_public);\n    }\n\n    /**\n     * Gets a verifying key. If the verifying key is for a credits.aleo function, get it from the wasm cache otherwise\n     *\n     * @returns {Promise<VerifyingKey>} Verifying key for the function\n     */\n    // attempt to fetch it from the network\n    async getVerifyingKey(verifierUri: string): Promise<VerifyingKey> {\n        switch (verifierUri) {\n            case CREDITS_PROGRAM_KEYS.bond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.bond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.bond_validator.verifier:\n                return CREDITS_PROGRAM_KEYS.bond_validator.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.claim_unbond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_private.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_public.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.inclusion.verifier:\n                return CREDITS_PROGRAM_KEYS.inclusion.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.join.verifier:\n                return CREDITS_PROGRAM_KEYS.join.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.set_validator_state.verifier:\n                return CREDITS_PROGRAM_KEYS.set_validator_state.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.split.verifier:\n                return CREDITS_PROGRAM_KEYS.split.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public_as_signer.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public_as_signer.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.unbond_public.verifyingKey();\n            default:\n                try {\n                    /// Try to fetch the verifying key from the network as a string\n                    const response = await get(verifierUri);\n                    const text = await response.text();\n                    return <VerifyingKey>VerifyingKey.fromString(text);\n                } catch (e) {\n                    /// If that fails, try to fetch the verifying key from the network as bytes\n                    try {\n                    return <VerifyingKey>VerifyingKey.fromBytes(await this.fetchBytes(verifierUri));\n                    } catch (inner: any) {\n                        throw new Error(\"Invalid verifying key. Error: \" + inner.message);\n                    }\n                }\n        }\n    }\n\n    unBondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.unbond_public);\n    }\n}\n\nexport {AleoKeyProvider, AleoKeyProviderParams, AleoKeyProviderInitParams, CachedKeyPair, FunctionKeyPair, FunctionKeyProvider, KeySearchParams}\n","import {\n    Account,\n    AleoKeyProvider,\n    AleoNetworkClient,\n    ExecutionResponse,\n    FunctionExecution,\n    FunctionKeyProvider,\n    FunctionKeyPair,\n    OfflineQuery,\n    KeySearchParams,\n    RecordPlaintext,\n    RecordProvider,\n    RecordSearchParams,\n    PrivateKey,\n    Program,\n    ProgramImports,\n    ProvingKey,\n    VerifyingKey,\n    Transaction,\n    PRIVATE_TRANSFER_TYPES,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n    ProgramManagerBase as WasmProgramManager, verifyFunctionExecution, AleoKeyProviderParams, CREDITS_PROGRAM_KEYS,\n} from \"./browser\";\n\n/**\n * Represents the options for executing a transaction in the Aleo network.\n * This interface is used to specify the parameters required for building and submitting an execution transaction.\n *\n * @property {string} programName - The name of the program containing the function to be executed.\n * @property {string} functionName - The name of the function to execute within the program.\n * @property {number} fee - The fee to be paid for the transaction.\n * @property {boolean} privateFee - If true, uses a private record to pay the fee; otherwise, uses the account's public credit balance.\n * @property {string[]} inputs - The inputs to the function being executed.\n * @property {RecordSearchParams} [recordSearchParams] - Optional parameters for searching for a record to pay the execution transaction fee.\n * @property {KeySearchParams} [keySearchParams] - Optional parameters for finding the matching proving & verifying keys for the function.\n * @property {string | RecordPlaintext} [feeRecord] - Optional fee record to use for the transaction.\n * @property {ProvingKey} [provingKey] - Optional proving key to use for the transaction.\n * @property {VerifyingKey} [verifyingKey] - Optional verifying key to use for the transaction.\n * @property {PrivateKey} [privateKey] - Optional private key to use for the transaction.\n * @property {OfflineQuery} [offlineQuery] - Optional offline query if creating transactions in an offline environment.\n * @property {string | Program} [program] - Optional program source code to use for the transaction.\n * @property {ProgramImports} [imports] - Optional programs that the program being executed imports.\n */\ninterface ExecuteOptions {\n    programName: string;\n    functionName: string;\n    fee: number;\n    privateFee: boolean;\n    inputs: string[];\n    recordSearchParams?: RecordSearchParams;\n    keySearchParams?: KeySearchParams;\n    feeRecord?: string | RecordPlaintext;\n    provingKey?: ProvingKey;\n    verifyingKey?: VerifyingKey;\n    privateKey?: PrivateKey;\n    offlineQuery?: OfflineQuery;\n    program?: string | Program;\n    imports?: ProgramImports;\n}\n\n/**\n * The ProgramManager class is used to execute and deploy programs on the Aleo network and create value transfers.\n */\nclass ProgramManager {\n    account: Account | undefined;\n    keyProvider: FunctionKeyProvider;\n    host: string;\n    networkClient: AleoNetworkClient;\n    recordProvider: RecordProvider | undefined;\n\n    /** Create a new instance of the ProgramManager\n     *\n     * @param { string | undefined } host A host uri running the official Aleo API\n     * @param { FunctionKeyProvider | undefined } keyProvider A key provider that implements {@link FunctionKeyProvider} interface\n     * @param { RecordProvider | undefined } recordProvider A record provider that implements {@link RecordProvider} interface\n     */\n    constructor(host?: string | undefined, keyProvider?: FunctionKeyProvider | undefined, recordProvider?: RecordProvider | undefined) {\n        this.host = host ? host : 'https://api.explorer.provable.com/v1';\n        this.networkClient = new AleoNetworkClient(this.host);\n\n        this.keyProvider = keyProvider ? keyProvider : new AleoKeyProvider();\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Set the account to use for transaction submission to the Aleo network\n     *\n     * @param {Account} account Account to use for transaction submission\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Set the key provider that provides the proving and verifying keys for programs\n     *\n     * @param {FunctionKeyProvider} keyProvider\n     */\n    setKeyProvider(keyProvider: FunctionKeyProvider) {\n        this.keyProvider = keyProvider;\n    }\n\n    /**\n     * Set the host peer to use for transaction submission to the Aleo network\n     *\n     * @param host {string} Peer url to use for transaction submission\n     */\n    setHost(host: string) {\n        this.host = host;\n        this.networkClient.setHost(host);\n    }\n\n    /**\n     * Set the record provider that provides records for transactions\n     *\n     * @param {RecordProvider} recordProvider\n     */\n    setRecordProvider(recordProvider: RecordProvider) {\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Deploy an Aleo program to the Aleo network\n     *\n     * @param {string} program Program source code\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for searching for a record to use\n     * pay the deployment fee\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {string} The transaction id of the deployed program or a failure message from the network\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for deployments\n     * const program = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Define a fee in credits\n     * const fee = 1.2;\n     *\n     * // Deploy the program\n     * const tx_id = await programManager.deploy(program, fee);\n     *\n     * // Verify the transaction was successful\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async deploy(\n        program: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        feeRecord?: string | RecordPlaintext,\n        privateKey?: PrivateKey,\n    ): Promise<string> {\n        // Ensure the program is valid and does not exist on the network\n        try {\n            const programObject = Program.fromString(program);\n            let programSource;\n            try {\n                programSource = await this.networkClient.getProgram(programObject.id());\n            } catch (e) {\n                // Program does not exist on the network, deployment can proceed\n                console.log(`Program ${programObject.id()} does not exist on the network, deploying...`);\n            }\n            if (typeof programSource == \"string\") {\n                throw (`Program ${programObject.id()} already exists on the network, please rename your program`);\n            }\n        } catch (e: any) {\n            logAndThrow(`Error validating program: ${e.message}`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let deploymentPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            deploymentPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof deploymentPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e: any) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n        } catch (e: any) {\n            logAndThrow(`Error finding program imports. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build a deployment transaction and submit it to the network\n        const tx = await WasmProgramManager.buildDeploymentTransaction(deploymentPrivateKey, program, fee, feeRecord, this.host, imports, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const transaction = await programManager.buildExecutionTransaction({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   fee: 0.020,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async buildExecutionTransaction(options: ExecuteOptions): Promise<Transaction> {\n        // Destructure the options object to access the parameters\n        const {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            recordSearchParams,\n            keySearchParams,\n            privateKey,\n            offlineQuery\n        } = options;\n\n        let feeRecord = options.feeRecord;\n        let provingKey = options.provingKey;\n        let verifyingKey = options.verifyingKey;\n        let program = options.program;\n        let imports = options.imports;\n\n        // Ensure the function exists on the network\n        if (program === undefined) {\n            try {\n                program = <string>(await this.networkClient.getProgram(programName));\n            } catch (e: any) {\n                logAndThrow(`Error finding ${programName}. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`);\n            }\n        } else if (program instanceof Program) {\n            program = program.toString();\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e: any) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the fee proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Resolve the program imports if they exist\n        const numberOfImports = Program.fromString(program).getImports().length;\n        if (numberOfImports > 0 && !imports) {\n            try {\n                imports = <ProgramImports>await this.networkClient.getProgramImports(programName);\n            } catch (e: any) {\n                logAndThrow(`Error finding program imports. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n            }\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildExecutionTransaction(executionPrivateKey, program, functionName, inputs, fee, feeRecord, this.host, imports, provingKey, verifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const transaction = await programManager.execute({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   fee: 0.020,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async execute(options: ExecuteOptions): Promise<string> {\n        const tx = <Transaction>await this.buildExecutionTransaction(options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Run an Aleo program in offline mode\n     *\n     * @param {string} program Program source code containing the function to be executed\n     * @param {string} function_name Function name to execute\n     * @param {string[]} inputs Inputs to the function\n     * @param {number} proveExecution Whether to prove the execution of the function and return an execution transcript\n     * that contains the proof.\n     * @param {string[] | undefined} imports Optional imports to the program\n     * @param {KeySearchParams | undefined} keySearchParams Optional parameters for finding the matching proving &\n     * verifying keys for the function\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>}\n     *\n     * @example\n     * import { Account, Program } from '@provablehq/sdk';\n     *\n     * /// Create the source for the \"helloworld\" program\n     * const program = \"program helloworld.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager();\n     *\n     * /// Create a temporary account for the execution of the program\n     * const account = new Account();\n     * programManager.setAccount(account);\n     *\n     * /// Get the response and ensure that the program executed correctly\n     * const executionResponse = await programManager.run(program, \"hello\", [\"5u32\", \"5u32\"]);\n     * const result = executionResponse.getOutputs();\n     * assert(result === [\"10u32\"]);\n     */\n    async run(\n        program: string,\n        function_name: string,\n        inputs: string[],\n        proveExecution: boolean,\n        imports?: ProgramImports,\n        keySearchParams?: KeySearchParams,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<ExecutionResponse> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Run the program offline and return the result\n        console.log(\"Running program offline\")\n        console.log(\"Proving key: \", provingKey);\n        console.log(\"Verifying key: \", verifyingKey);\n        return WasmProgramManager.executeFunctionOffline(executionPrivateKey, program, function_name, inputs, proveExecution, false, imports, provingKey, verifyingKey, this.host, offlineQuery);\n    }\n\n    /**\n     * Join two credits records into a single credits record\n     *\n     * @param {RecordPlaintext | string} recordOne First credits record to join\n     * @param {RecordPlaintext | string} recordTwo Second credits record to join\n     * @param {number} fee Fee in credits pay for the join transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the fee record to use\n     * to pay the fee for the join transaction\n     * @param {RecordPlaintext | string | undefined} feeRecord Fee record to use for the join transaction\n     * @param {PrivateKey | undefined} privateKey Private key to use for the join transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>}\n     */\n    async join(\n        recordOne: RecordPlaintext | string,\n        recordTwo: RecordPlaintext | string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams | undefined,\n        feeRecord?: RecordPlaintext | string | undefined,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<string> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let joinKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            joinKeys = <FunctionKeyPair>await this.keyProvider.joinKeys();\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [joinProvingKey, joinVerifyingKey] = joinKeys;\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e: any) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Validate the records provided are valid plaintext records\n        try {\n            recordOne = recordOne instanceof RecordPlaintext ? recordOne : RecordPlaintext.fromString(recordOne);\n            recordTwo = recordTwo instanceof RecordPlaintext ? recordTwo : RecordPlaintext.fromString(recordTwo);\n        } catch (e: any) {\n            logAndThrow('Records provided are not valid. Please ensure they are valid plaintext records.')\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildJoinTransaction(executionPrivateKey, recordOne, recordTwo, fee, feeRecord, this.host, joinProvingKey, joinVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Split credits into two new credits records\n     *\n     * @param {number} splitAmount Amount in microcredits to split from the original credits record\n     * @param {RecordPlaintext | string} amountRecord Amount record to use for the split transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the split transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * const record = \"{  owner: aleo184vuwr5u7u0ha5f5k44067dd2uaqewxx6pe5ltha5pv99wvhfqxqv339h4.private,  microcredits: 45000000u64.private,  _nonce: 4106205762862305308495708971985748592380064201230396559307556388725936304984group.public}\"\n     * const tx_id = await programManager.split(25000000, record);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async split(splitAmount: number, amountRecord: RecordPlaintext | string, privateKey?: PrivateKey, offlineQuery?: OfflineQuery): Promise<string> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the split keys from the key provider\n        let splitKeys;\n        try {\n            splitKeys = <FunctionKeyPair>await this.keyProvider.splitKeys();\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [splitProvingKey, splitVerifyingKey] = splitKeys;\n\n        // Validate the record to be split\n        try {\n            amountRecord = amountRecord instanceof RecordPlaintext ? amountRecord : RecordPlaintext.fromString(amountRecord);\n        } catch (e: any) {\n            logAndThrow(\"Record provided is not valid. Please ensure it is a valid plaintext record.\");\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildSplitTransaction(executionPrivateKey, splitAmount, amountRecord, this.host, splitProvingKey, splitVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Pre-synthesize proving and verifying keys for a program\n     *\n     * @param program {string} The program source code to synthesize keys for\n     * @param function_id {string} The function id to synthesize keys for\n     * @param inputs {Array<string>}  Sample inputs to the function\n     * @param privateKey {PrivateKey | undefined} Optional private key to use for the key synthesis\n     *\n     * @returns {Promise<FunctionKeyPair>}\n     */\n    async synthesizeKeys(\n        program: string,\n        function_id: string,\n        inputs: Array<string>,\n        privateKey?: PrivateKey,\n    ): Promise<FunctionKeyPair> {\n        // Resolve the program imports if they exist\n        let imports;\n\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\") {\n            if (typeof this.account !== \"undefined\") {\n                executionPrivateKey = this.account.privateKey();\n            } else {\n                executionPrivateKey = new PrivateKey();\n            }\n        }\n\n        // Attempt to run an offline execution of the program and extract the proving and verifying keys\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n            const keyPair = await WasmProgramManager.synthesizeKeyPair(\n                executionPrivateKey,\n                program,\n                function_id,\n                inputs,\n                imports\n            );\n            return [<ProvingKey>keyPair.provingKey(), <VerifyingKey>keyPair.verifyingKey()];\n        } catch (e: any) {\n            logAndThrow(`Could not synthesize keys - error ${e.message}. Please ensure the program is valid and the inputs are correct.`);\n        }\n    }\n\n    /**\n     * Build a transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async buildTransferTransaction(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction> {\n        // Validate the transfer type\n        transferType = <string>validateTransferType(transferType);\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let transferKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            transferKeys = <FunctionKeyPair>await this.keyProvider.transferKeys(transferType);\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [transferProvingKey, transferVerifyingKey] = transferKeys;\n\n        // Get the amount and fee record from the account if it is not provided in the parameters\n        try {\n            // Track the nonces of the records found so no duplicate records are used\n            const nonces: string[] = [];\n            if (requiresAmountRecord(transferType)) {\n                // If the transfer type is private and requires an amount record, get it from the record provider\n                amountRecord = <RecordPlaintext>await this.getCreditsRecord(fee, [], amountRecord, recordSearchParams);\n                nonces.push(amountRecord.nonce());\n            } else {\n                amountRecord = undefined;\n            }\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, nonces, feeRecord, recordSearchParams) : undefined;\n        } catch (e: any) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildTransferTransaction(executionPrivateKey, amount, recipient, transferType, amountRecord, fee, feeRecord, this.host, transferProvingKey, transferVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Build a transfer_public transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     */\n    async buildTransferPublicTransaction(\n        amount: number,\n        recipient: string,\n        fee: number,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction> {\n        return this.buildTransferTransaction(amount, recipient, \"public\", fee, false, undefined, undefined, undefined, privateKey, offlineQuery);\n    }\n\n    /**\n     * Build a transfer_public_as_signer transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     */\n    async buildTransferPublicAsSignerTransaction(\n        amount: number,\n        recipient: string,\n        fee: number,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction> {\n        return this.buildTransferTransaction(amount, recipient, \"public\", fee, false, undefined, undefined, undefined, privateKey, offlineQuery);\n    }\n\n    /**\n     * Transfer credits to another account\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async transfer(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<string> {\n        const tx = <Transaction>await this.buildTransferTransaction(amount, recipient, transferType, fee, privateFee, recordSearchParams, amountRecord, feeRecord, privateKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build transaction to bond credits to a validator for later submission to the Aleo Network\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction object for later submission\n     * const tx = await programManager.buildBondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can be later submitted to the network using the network client.\n     * const result = await programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is bonding the credits\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async buildBondPublicTransaction(staker_address: string, validator_address: string, withdrawal_address: string, amount: number, options: Partial<ExecuteOptions> = {}) {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"bond_public\",\n            fee = options.fee || 0.86,\n            privateFee = false,\n            inputs = [staker_address, validator_address, withdrawal_address, `${scaledAmount.toString()}u64`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.bond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.bond_public.verifier,\n                cacheKey: \"credits.aleo/bond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Bond credits to validator.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is bonding the credits\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the signer (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 1,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {Options} options Options for the execution\n     */\n    async bondPublic(staker_address: string, validator_address: string, withdrawal_address:string, amount: number, options: Partial<ExecuteOptions> = {}) {\n        const tx = <Transaction>await this.buildBondPublicTransaction(staker_address, validator_address, withdrawal_address, amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a bond_validator transaction for later submission to the Aleo Network.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bond validator transaction object for later use.\n     * const tx = await programManager.buildBondValidatorTransaction(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can later be submitted to the network using the network client.\n     * const tx_id = await programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {number} commission The commission rate for the validator (must be between 0 and 100 - an error will be thrown if it is not)\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async buildBondValidatorTransaction(validator_address: string, withdrawal_address: string, amount: number, commission: number, options: Partial<ExecuteOptions> = {}) {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const adjustedCommission = Math.trunc(commission)\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"bond_validator\",\n            fee = options.fee || 0.86,\n            privateFee = false,\n            inputs = [validator_address, withdrawal_address, `${scaledAmount.toString()}u64`, `${adjustedCommission.toString()}u8`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.bond_validator.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.bond_validator.verifier,\n                cacheKey: \"credits.aleo/bond_validator\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Build transaction to bond a validator.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondValidator(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     *\n     * @returns string\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {number} commission The commission rate for the validator (must be between 0 and 100 - an error will be thrown if it is not)\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async bondValidator(validator_address: string, withdrawal_address: string, amount: number, commission: number, options: Partial<ExecuteOptions> = {}) {\n        const tx = <Transaction>await this.buildBondValidatorTransaction(validator_address, withdrawal_address, amount, commission, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to unbond public credits from a validator in the Aleo network.\n     *\n     * @param {string} staker_address - The address of the staker who is unbonding the credits.\n     * @param {number} amount - The amount of credits to unbond (scaled by 1,000,000).\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * // Create a keyProvider to handle key management.\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to unbond credits.\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * const tx = await programManager.buildUnbondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     */\n    async buildUnbondPublicTransaction(staker_address: string, amount: number, options: Partial<ExecuteOptions> = {}): Promise<Transaction> {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"unbond_public\",\n            fee = options.fee || 1.3,\n            privateFee = false,\n            inputs = [staker_address, `${scaledAmount.toString()}u64`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.unbond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.unbond_public.verifier,\n                cacheKey: \"credits.aleo/unbond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Unbond a specified amount of staked credits.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction and send it to the network\n     * const tx_id = await programManager.unbondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", 10);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is unbonding the credits\n     * @param {number} amount Amount of credits to unbond. If the address of the executor of this function is an\n     * existing validator, it will subtract this amount of credits from the validator's staked credits. If there are\n     * less than 1,000,000 credits staked pool after the unbond, the validator will be removed from the validator set.\n     * If the address of the executor of this function is not a validator and has credits bonded as a delegator, it will\n     * subtract this amount of credits from the delegator's staked credits. If there are less than 10 credits bonded\n     * after the unbond operation, the delegator will be removed from the validator's staking pool.\n     * @param {ExecuteOptions} options Options for the execution\n     */\n    async unbondPublic(staker_address: string, amount: number, options: Partial<ExecuteOptions> = {}): Promise<string> {\n        const tx = <Transaction>await this.buildUnbondPublicTransaction(staker_address, amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to claim unbonded public credits in the Aleo network.\n     *\n     * @param {string} staker_address - The address of the staker who is claiming the credits.\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to claim unbonded credits.\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     *\n     * // Create the claim unbonded transaction object for later use.\n     * const tx = await programManager.buildClaimUnbondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\");\n     * console.log(tx);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     */\n    async buildClaimUnbondPublicTransaction(staker_address: string, options: Partial<ExecuteOptions> = {}): Promise<Transaction> {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"claim_unbond_public\",\n            fee = options.fee || 2,\n            privateFee = false,\n            inputs = [staker_address],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier,\n                cacheKey: \"credits.aleo/claim_unbond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Claim unbonded credits. If credits have been unbonded by the account executing this function, this method will\n     * claim them and add them to the public balance of the account.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.claimUnbondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\");\n     *\n     * @param {string} staker_address Address of the staker who is claiming the credits\n     * @param {ExecuteOptions} options\n     * @returns string\n     */\n    async claimUnbondPublic(staker_address: string, options: Partial<ExecuteOptions> = {}): Promise<string> {\n        const tx = <Transaction>await this.buildClaimUnbondPublicTransaction(staker_address, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a set_validator_state transaction for later usage.\n     *\n     * This function allows a validator to set their state to be either opened or closed to new stakers.\n     * When the validator is open to new stakers, any staker (including the validator) can bond or unbond from the validator.\n     * When the validator is closed to new stakers, existing stakers can still bond or unbond from the validator, but new stakers cannot bond.\n     *\n     * This function serves two primary purposes:\n     * 1. Allow a validator to leave the committee, by closing themselves to stakers and then unbonding all of their stakers.\n     * 2. Allow a validator to maintain their % of stake, by closing themselves to allowing more stakers to bond to them.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"ValidatorPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx = await programManager.buildSetValidatorStateTransaction(true);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {boolean} validator_state\n     * @param {Partial<ExecuteOptions>} options - Override default execution options\n     */\n    async buildSetValidatorStateTransaction(validator_state: boolean, options: Partial<ExecuteOptions> = {}) {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"set_validator_state\",\n            fee = 1,\n            privateFee = false,\n            inputs = [validator_state.toString()],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.set_validator_state.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.set_validator_state.verifier,\n                cacheKey: \"credits.aleo/set_validator_state\"\n            }),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.execute(executeOptions);\n    }\n\n    /**\n     * Submit a set_validator_state transaction to the Aleo Network.\n     *\n     * This function allows a validator to set their state to be either opened or closed to new stakers.\n     * When the validator is open to new stakers, any staker (including the validator) can bond or unbond from the validator.\n     * When the validator is closed to new stakers, existing stakers can still bond or unbond from the validator, but new stakers cannot bond.\n     *\n     * This function serves two primary purposes:\n     * 1. Allow a validator to leave the committee, by closing themselves to stakers and then unbonding all of their stakers.\n     * 2. Allow a validator to maintain their % of stake, by closing themselves to allowing more stakers to bond to them.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"ValidatorPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.setValidatorState(true);\n     *\n     * @returns string\n     * @param {boolean} validator_state\n     * @param {Partial<ExecuteOptions>} options - Override default execution options\n     */\n    async setValidatorState(validator_state: boolean, options: Partial<ExecuteOptions> = {}) {\n        const tx = <string>await this.buildSetValidatorStateTransaction(validator_state, options);\n        return this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Verify a proof of execution from an offline execution\n     *\n     * @param {executionResponse} executionResponse\n     * @returns {boolean} True if the proof is valid, false otherwise\n     */\n    verifyExecution(executionResponse: ExecutionResponse): boolean {\n        try {\n            const execution = <FunctionExecution>executionResponse.getExecution();\n            const function_id = executionResponse.getFunctionId();\n            const program = executionResponse.getProgram();\n            const verifyingKey = executionResponse.getVerifyingKey();\n            return verifyFunctionExecution(execution, verifyingKey, program, function_id);\n        } catch(e) {\n            console.warn(\"The execution was not found in the response, cannot verify the execution\");\n            return false;\n        }\n    }\n\n    /**\n     * Create a program object from a program's source code\n     *\n     * @param {string} program Program source code\n     * @returns {Program} The program object\n     */\n    createProgramFromSource(program: string): Program {\n        return Program.fromString(program);\n    }\n\n    /**\n     * Get the credits program object\n     *\n     * @returns {Program} The credits program object\n     */\n    creditsProgram(): Program {\n        return Program.getCreditsProgram();\n    }\n\n    /**\n     * Verify a program is valid\n     *\n     * @param {string} program The program source code\n     */\n    verifyProgram(program: string): boolean {\n        try {\n            <Program>Program.fromString(program);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    // Internal utility function for getting a credits.aleo record\n    async getCreditsRecord(amount: number, nonces: string[], record?: RecordPlaintext | string, params?: RecordSearchParams): Promise<RecordPlaintext> {\n        try {\n            return record instanceof RecordPlaintext ? record : RecordPlaintext.fromString(<string>record);\n        } catch (e) {\n            try {\n                const recordProvider = <RecordProvider>this.recordProvider;\n                return <RecordPlaintext>(await recordProvider.findCreditsRecord(amount, true, nonces, params))\n            } catch (e: any) {\n                logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n            }\n        }\n    }\n}\n\n// Ensure the transfer type requires an amount record\nfunction requiresAmountRecord(transferType: string): boolean {\n    return PRIVATE_TRANSFER_TYPES.has(transferType);\n}\n\n// Validate the transfer type\nfunction validateTransferType(transferType: string): string {\n    return VALID_TRANSFER_TYPES.has(transferType) ? transferType :\n        logAndThrow(`Invalid transfer type '${transferType}'. Valid transfer types are 'private', 'privateToPublic', 'public', and 'publicToPrivate'.`);\n}\n\nexport { ProgramManager }\n","import \"./polyfill/shared\";\nimport {VerifyingKey, Metadata} from \"@provablehq/wasm/%%NETWORK%%.js\";\n\nconst KEY_STORE = Metadata.baseUrl();\n\ninterface Key {\n    name: string,\n    locator: string,\n    prover: string,\n    verifier: string,\n    verifyingKey: () => VerifyingKey,\n}\n\nfunction convert(metadata: Metadata): Key {\n    // This looks up the method name in VerifyingKey\n    const verifyingKey = (VerifyingKey as any)[metadata.verifyingKey];\n\n    if (!verifyingKey) {\n        throw new Error(\"Invalid method name: \" + metadata.verifyingKey);\n    }\n\n    return {\n        name: metadata.name,\n        locator: metadata.locator,\n        prover: metadata.prover,\n        verifier: metadata.verifier,\n        verifyingKey,\n    };\n}\n\nconst CREDITS_PROGRAM_KEYS = {\n    bond_public: convert(Metadata.bond_public()),\n    bond_validator: convert(Metadata.bond_validator()),\n    claim_unbond_public: convert(Metadata.claim_unbond_public()),\n    fee_private: convert(Metadata.fee_private()),\n    fee_public: convert(Metadata.fee_public()),\n    inclusion: convert(Metadata.inclusion()),\n    join: convert(Metadata.join()),\n    set_validator_state: convert(Metadata.set_validator_state()),\n    split: convert(Metadata.split()),\n    transfer_private: convert(Metadata.transfer_private()),\n    transfer_private_to_public: convert(Metadata.transfer_private_to_public()),\n    transfer_public: convert(Metadata.transfer_public()),\n    transfer_public_as_signer: convert(Metadata.transfer_public_as_signer()),\n    transfer_public_to_private: convert(Metadata.transfer_public_to_private()),\n    unbond_public: convert(Metadata.unbond_public()),\n    getKey: function(key: string): Key {\n        if (this.hasOwnProperty(key)) {\n            return (this as any)[key] as Key;\n        } else {\n            throw new Error(`Key \"${key}\" not found.`);\n        }\n    }\n};\n\nconst PRIVATE_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n]);\nconst VALID_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n    \"transfer_public\",\n    \"transfer_public_as_signer\",\n    \"public\",\n    \"public_as_signer\",\n    \"transferPublic\",\n    \"transferPublicAsSigner\",\n    \"transfer_public_to_private\",\n    \"publicToPrivate\",\n    \"publicAsSigner\",\n    \"transferPublicToPrivate\",\n]);\nconst PRIVATE_TRANSFER = new Set([\n    \"private\",\n    \"transfer_private\",\n    \"transferPrivate\",\n]);\nconst PRIVATE_TO_PUBLIC_TRANSFER = new Set([\n    \"private_to_public\",\n    \"privateToPublic\",\n    \"transfer_private_to_public\",\n    \"transferPrivateToPublic\",\n]);\nconst PUBLIC_TRANSFER = new Set([\n    \"public\",\n    \"transfer_public\",\n    \"transferPublic\",\n]);\nconst PUBLIC_TRANSFER_AS_SIGNER = new Set([\n    \"public_as_signer\",\n    \"transfer_public_as_signer\",\n    \"transferPublicAsSigner\",\n]);\nconst PUBLIC_TO_PRIVATE_TRANSFER = new Set([\n    \"public_to_private\",\n    \"publicToPrivate\",\n    \"transfer_public_to_private\",\n    \"transferPublicToPrivate\",\n]);\n\nfunction logAndThrow(message: string): never {\n    console.error(message);\n    throw new Error(message);\n}\n\nimport { Account } from \"./account\";\nimport { AleoNetworkClient, ProgramImports } from \"./network-client\";\nimport { Block } from \"./models/block\";\nimport { Execution } from \"./models/execution\";\nimport { Input } from \"./models/input\";\nimport { Output } from \"./models/output\";\nimport { TransactionModel } from \"./models/transactionModel\";\nimport { Transition } from \"./models/transition\";\nimport {\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    CachedKeyPair,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    KeySearchParams,\n} from \"./function-key-provider\";\nimport {\n    OfflineKeyProvider,\n    OfflineSearchParams\n} from \"./offline-key-provider\";\nimport {\n    BlockHeightSearch,\n    NetworkRecordProvider,\n    RecordProvider,\n    RecordSearchParams,\n} from \"./record-provider\";\n\n// @TODO: This function is no longer needed, remove it.\nasync function initializeWasm() {\n    console.warn(\"initializeWasm is deprecated, you no longer need to use it\");\n}\n\nexport { createAleoWorker } from \"./managed-worker\";\n\nexport { ProgramManager } from \"./program-manager\";\n\nexport {\n    Address,\n    Execution as FunctionExecution,\n    ExecutionResponse,\n    Field,\n    OfflineQuery,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProgramManager as ProgramManagerBase,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    Signature,\n    Transaction,\n    VerifyingKey,\n    ViewKey,\n    initThreadPool,\n    verifyFunctionExecution,\n} from \"@provablehq/wasm/%%NETWORK%%.js\";\n\nexport { initializeWasm };\n\nexport {\n    Account,\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    AleoNetworkClient,\n    Block,\n    BlockHeightSearch,\n    CachedKeyPair,\n    Execution,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    Input,\n    Key,\n    KeySearchParams,\n    NetworkRecordProvider,\n    ProgramImports,\n    OfflineKeyProvider,\n    OfflineSearchParams,\n    Output,\n    RecordProvider,\n    RecordSearchParams,\n    TransactionModel,\n    Transition,\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PRIVATE_TRANSFER_TYPES,\n    PUBLIC_TRANSFER,\n    PUBLIC_TRANSFER_AS_SIGNER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n};\n","import \"./polyfill/shared\";\nimport {initThreadPool, ProgramManager, PrivateKey, verifyFunctionExecution, FunctionKeyPair} from \"./browser\";\nimport { AleoKeyProvider, AleoKeyProviderParams} from \"./function-key-provider\";\nimport { expose } from \"comlink\";\n\nawait initThreadPool();\n\nconst defaultHost = \"https://api.explorer.provable.com/v1\";\nconst keyProvider = new AleoKeyProvider();\nconst programManager = new ProgramManager(\n    defaultHost,\n    keyProvider,\n    undefined\n);\n\nkeyProvider.useCache(true);\n\nlet lastLocalProgram: string = \"\";\n\nexport interface WorkerAPI {\n    run: (\n        localProgram: string,\n        aleoFunction: string,\n        inputs: string[],\n        privateKey: string\n    ) => Promise<{ outputs: any; execution: string } | string>;\n\n    getPrivateKey: () => Promise<PrivateKey>;\n}\nasync function run(\n    localProgram: string,\n    aleoFunction: string,\n    inputs: string[],\n    privateKey: string,\n    proveExecution = false\n) {\n    console.log(\"Web worker: Executing function locally...\");\n    const startTime = performance.now();\n\n    // Ensure the program is valid and that it contains the function specified\n    let program;\n\n    try {\n        program = programManager.createProgramFromSource(localProgram);\n    } catch (e) {\n        throw new Error(\"Error creating program from source\");\n    }\n\n    const program_id = program.id();\n    if (!program.hasFunction(aleoFunction)) {\n        throw new Error(`Program ${program_id} does not contain function ${aleoFunction}`);\n    }\n    const cacheKey = `${program_id}:${aleoFunction}`;\n\n\n    // Get the program imports\n    let imports;\n\n    try {\n        imports = await programManager.networkClient.getProgramImports(\n            localProgram\n        );\n    } catch (e) {\n        throw new Error(\"Error getting program imports\");\n    }\n\n    // Get the proving and verifying keys for the function\n    if (lastLocalProgram !== localProgram) {\n        const keys = <FunctionKeyPair>await programManager.synthesizeKeys(\n            localProgram,\n            aleoFunction,\n            inputs,\n            PrivateKey.from_string(privateKey)\n        );\n        programManager.keyProvider.cacheKeys(cacheKey, keys);\n        lastLocalProgram = localProgram;\n    }\n\n    // Pass the cache key to the execute function\n    const keyParams = new AleoKeyProviderParams({\n        cacheKey: cacheKey,\n    });\n\n    // Execute the function locally\n    const response = await programManager.run(\n        localProgram,\n        aleoFunction,\n        inputs,\n        proveExecution,\n        imports,\n        keyParams,\n        undefined,\n        undefined,\n        PrivateKey.from_string(privateKey),\n    );\n\n    // Return the outputs to the main thread\n    console.log(\n        `Web worker: Local execution completed in ${\n            performance.now() - startTime\n        } ms`\n    );\n    const outputs = response.getOutputs();\n    const execution = response.getExecution();\n    let executionString = \"\";\n\n    let keys;\n\n    try {\n        keys = keyProvider.getKeys(cacheKey);\n    } catch (e) {\n        throw new Error(\"Could not get verifying key\");\n    }\n\n    const verifyingKey = keys[1];\n\n    if (execution) {\n        verifyFunctionExecution(\n            execution,\n            verifyingKey,\n            program,\n            \"hello\"\n        );\n        executionString = execution.toString();\n        console.log(\"Execution verified successfully: \" + execution);\n    } else {\n        executionString = \"\";\n    }\n\n    console.log(`Function execution response: ${outputs}`);\n\n    return { outputs: outputs, execution: executionString };\n}\n\nasync function getPrivateKey() {\n    const privateKey = new PrivateKey();\n    return privateKey.to_string();\n}\n\nconst workerAPI = { run, getPrivateKey };\nexpose(workerAPI);\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    return createProxy(ep, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        ep.addEventListener(\"message\", function l(ev) {\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\n                return;\n            }\n            ep.removeEventListener(\"message\", l);\n            resolve(ev.data);\n        });\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [357,879], () => (__webpack_require__(8229)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".bundle.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = self.location + \"\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t427: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkaleo_website\"] = self[\"webpackChunkaleo_website\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["webpackQueues","webpackExports","webpackError","resolveQueue","deferred","next","parseJSON","json","JSON","parse","key","value","context","Number","isInteger","BigInt","source","async","get","url","options","response","fetch","ok","Error","status","post","method","AleoNetworkClient","host","headers","account","constructor","this","setAccount","getAccount","setHost","fetchData","text","error","findUnspentRecords","startHeight","endHeight","privateKey","amounts","maxMicrocredits","nonces","records","Array","start","end","resolvedPrivateKey","latestHeight","failures","totalRecordValue","_privateKey","PrivateKey","from_string","viewKey","to_view_key","blockHeight","getLatestHeight","blocks","getBlockRange","i","length","transactions","j","confirmedTransaction","type","transaction","execution","transitions","k","transition","program","outputs","l","output","record","RecordCiphertext","fromString","isOwner","recordPlaintext","decrypt","nonce","includes","serialNumber","serialNumberString","getTransitionId","push","microcredits","amounts_found","console","warn","toString","getBlock","height","getDeploymentTransactionIDForProgram","Program","replace","getDeploymentTransactionForProgram","transaction_id","getTransaction","getLatestBlock","getLatestCommittee","getProgram","programId","getProgramObject","inputProgram","getProgramImports","imports","importList","getImports","import_id","hasOwnProperty","programSource","nestedImports","logAndThrow","message","getProgramImportNames","getProgramMappingNames","getProgramMappingValue","mappingName","getStateRoot","id","getTransactions","getTransactionsInMempool","inputOrOutputID","submitTransaction","transaction_string","Transaction","body","Object","assign","AleoKeyProviderParams","name","proverUri","verifierUri","cacheKey","params","AleoKeyProvider","cache","cacheOption","keyUris","fetchBytes","data","arrayBuffer","Uint8Array","KEY_STORE","Map","useCache","clearCache","clear","cacheKeys","keyId","keys","provingKey","verifyingKey","set","toBytes","containsKeys","has","deleteKeys","delete","getKeys","debug","provingKeyBytes","verifyingKeyBytes","ProvingKey","fromBytes","VerifyingKey","functionKeys","proverUrl","verifierUrl","CREDITS_PROGRAM_KEYS","getKey","fetchCreditsKeys","fetchRemoteKeys","getVerifyingKey","fetchProvingKey","locator","keyPair","verifying_key","proving_key","prover","bond_public","bondPublicKeys","bondValidatorKeys","bond_validator","claimUnbondPublicKeys","claim_unbond_public","transferKeys","visibility","PRIVATE_TRANSFER","transfer_private","PRIVATE_TO_PUBLIC_TRANSFER","transfer_private_to_public","PUBLIC_TRANSFER","transfer_public","PUBLIC_TRANSFER_AS_SIGNER","transfer_public_as_signer","PUBLIC_TO_PRIVATE_TRANSFER","transfer_public_to_private","joinKeys","join","splitKeys","split","feePrivateKeys","fee_private","feePublicKeys","fee_public","verifier","inclusion","set_validator_state","unbond_public","e","inner","unBondPublicKeys","ProgramManager","keyProvider","networkClient","recordProvider","setKeyProvider","setRecordProvider","deploy","fee","privateFee","recordSearchParams","feeRecord","programObject","log","feeKeys","deploymentPrivateKey","getCreditsRecord","undefined","feeProvingKey","feeVerifyingKey","tx","ProgramManager$1","buildDeploymentTransaction","buildExecutionTransaction","programName","functionName","inputs","keySearchParams","offlineQuery","executionPrivateKey","execute","run","function_name","proveExecution","executeFunctionOffline","recordOne","recordTwo","joinProvingKey","joinVerifyingKey","RecordPlaintext","buildJoinTransaction","splitAmount","amountRecord","splitProvingKey","splitVerifyingKey","buildSplitTransaction","synthesizeKeys","function_id","synthesizeKeyPair","buildTransferTransaction","amount","recipient","transferType","validateTransferType","transferProvingKey","transferVerifyingKey","requiresAmountRecord","buildTransferPublicTransaction","buildTransferPublicAsSignerTransaction","transfer","buildBondPublicTransaction","staker_address","validator_address","withdrawal_address","scaledAmount","Math","trunc","creditsProgram","additionalOptions","executeOptions","bondPublic","buildBondValidatorTransaction","commission","adjustedCommission","bondValidator","buildUnbondPublicTransaction","unbondPublic","buildClaimUnbondPublicTransaction","claimUnbondPublic","buildSetValidatorStateTransaction","validator_state","setValidatorState","verifyExecution","executionResponse","getExecution","getFunctionId","verifyFunctionExecution","createProgramFromSource","getCreditsProgram","verifyProgram","findCreditsRecord","PRIVATE_TRANSFER_TYPES","VALID_TRANSFER_TYPES","Metadata","baseUrl","convert","metadata","Set","initThreadPool","defaultHost","programManager","lastLocalProgram","localProgram","aleoFunction","startTime","performance","now","program_id","hasFunction","keyParams","getOutputs","executionString","getPrivateKey","to_string","workerAPI","expose","proxyMarker","Symbol","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","val","transferHandlers","canHandle","serialize","obj","port1","port2","MessageChannel","deserialize","port","createProxy","target","serialized","isError","stack","ep","globalThis","allowedOrigins","addEventListener","callback","ev","origin","allowedOrigin","RegExp","test","isAllowedOrigin","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","apply","proxy","transfers","transferCache","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","TypeError","endpoint","isMessagePort","close","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","WeakMap","proxyFinalizers","FinalizationRegistry","newCount","isProxyReleased","Proxy","_target","unregister","unregisterProxy","r","p","bind","_thisArg","rawArgumentList","last","processArguments","construct","register","registerProxy","processed","v","arr","prototype","concat","handler","serializedValue","msg","fill","floor","random","MAX_SAFE_INTEGER","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","m","x","__webpack_exports__","O","queue","d","forEach","fn","a","hasAwait","currentDeps","outerResolve","reject","depQueues","promise","rej","deps","dep","ret","wrapDeps","getResult","fnQueue","q","add","err","result","chunkIds","priority","notFulfilled","Infinity","fulfilled","every","splice","definition","o","defineProperty","enumerable","f","chunkId","all","promises","u","g","Function","window","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","b","self","installedChunks","chunkLoadingGlobal","parentChunkLoadingFunction","moreModules","runtime","pop"],"sourceRoot":""}