{"version":3,"file":"383.bundle.js","mappings":"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","sources":["webpack://aleo-website/./src/workers/worker.js"],"sourcesContent":["import * as aleo from \"@provablehq/sdk\";\n\nawait aleo.initThreadPool();\n\nconst defaultHost = \"https://api.explorer.provable.com/v1\";\nconst keyProvider = new aleo.AleoKeyProvider();\nconst programManager = new aleo.ProgramManager(defaultHost, keyProvider, undefined);\nkeyProvider.useCache(true);\n\nself.postMessage({\n    type: \"ALEO_WORKER_READY\",\n});\n\nlet lastLocalProgram = null;\nself.addEventListener(\"message\", (ev) => {\n    if (ev.data.type === \"ALEO_EXECUTE_PROGRAM_LOCAL\") {\n        const { localProgram, aleoFunction, inputs, privateKey } = ev.data;\n\n        console.log(\"Web worker: Executing function locally...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                const privateKeyObject = aleo.PrivateKey.from_string(privateKey);\n                // Ensure the program is valid and that it contains the function specified\n                const program = programManager.createProgramFromSource(localProgram);\n                const program_id = program.id();\n                if (!program.hasFunction(aleoFunction)) {\n                    throw new Error(`Program ${program_id} does not contain function ${aleoFunction}`);\n                }\n                const cacheKey = `${program_id}:${aleoFunction}`;\n\n                // Get the program imports\n                const imports = programManager.networkClient.getProgramImports(localProgram);\n\n                // Get the proving and verifying keys for the function\n                if (lastLocalProgram !== localProgram) {\n                    const keys = await programManager.synthesizeKeys(localProgram, aleoFunction, inputs, privateKeyObject);\n                    programManager.keyProvider.cacheKeys(cacheKey, keys);\n                    lastLocalProgram = localProgram;\n                }\n\n                // Pass the cache key to the execute function\n                const keyParams = new aleo.AleoKeyProviderParams({\"cacheKey\": cacheKey});\n\n                // Execute the function locally\n                let response = await programManager.run(\n                    localProgram,\n                    aleoFunction,\n                    inputs,\n                    false,\n                    imports,\n                    keyParams,\n                    undefined,\n                    undefined,\n                    privateKeyObject,\n                    undefined\n                );\n\n                // Return the outputs to the main thread\n                console.log(`Web worker: Local execution completed in ${performance.now() - startTime} ms`);\n                const outputs = response.getOutputs();\n                let execution = response.getExecution();\n                if (execution) {\n                    aleo.verifyFunctionExecution(execution, keyProvider.getKeys(cacheKey)[1], program, \"hello\");\n                    execution = execution.toString();\n                    console.log(\"Execution verified successfully: \" + execution);\n                } else {\n                    execution = \"\";\n                }\n\n                console.log(`Function execution response: ${outputs}`);\n                self.postMessage({\n                    type: \"OFFLINE_EXECUTION_COMPLETED\",\n                    outputs: {outputs: outputs, execution: execution}\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_EXECUTE_PROGRAM_ON_CHAIN\") {\n        const {\n            remoteProgram,\n            aleoFunction,\n            inputs,\n            privateKey,\n            fee,\n            privateFee,\n            feeRecord,\n            url,\n        } = ev.data;\n\n        console.log(\"Web worker: Creating execution...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                const privateKeyObject = aleo.PrivateKey.from_string(privateKey)\n                // Ensure the program is valid and that it contains the function specified\n                const program = await programManager.networkClient.getProgramObject(remoteProgram);\n                const program_id = program.id();\n                if (!program.hasFunction(aleoFunction)) {\n                    throw new Error(`Program ${program_id} does not contain function ${aleoFunction}`);\n                }\n\n                // Get the proving and verifying keys for the function\n                const cacheKey = `${program_id}:${aleoFunction}`;\n                if (!programManager.keyProvider.containsKeys(cacheKey)) {\n                    console.log(`Web worker: Synthesizing proving & verifying keys for: '${program_id}:${aleoFunction}'`);\n                    const keys = await programManager.synthesizeKeys(remoteProgram, aleoFunction, inputs, privateKeyObject);\n                    programManager.keyProvider.cacheKeys(cacheKey, keys);\n                }\n\n                // Pass the cache key to the execute function\n                const keyParams = new aleo.AleoKeyProviderParams({\"cacheKey\": cacheKey})\n\n                // Set the host to the provided URL if provided\n                if (typeof url === \"string\") { programManager.setHost(url); }\n                const transaction = await programManager.execute({\n                    programName: program_id,\n                    functionName: aleoFunction,\n                    fee: fee,\n                    privateFee: privateFee,\n                    inputs: inputs,\n                    keySearchParams: keyParams,\n                    feeRecord: feeRecord,\n                    privateKey: privateKeyObject\n                });\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: On-chain execution transaction created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"EXECUTION_TRANSACTION_COMPLETED\",\n                    executeTransaction: transaction,\n                });\n            } catch (error) {\n                console.error(`Error creating execution transaction: ${error}`);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_ESTIMATE_EXECUTION_FEE\") {\n        const { remoteProgram, privateKey, aleoFunction, inputs, url } =\n            ev.data;\n\n        console.log(\"Web worker: Estimating execution fee...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                const privateKeyObject = aleo.PrivateKey.from_string(privateKey);\n                // Ensure the program is valid and that it contains the function specified\n                const program = await programManager.networkClient.getProgramObject(remoteProgram);\n                const program_id = program.id();\n                if (!program.getFunctions().includes(aleoFunction)) {\n                    throw new Error(`Program ${program_id} does not contain function ${aleoFunction}`);\n                }\n                const cacheKey = `${program_id}:${aleoFunction}`;\n                const imports = await programManager.networkClient.getProgramImports(remoteProgram);\n\n                // Get the proving and verifying keys for the function\n                if (!programManager.keyProvider.containsKeys(cacheKey)) {\n                    console.log(`Web worker: Synthesizing proving & verifying keys for: '${program_id}:${aleoFunction}'`);\n                    const keys = await programManager.synthesizeKeys(program.toString(), aleoFunction, inputs, privateKeyObject);\n                    programManager.keyProvider.cacheKeys(cacheKey, keys);\n                }\n\n                // Estimate the execution fee\n                const [provingKey, verifyingKey] = programManager.keyProvider.getKeys(cacheKey);\n                let executeFee = await aleo.ProgramManagerBase.estimateExecutionFee(\n                    privateKeyObject,\n                    remoteProgram,\n                    aleoFunction,\n                    inputs,\n                    url,\n                    imports,\n                    provingKey,\n                    verifyingKey,\n                    undefined\n                );\n\n                // Return the execution fee estimate to the main thread\n                console.log(`Web worker: Execution fee estimated in ${performance.now() - startTime} ms`);\n                console.log(`Execution Fee Estimation: ${executeFee} microcredits`);\n                self.postMessage({\n                    type: \"EXECUTION_FEE_ESTIMATION_COMPLETED\",\n                    executionFee: Number(executeFee) / 1000000 + 0.01,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_ESTIMATE_DEPLOYMENT_FEE\") {\n        const { program, url } = ev.data;\n\n        console.log(\"Web worker: Estimating deployment fee...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                const imports = await programManager.networkClient.getProgramImports(program);\n                console.log(\"Estimating deployment fee..\");\n                let deploymentFee =\n                    await aleo.ProgramManagerBase.estimateDeploymentFee(\n                        program,\n                        imports,\n                    );\n\n                // Return the deployment fee estimate to the main thread\n                console.log(`Web worker: Deployment fee estimation completed in ${performance.now() - startTime} ms`);\n                console.log(`Deployment Fee Estimation: ${deploymentFee} microcredits`);\n                self.postMessage({\n                    type: \"DEPLOYMENT_FEE_ESTIMATION_COMPLETED\",\n                    deploymentFee: Number(deploymentFee) / 1000000 + 0.01,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_TRANSFER\") {\n        const {\n            privateKey,\n            amountCredits,\n            recipient,\n            transfer_type,\n            amountRecord,\n            fee,\n            privateFee,\n            feeRecord,\n            url,\n        } = ev.data;\n\n        console.log(\n            `Web worker: Creating transfer of type ${transfer_type}...`,\n        );\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                // Set the host to the provided URL if provided\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Create the transfer transaction and submit it to the network\n                const transaction = await programManager.transfer(\n                    amountCredits,\n                    recipient,\n                    transfer_type,\n                    fee,\n                    privateFee,\n                    undefined,\n                    amountRecord,\n                    feeRecord,\n                    aleo.PrivateKey.from_string(privateKey),\n                    undefined\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Transfer transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"TRANSFER_TRANSACTION_COMPLETED\",\n                    transferTransaction: transaction,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_DEPLOY\") {\n        const { program, privateKey, fee, privateFee, feeRecord, url } = ev.data;\n\n        console.log(\"Web worker: Creating deployment...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                // Set the network client host if specified\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Check if the program is valid\n                const programObject = programManager.createProgramFromSource(program);\n\n                // Check if the program already exists on the network. If so, throw an error\n                let programExists = false;\n                try {\n                    await programManager.networkClient.getProgram(programObject.id());\n                    programExists = true;\n                } catch (e) {\n                    console.log(\n                        `Program not found on the Aleo Network - proceeding with deployment...`,\n                    );\n                }\n\n                if (programExists) {\n                    throw new Error(`Program ${programObject.id()} already exists on the network`);\n                }\n\n                console.log(\"fee is: \", fee);\n                // Create the deployment transaction and submit it to the network\n                let transaction = await programManager.deploy(\n                    program,\n                    fee,\n                    privateFee,\n                    undefined,\n                    feeRecord,\n                    aleo.PrivateKey.from_string(privateKey),\n                )\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Deployment transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"DEPLOY_TRANSACTION_COMPLETED\",\n                    deployTransaction: transaction,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_SPLIT\") {\n        const { splitAmount, record, privateKey, url } = ev.data;\n\n        console.log(\"Web worker: Creating split...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                // Set the network client host if specified\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Create the split transaction and submit to the network\n                const transaction = await programManager.split(\n                    splitAmount,\n                    record,\n                    aleo.PrivateKey.from_string(privateKey),\n                    undefined\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Split transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"SPLIT_TRANSACTION_COMPLETED\",\n                    splitTransaction: transaction,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_JOIN\") {\n        const { recordOne, recordTwo, fee, privateFee, feeRecord, privateKey, url } =\n            ev.data;\n\n        console.log(\"Web worker: Creating join...\");\n\n        let startTime = performance.now();\n        (async function () {\n\n            try {\n                // Set the network client host if specified\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Create the join transaction and submit it to the network\n                const transaction = await programManager.join(\n                    recordOne,\n                    recordTwo,\n                    fee,\n                    privateFee,\n                    undefined,\n                    feeRecord,\n                    aleo.PrivateKey.from_string(privateKey),\n                    undefined\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Join transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"JOIN_TRANSACTION_COMPLETED\",\n                    joinTransaction: transaction,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    }\n});\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","aleo","defaultHost","keyProvider","programManager","useCache","postMessage","lastLocalProgram","addEventListener","ev","data","_ev$data","localProgram","aleoFunction","inputs","privateKey","console","log","startTime","performance","now","_callee","privateKeyObject","program","program_id","cacheKey","imports","keyParams","response","outputs","execution","_context","from_string","createProgramFromSource","id","hasFunction","concat","networkClient","getProgramImports","synthesizeKeys","cacheKeys","run","getOutputs","getExecution","getKeys","toString","t0","errorMessage","_ev$data2","remoteProgram","fee","privateFee","feeRecord","url","_callee2","transaction","_context2","getProgramObject","containsKeys","setHost","execute","programName","functionName","keySearchParams","executeTransaction","_ev$data3","_callee3","_programManager$keyPr","_programManager$keyPr2","provingKey","verifyingKey","executeFee","_context3","getFunctions","includes","estimateExecutionFee","executionFee","Number","_ev$data4","_callee4","deploymentFee","_context4","estimateDeploymentFee","_ev$data5","amountCredits","recipient","transfer_type","amountRecord","_callee5","_context5","transfer","transferTransaction","_ev$data6","_callee6","programObject","programExists","_context6","getProgram","deploy","deployTransaction","t1","_ev$data7","splitAmount","record","_callee7","_context7","split","splitTransaction","_ev$data8","recordOne","recordTwo","_callee8","_context8","join","joinTransaction"],"sourceRoot":""}