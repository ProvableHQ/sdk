{"version":3,"file":"383.bundle.js","mappings":"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","sources":["webpack://aleo-website/../src/utils.ts","webpack://aleo-website/../src/network-client.ts","webpack://aleo-website/../src/function-key-provider.ts","webpack://aleo-website/../src/program-manager.ts","webpack://aleo-website/../src/index.ts","webpack://aleo-website/./src/workers/worker.js"],"sourcesContent":["export async function get(url: URL | string, options?: RequestInit) {\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not get URL \" + url);\n    }\n\n    return response;\n}\n\n\nexport async function post(url: URL | string, options: RequestInit) {\n    options.method = \"POST\";\n\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not post URL \" + url);\n    }\n\n    return response;\n}\n","import { get, post } from \"./utils\";\nimport {\n  Account,\n  Block,\n  RecordCiphertext,\n  Program,\n  RecordPlaintext,\n  PrivateKey,\n  Transaction,\n  TransactionModel,\n  logAndThrow\n} from \"./index\";\n\ntype ProgramImports = { [key: string]: string | Program };\n\ninterface AleoNetworkClientOptions {\n  headers?: { [key: string]: string };\n}\n\n/**\n * Client library that encapsulates REST calls to publicly exposed endpoints of Aleo nodes. The methods provided in this\n * allow users to query public information from the Aleo blockchain and submit transactions to the network.\n *\n * @param {string} host\n * @example\n * // Connection to a local node\n * const localNetworkClient = new AleoNetworkClient(\"http://localhost:3030\");\n *\n * // Connection to a public beacon node\n * const publicnetworkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n */\nclass AleoNetworkClient {\n  host: string;\n  headers: { [key: string]: string };\n  account: Account | undefined;\n\n  constructor(host: string, options?: AleoNetworkClientOptions) {\n    this.host = host + \"/testnet\";\n\n    if (options && options.headers) {\n      this.headers = options.headers;\n\n    } else {\n      this.headers = {\n        // This is replaced by the actual version by a Rollup plugin\n        \"X-Aleo-SDK-Version\": \"%%VERSION%%\",\n      };\n    }\n  }\n\n  /**\n   * Set an account to use in networkClient calls\n   *\n   * @param {Account} account\n   * @example\n   * const account = new Account();\n   * networkClient.setAccount(account);\n   */\n  setAccount(account: Account) {\n    this.account = account;\n  }\n\n  /**\n   * Return the Aleo account used in the networkClient\n   *\n   * @example\n   * const account = networkClient.getAccount();\n   */\n  getAccount(): Account | undefined {\n    return this.account;\n  }\n\n  /**\n   * Set a new host for the networkClient\n   *\n   * @param {string} host The address of a node hosting the Aleo API\n   * @param host\n   */\n  setHost(host: string) {\n    this.host = host + \"/testnet\";\n  }\n\n  async fetchData<Type>(\n      url = \"/\",\n  ): Promise<Type> {\n    try {\n    const response = await get(this.host + url, {\n      headers: this.headers\n    });\n\n    return await response.json();\n    } catch (error) {\n      throw new Error(\"Error fetching data.\");\n    }\n  }\n\n  /**\n   * Attempts to find unspent records in the Aleo blockchain for a specified private key\n   * @param {number} startHeight - The height at which to start searching for unspent records\n   * @param {number} endHeight - The height at which to stop searching for unspent records\n   * @param {string | PrivateKey} privateKey - The private key to use to find unspent records\n   * @param {number[]} amounts - The amounts (in microcredits) to search for (eg. [100, 200, 3000])\n   * @param {number} maxMicrocredits - The maximum number of microcredits to search for\n   * @param {string[]} nonces - The nonces of already found records to exclude from the search\n   *\n   * @example\n   * // Find all unspent records\n   * const privateKey = \"[PRIVATE_KEY]\";\n   * const records = networkClient.findUnspentRecords(0, undefined, privateKey);\n   *\n   * // Find specific amounts\n   * const startHeight = 500000;\n   * const amounts = [600000, 1000000];\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, amounts);\n   *\n   * // Find specific amounts with a maximum number of cumulative microcredits\n   * const maxMicrocredits = 100000;\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, undefined, maxMicrocredits);\n   */\n  async findUnspentRecords(\n      startHeight: number,\n      endHeight: number | undefined,\n      privateKey: string | PrivateKey | undefined,\n      amounts: number[] | undefined,\n      maxMicrocredits?: number | undefined,\n      nonces?: string[] | undefined,\n  ): Promise<Array<RecordPlaintext> | Error> {\n    nonces = nonces || [];\n    // Ensure start height is not negative\n    if (startHeight < 0) {\n      throw new Error(\"Start height must be greater than or equal to 0\");\n    }\n\n    // Initialize search parameters\n    const records = new Array<RecordPlaintext>();\n    let start;\n    let end;\n    let resolvedPrivateKey: PrivateKey;\n    let failures = 0;\n    let totalRecordValue = BigInt(0);\n    let latestHeight: number;\n\n    // Ensure a private key is present to find owned records\n    if (typeof privateKey === \"undefined\") {\n      if (typeof this.account === \"undefined\") {\n        throw new Error(\"Private key must be specified in an argument to findOwnedRecords or set in the AleoNetworkClient\");\n      } else {\n        resolvedPrivateKey = this.account._privateKey;\n      }\n    } else {\n      try {\n        resolvedPrivateKey = privateKey instanceof PrivateKey ? privateKey : PrivateKey.from_string(privateKey);\n      } catch (error) {\n        throw new Error(\"Error parsing private key provided.\");\n      }\n    }\n    const viewKey = resolvedPrivateKey.to_view_key();\n\n    // Get the latest height to ensure the range being searched is valid\n    try {\n      const blockHeight = await this.getLatestHeight();\n      if (typeof blockHeight === \"number\") {\n        latestHeight = blockHeight;\n      } else {\n        throw new Error(\"Error fetching latest block height.\");\n      }\n    } catch (error) {\n      throw new Error(\"Error fetching latest block height.\");\n    }\n\n    // If no end height is specified or is greater than the latest height, set the end height to the latest height\n    if (typeof endHeight === \"number\" && endHeight <= latestHeight) {\n      end = endHeight\n    } else {\n      end = latestHeight;\n    }\n\n    // If the starting is greater than the ending height, return an error\n    if (startHeight > end) {\n      throw new Error(\"Start height must be less than or equal to end height.\");\n    }\n\n    // Iterate through blocks in reverse order in chunks of 50\n    while (end > startHeight) {\n      start = end - 50;\n      if (start < startHeight) {\n        start = startHeight;\n      }\n      try {\n        // Get 50 blocks (or the difference between the start and end if less than 50)\n        const blocks = await this.getBlockRange(start, end);\n        end = start;\n        if (!(blocks instanceof Error)) {\n          // Iterate through blocks to find unspent records\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const transactions = block.transactions;\n            if (!(typeof transactions === \"undefined\")) {\n              for (let j = 0; j < transactions.length; j++) {\n                const confirmedTransaction = transactions[j];\n                // Search for unspent records in execute transactions of credits.aleo\n                if (confirmedTransaction.type == \"execute\") {\n                  const transaction = confirmedTransaction.transaction;\n                  if (transaction.execution && !(typeof transaction.execution.transitions == \"undefined\")) {\n                    for (let k = 0; k < transaction.execution.transitions.length; k++) {\n                      const transition = transaction.execution.transitions[k];\n                      // Only search for unspent records in credits.aleo (for now)\n                      if (transition.program !== \"credits.aleo\") {\n                        continue;\n                      }\n                      if (!(typeof transition.outputs == \"undefined\")) {\n                        for (let l = 0; l < transition.outputs.length; l++) {\n                          const output = transition.outputs[l];\n                          if (output.type === \"record\") {\n                            try {\n                              // Create a wasm record ciphertext object from the found output\n                              const record = RecordCiphertext.fromString(output.value);\n                              // Determine if the record is owned by the specified view key\n                              if (record.isOwner(viewKey)) {\n                                // Decrypt the record and get the serial number\n                                const recordPlaintext = record.decrypt(viewKey);\n\n                                // If the record has already been found, skip it\n                                const nonce = recordPlaintext.nonce();\n                                if (nonces.includes(nonce)) {\n                                  continue;\n                                }\n\n                                // Otherwise record the nonce that has been found\n                                const serialNumber = recordPlaintext.serialNumberString(resolvedPrivateKey, \"credits.aleo\", \"credits\");\n                                // Attempt to see if the serial number is spent\n                                try {\n                                  await this.getTransitionId(serialNumber);\n                                } catch (error) {\n                                  // If it's not found, add it to the list of unspent records\n                                  if (!amounts) {\n                                    records.push(recordPlaintext);\n                                    // If the user specified a maximum number of microcredits, check if the search has found enough\n                                    if (typeof maxMicrocredits === \"number\") {\n                                      totalRecordValue += recordPlaintext.microcredits();\n                                      // Exit if the search has found the amount specified\n                                      if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                        return records;\n                                      }\n                                    }\n                                  }\n                                  // If the user specified a list of amounts, check if the search has found them\n                                  if (!(typeof amounts === \"undefined\") && amounts.length > 0) {\n                                    let amounts_found = 0;\n                                    if (recordPlaintext.microcredits() > amounts[amounts_found]) {\n                                        amounts_found += 1;\n                                        records.push(recordPlaintext);\n                                        // If the user specified a maximum number of microcredits, check if the search has found enough\n                                        if (typeof maxMicrocredits === \"number\") {\n                                          totalRecordValue += recordPlaintext.microcredits();\n                                          // Exit if the search has found the amount specified\n                                          if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                            return records;\n                                          }\n                                        }\n                                        if (records.length >= amounts.length) {\n                                          return records;\n                                        }\n                                    }\n                                  }\n                                }\n                              }\n                            } catch (error) {\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // If there is an error fetching blocks, log it and keep searching\n        console.warn(\"Error fetching blocks in range: \" + start.toString() + \"-\" + end.toString());\n        console.warn(\"Error: \", error);\n        failures += 1;\n        if (failures > 10) {\n          console.warn(\"10 failures fetching records reached. Returning records fetched so far\");\n          return records;\n        }\n      }\n    }\n    return records;\n  }\n\n  /**\n   * Returns the contents of the block at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const block = networkClient.getBlock(1234);\n   */\n  async getBlock(height: number): Promise<Block | Error> {\n    try {\n      const block = await this.fetchData<Block>(\"/block/\" + height);\n      return block;\n    } catch (error) {\n      throw new Error(\"Error fetching block.\");\n    }\n  }\n\n  /**\n   * Returns a range of blocks between the specified block heights\n   *\n   * @param {number} start\n   * @param {number} end\n   * @example\n   * const blockRange = networkClient.getBlockRange(2050, 2100);\n   */\n  async getBlockRange(start: number, end: number): Promise<Array<Block> | Error> {\n    try {\n      return await this.fetchData<Array<Block>>(\"/blocks?start=\" + start + \"&end=\" + end);\n    } catch (error) {\n      const errorMessage = \"Error fetching blocks between \" + start + \" and \" + end + \".\"\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Returns the deployment transaction id associated with the specified program\n   *\n   * @param {Program | string} program\n   * @returns {TransactionModel | Error}\n   */\n  async getDeploymentTransactionIDForProgram(program: Program | string): Promise<string | Error> {\n    if (program instanceof Program) {\n      program = program.toString();\n    }\n    try {\n      const id = await this.fetchData<string>(\"/find/transactionID/deployment/\" + program);\n      return id.replace(\"\\\"\", \"\")\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the deployment transaction associated with a specified program\n   *\n   * @param {Program | string} program\n   * @returns {TransactionModel | Error}\n   */\n  async getDeploymentTransactionForProgram(program: Program | string): Promise<TransactionModel | Error> {\n    try {\n      const transaction_id = <string>await this.getDeploymentTransactionIDForProgram(program);\n      return <TransactionModel>await this.getTransaction(transaction_id);\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the contents of the latest block\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestBlock();\n   */\n  async getLatestBlock(): Promise<Block | Error> {\n    try {\n      return await this.fetchData<Block>(\"/latest/block\") as Block;\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest committee\n   *\n   * @returns {Promise<object>} A javascript object containing the latest committee\n   */\n  async getLatestCommittee(): Promise<object | Error> {\n    try {\n      return await this.fetchData<object>(\"/committee/latest\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest block height\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestHeight();\n   */\n  async getLatestHeight(): Promise<number | Error> {\n    try {\n      return await this.fetchData<number>(\"/latest/height\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest height.\");\n    }\n  }\n\n  /**\n   * Returns the source code of a program given a program ID\n   *\n   * @param {string} programId The program ID of a program deployed to the Aleo Network\n   * @return {Promise<string>} Source code of the program\n   *\n   * @example\n   * const program = networkClient.getProgram(\"hello_hello.aleo\");\n   * const expectedSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * assert.equal(program, expectedSource);\n   */\n  async getProgram(programId: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId)\n    } catch (error) {\n      throw new Error(\"Error fetching program\");\n    }\n  }\n\n  /**\n   * Returns a program object from a program ID or program source code\n   *\n   * @param {string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @return {Promise<Program | Error>} Source code of the program\n   *\n   * @example\n   * const programID = \"hello_hello.aleo\";\n   * const programSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   *\n   * // Get program object from program ID or program source code\n   * const programObjectFromID = await networkClient.getProgramObject(programID);\n   * const programObjectFromSource = await networkClient.getProgramObject(programSource);\n   *\n   * // Both program objects should be equal\n   * assert.equal(programObjectFromID.to_string(), programObjectFromSource.to_string());\n   */\n  async getProgramObject(inputProgram: string): Promise<Program | Error> {\n    try {\n      return Program.fromString(inputProgram);\n    } catch (error) {\n      try {\n        return Program.fromString(<string>(await this.getProgram(inputProgram)));\n      } catch (error) {\n        throw new Error(`${inputProgram} is neither a program name or a valid program`);\n      }\n    }\n  }\n\n  /**\n   *  Returns an object containing the source code of a program and the source code of all programs it imports\n   *\n   * @param {Program | string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @returns {Promise<ProgramImports>} Object of the form { \"program_id\": \"program_source\", .. } containing program id & source code for all program imports\n   *\n   * @example\n   * const double_test_source = \"import multiply_test.aleo;\\n\\nprogram double_test.aleo;\\n\\nfunction double_it:\\n    input r0 as u32.private;\\n    call multiply_test.aleo/multiply 2u32 r0 into r1;\\n    output r1 as u32.private;\\n\"\n   * const double_test = Program.fromString(double_test_source);\n   * const expectedImports = {\n   *     \"multiply_test.aleo\": \"program multiply_test.aleo;\\n\\nfunction multiply:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    mul r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * }\n   *\n   * // Imports can be fetched using the program ID, source code, or program object\n   * let programImports = await networkClient.getProgramImports(\"double_test.aleo\");\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program source code\n   * programImports = await networkClient.getProgramImports(double_test_source);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program object\n   * programImports = await networkClient.getProgramImports(double_test);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   */\n  async getProgramImports(inputProgram: Program | string): Promise<ProgramImports | Error> {\n    try {\n      const imports: ProgramImports = {};\n\n      // Get the program object or fail if the program is not valid or does not exist\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n\n      // Get the list of programs that the program imports\n      const importList = program.getImports();\n\n      // Recursively get any imports that the imported programs have in a depth first search order\n      for (let i = 0; i < importList.length; i++) {\n        const import_id = importList[i];\n        if (!imports.hasOwnProperty(import_id)) {\n          const programSource = <string>await this.getProgram(import_id);\n          const nestedImports = <ProgramImports>await this.getProgramImports(import_id);\n          for (const key in nestedImports) {\n            if (!imports.hasOwnProperty(key)) {\n              imports[key] = nestedImports[key];\n            }\n          }\n          imports[import_id] = programSource;\n        }\n      }\n      return imports;\n    } catch (error) {\n      throw logAndThrow(\"Error fetching program imports: \" + error)\n    }\n  }\n\n  /**\n   * Get a list of the program names that a program imports\n   *\n   * @param {Program | string} inputProgram - The program id or program source code to get the imports of\n   * @returns {string[]} - The list of program names that the program imports\n   *\n   * @example\n   * const programImportsNames = networkClient.getProgramImports(\"double_test.aleo\");\n   * const expectedImportsNames = [\"multiply_test.aleo\"];\n   * assert.deepStrictEqual(programImportsNames, expectedImportsNames);\n   */\n  async getProgramImportNames(inputProgram: Program | string): Promise<string[] | Error> {\n    try {\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n      return program.getImports();\n    } catch (error) {\n      throw new Error(\"Error fetching program imports with error: \" + error);\n    }\n  }\n\n  /**\n   * Returns the names of the mappings of a program\n   *\n   * @param {string} programId - The program ID to get the mappings of (e.g. \"credits.aleo\")\n   * @example\n   * const mappings = networkClient.getProgramMappingNames(\"credits.aleo\");\n   * const expectedMappings = [\"account\"];\n   * assert.deepStrictEqual(mappings, expectedMappings);\n   */\n  async getProgramMappingNames(programId: string): Promise<Array<string> | Error> {\n    try {\n      return await this.fetchData<Array<string>>(\"/program/\" + programId + \"/mappings\")\n    } catch (error) {\n      throw new Error(\"Error fetching program mappings - ensure the program exists on chain before trying again\");\n    }\n  }\n\n  /**\n   * Returns the value of a program's mapping for a specific key\n   *\n   * @param {string} programId - The program ID to get the mapping value of (e.g. \"credits.aleo\")\n   * @param {string} mappingName - The name of the mapping to get the value of (e.g. \"account\")\n   * @param {string} key - The key of the mapping to get the value of (e.g. \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\")\n   * @return {Promise<string>} String representation of the value of the mapping\n   *\n   * @example\n   * // Get public balance of an account\n   * const mappingValue = networkClient.getMappingValue(\"credits.aleo\", \"account\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\");\n   * const expectedValue = \"0u64\";\n   * assert.equal(mappingValue, expectedValue);\n   */\n  async getProgramMappingValue(programId: string, mappingName: string, key: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId + \"/mapping/\" + mappingName + \"/\" + key)\n    } catch (error) {\n      throw new Error(\"Error fetching mapping value - ensure the mapping exists and the key is correct\");\n    }\n  }\n\n  /**\n   * Returns the latest state/merkle root of the Aleo blockchain\n   *\n   * @example\n   * const stateRoot = networkClient.getStateRoot();\n   */\n  async getStateRoot(): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/latest/stateRoot\");\n    } catch (error) {\n      throw new Error(\"Error fetching Aleo state root\");\n    }\n  }\n\n  /**\n   * Returns a transaction by its unique identifier\n   *\n   * @param {string} id\n   * @example\n   * const transaction = networkClient.getTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n   */\n  async getTransaction(id: string): Promise<TransactionModel | Error> {\n    try {\n    return await this.fetchData<TransactionModel>(\"/transaction/\" + id);\n    } catch (error) {\n      throw new Error(\"Error fetching transaction.\");\n    }\n  }\n\n  /**\n   * Returns the transactions present at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const transactions = networkClient.getTransactions(654);\n   */\n  async getTransactions(height: number): Promise<Array<TransactionModel> | Error> {\n    try {\n    return await this.fetchData<Array<TransactionModel>>(\"/block/\" + height.toString() + \"/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions.\");\n    }\n  }\n\n  /**\n   * Returns the transactions in the memory pool.\n   *\n   * @example\n   * const transactions = networkClient.getTransactionsInMempool();\n   */\n  async getTransactionsInMempool(): Promise<Array<TransactionModel> | Error> {\n    try {\n      return await this.fetchData<Array<TransactionModel>>(\"/memoryPool/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions from mempool.\");\n    }\n  }\n\n  /**\n   * Returns the transition ID of the transition corresponding to the ID of the input or output.\n   * @param {string} inputOrOutputID - ID of the input or output.\n   *\n   * @example\n   * const transitionId = networkClient.getTransitionId(\"2429232855236830926144356377868449890830704336664550203176918782554219952323field\");\n   */\n  async getTransitionId(inputOrOutputID: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/find/transitionID/\" + inputOrOutputID);\n    } catch (error) {\n      throw new Error(\"Error fetching transition ID.\");\n    }\n  }\n\n  /**\n   * Submit an execute or deployment transaction to the Aleo network\n   *\n   * @param {Transaction | string} transaction  - The transaction to submit to the network\n   * @returns {string | Error} - The transaction id of the submitted transaction or the resulting error\n   */\n  async submitTransaction(transaction: Transaction | string): Promise<string | Error> {\n    const transaction_string = transaction instanceof Transaction ? transaction.toString() : transaction;\n    try {\n      const response = await post(this.host + \"/transaction/broadcast\", {\n        body: transaction_string,\n        headers: Object.assign({}, this.headers, {\n          \"Content-Type\": \"application/json\",\n        }),\n      });\n\n      try {\n        return await response.json();\n\n      } catch (error) {\n        throw new Error(`Error posting transaction. Aleo network response: ${(error as Error).message}`);\n      }\n    } catch (error) {\n      throw new Error(`Error posting transaction: No response received: ${(error as Error).message}`);\n    }\n  }\n}\n\nexport { AleoNetworkClient, AleoNetworkClientOptions, ProgramImports }\n","import {\n    ProvingKey,\n    VerifyingKey,\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    Key,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PUBLIC_TRANSFER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    PUBLIC_TRANSFER_AS_SIGNER\n} from \"./index\";\nimport { get } from \"./utils\";\n\ntype FunctionKeyPair = [ProvingKey, VerifyingKey];\ntype CachedKeyPair = [Uint8Array, Uint8Array];\ntype AleoKeyProviderInitParams = {\n    proverUri?: string;\n    verifierUri?: string;\n    cacheKey?: string;\n};\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface KeySearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * AleoKeyProviderParams search parameter for the AleoKeyProvider. It allows for the specification of a proverUri and\n * verifierUri to fetch keys via HTTP from a remote resource as well as a unique cacheKey to store the keys in memory.\n */\nclass AleoKeyProviderParams implements KeySearchParams {\n    name: string | undefined;\n    proverUri: string | undefined;\n    verifierUri: string | undefined;\n    cacheKey: string | undefined;\n\n    /**\n     * Create a new AleoKeyProviderParams object which implements the KeySearchParams interface. Users can optionally\n     * specify a url for the proverUri & verifierUri to fetch keys via HTTP from a remote resource as well as a unique\n     * cacheKey to store the keys in memory for future use. If no proverUri or verifierUri is specified, a cachekey must\n     * be provided.\n     *\n     * @param { AleoKeyProviderInitParams } params - Optional search parameters\n     */\n    constructor(params: {proverUri?: string, verifierUri?: string, cacheKey?: string, name?: string}) {\n        this.proverUri = params.proverUri;\n        this.verifierUri = params.verifierUri;\n        this.cacheKey = params.cacheKey;\n        this.name = params.name;\n    }\n}\n\n/**\n * KeyProvider interface. Enables the retrieval of public proving and verifying keys for Aleo Programs.\n */\ninterface FunctionKeyProvider {\n    /**\n     * Get bond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the bond_public function\n     */\n    bondPublicKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get bond_validator function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the bond_validator function\n     */\n    bondValidatorKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void;\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the unbond_public function\n     */\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a search object which implements the KeySearchParams interface\n     * class IndexDbSearch implements KeySearchParams {\n     *     db: string\n     *     keyId: string\n     *     constructor(params: {db: string, keyId: string}) {\n     *         this.db = params.db;\n     *         this.keyId = params.keyId;\n     *     }\n     * }\n     *\n     * // Create a new object which implements the KeyProvider interface\n     * class IndexDbKeyProvider implements FunctionKeyProvider {\n     *     async functionKeys(params: KeySearchParams): Promise<FunctionKeyPair | Error> {\n     *         return new Promise((resolve, reject) => {\n     *             const request = indexedDB.open(params.db, 1);\n     *\n     *             request.onupgradeneeded = function(e) {\n     *                 const db = e.target.result;\n     *                 if (!db.objectStoreNames.contains('keys')) {\n     *                     db.createObjectStore('keys', { keyPath: 'id' });\n     *                 }\n     *             };\n     *\n     *             request.onsuccess = function(e) {\n     *                 const db = e.target.result;\n     *                 const transaction = db.transaction([\"keys\"], \"readonly\");\n     *                 const store = transaction.objectStore(\"keys\");\n     *                 const request = store.get(params.keyId);\n     *                 request.onsuccess = function(e) {\n     *                     if (request.result) {\n     *                         resolve(request.result as FunctionKeyPair);\n     *                     } else {\n     *                         reject(new Error(\"Key not found\"));\n     *                     }\n     *                 };\n     *                 request.onerror = function(e) { reject(new Error(\"Error fetching key\")); };\n     *             };\n     *\n     *             request.onerror = function(e) { reject(new Error(\"Error opening database\")); };\n     *         });\n     *     }\n     *\n     *     // implement the other methods...\n     * }\n     *\n     *\n     * const keyProvider = new AleoKeyProvider();\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const searchParams = new IndexDbSearch({db: \"keys\", keyId: \"credits.aleo:transferPrivate\"});\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(searchParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_private function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get join function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get split function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    unBondPublicKeys(): Promise<FunctionKeyPair | Error>;\n\n}\n\n\n/**\n * AleoKeyProvider class. Implements the KeyProvider interface. Enables the retrieval of Aleo program proving and\n * verifying keys for the credits.aleo program over http from official Aleo sources and storing and retrieving function\n * keys from a local memory cache.\n */\nclass AleoKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n    cacheOption: boolean;\n    keyUris: string;\n\n    async fetchBytes(\n        url = \"/\",\n    ): Promise<Uint8Array> {\n        try {\n        const response = await get(url);\n        const data = await response.arrayBuffer();\n        return new Uint8Array(data);\n        } catch (error) {\n            throw new Error(\"Error fetching data.\" + error);\n        }\n    }\n\n    constructor() {\n        this.keyUris = KEY_STORE;\n        this.cache = new Map<string, CachedKeyPair>();\n        this.cacheOption = false;\n    }\n\n    /**\n     * Use local memory to store keys\n     *\n     * @param {boolean} useCache whether to store keys in local memory\n     */\n    useCache(useCache: boolean) {\n        this.cacheOption = useCache;\n    }\n\n    /**\n     * Clear the key cache\n     */\n    clearCache() {\n        this.cache.clear();\n    }\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair) {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    }\n\n    /**\n     * Determine if a keyId exists in the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair\n     * @returns {boolean} true if the keyId exists in the cache, false otherwise\n     */\n    containsKeys(keyId: string): boolean {\n        return this.cache.has(keyId)\n    }\n\n    /**\n     * Delete a set of keys from the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair to delete from memory\n     * @returns {boolean} true if the keyId exists in the cache and was deleted, false if the key did not exist\n     */\n    deleteKeys(keyId: string): boolean {\n        return this.cache.delete(keyId)\n    }\n\n    /**\n     * Get a set of keys from the cache\n     * @param keyId keyId of a proving and verifying key pair\n     *\n     * @returns {FunctionKeyPair | Error} Proving and verifying keys for the specified program\n     */\n    getKeys(keyId: string): FunctionKeyPair | Error {\n        console.debug(`Checking if key exists in cache. KeyId: ${keyId}`)\n        if (this.cache.has(keyId)) {\n            const [provingKeyBytes, verifyingKeyBytes] = <CachedKeyPair>this.cache.get(keyId);\n            return [ProvingKey.fromBytes(provingKeyBytes), VerifyingKey.fromBytes(verifyingKeyBytes)];\n        } else {\n            return new Error(\"Key not found in cache.\");\n        }\n    }\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams} params parameters for the key search in form of: {proverUri: string, verifierUri: string, cacheKey: string}\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually using the key provider\n     * const keySearchParams = { \"cacheKey\": \"myProgram:myFunction\" };\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(keySearchParams);\n     */\n    async functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error> {\n        if (params) {\n            let proverUrl;\n            let verifierUrl;\n            let cacheKey;\n            if (\"name\" in params && typeof params[\"name\"] == \"string\") {\n                let key = CREDITS_PROGRAM_KEYS.getKey(params[\"name\"]);\n                if (!(key instanceof Error)) {\n                    return this.fetchCreditsKeys(key);\n                }\n            }\n\n            if (\"proverUri\" in params && typeof params[\"proverUri\"] == \"string\") {\n                proverUrl = params[\"proverUri\"];\n            }\n\n            if (\"verifierUri\" in params && typeof params[\"verifierUri\"] == \"string\") {\n                verifierUrl = params[\"verifierUri\"];\n            }\n\n            if (\"cacheKey\" in params && typeof params[\"cacheKey\"] == \"string\") {\n                cacheKey = params[\"cacheKey\"];\n            }\n\n            if (proverUrl && verifierUrl) {\n                return await this.fetchRemoteKeys(proverUrl, verifierUrl, cacheKey);\n            }\n\n            if (cacheKey) {\n                return this.getKeys(cacheKey);\n            }\n        }\n        throw Error(\"Invalid parameters provided, must provide either a cacheKey and/or a proverUrl and a verifierUrl\");\n    }\n\n    /**\n     * Returns the proving and verifying keys for a specified program from a specified url.\n     *\n     * @param {string} verifierUrl Url of the proving key\n     * @param {string} proverUrl Url the verifying key\n     * @param {string} cacheKey Key to store the keys in the cache\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new AleoKeyProvider object\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.fetchKeys(\n     *     CREDITS_PROGRAM_KEYS.transfer_private.prover,\n     *     CREDITS_PROGRAM_KEYS.transfer_private.verifier,\n     * );\n     */\n    async fetchRemoteKeys(proverUrl: string, verifierUrl: string, cacheKey?: string): Promise<FunctionKeyPair | Error> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return [ProvingKey.fromBytes(value[0]), VerifyingKey.fromBytes(value[1])];\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                    console.debug(\"Fetching verifying keys \" + verifierUrl);\n                    const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                    this.cache.set(cacheKey, [provingKey.toBytes(), verifyingKey.toBytes()]);\n                    return [provingKey, verifyingKey];\n                }\n            }\n            else {\n                // If cache is disabled, fetch the keys and return them\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                return [provingKey, verifyingKey];\n            }\n        } catch (error) {\n            throw new Error(`Error: ${error} fetching fee proving and verifying keys from ${proverUrl} and ${verifierUrl}.`);\n        }\n    }\n\n    /***\n     * Fetches the proving key from a remote source.\n     *\n     * @param proverUrl\n     * @param cacheKey\n     *\n     * @returns {Promise<ProvingKey | Error>} Proving key for the specified program\n     */\n    async fetchProvingKey(proverUrl: string, cacheKey?: string): Promise<ProvingKey | Error> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return ProvingKey.fromBytes(value[0]);\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl));\n                    return provingKey;\n                }\n            }\n            else {\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl));\n                return provingKey;\n            }\n        } catch (error) {\n            throw new Error(`Error: ${error} fetching fee proving keys from ${proverUrl}`);\n        }\n    }\n\n    async fetchCreditsKeys(key: Key): Promise<FunctionKeyPair | Error> {\n        try {\n            if (!this.cache.has(key.locator) || !this.cacheOption) {\n                const verifying_key = key.verifyingKey()\n                const proving_key = <ProvingKey>await this.fetchProvingKey(key.prover, key.locator);\n                if (this.cacheOption) {\n                    this.cache.set(CREDITS_PROGRAM_KEYS.bond_public.locator, [proving_key.toBytes(), verifying_key.toBytes()]);\n                }\n                return [proving_key, verifying_key];\n            } else {\n                const keyPair = <CachedKeyPair>this.cache.get(key.locator);\n                return [ProvingKey.fromBytes(keyPair[0]), VerifyingKey.fromBytes(keyPair[1])];\n            }\n        } catch (error) {\n            throw new Error(`Error: fetching credits.aleo keys: ${error}`);\n        }\n    }\n\n    async bondPublicKeys(): Promise<FunctionKeyPair | Error> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.bond_public);\n    }\n\n    bondValidatorKeys(): Promise<FunctionKeyPair | Error> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.bond_validator);\n    }\n\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair | Error> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.claim_unbond_public)\n    }\n\n    /**\n     * Returns the proving and verifying keys for the transfer functions in the credits.aleo program\n     * @param {string} visibility Visibility of the transfer function\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the transfer functions\n     *\n     * @example\n     * // Create a new AleoKeyProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    async transferKeys(visibility: string): Promise<FunctionKeyPair | Error> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_private);\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_private_to_public);\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public);\n        } else if (PUBLIC_TRANSFER_AS_SIGNER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public_as_signer);\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public_to_private);\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the join function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    async joinKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.join);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the split function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the split function\n     * */\n    async splitKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.split);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_private function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePrivateKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.fee_private);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_public function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePublicKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.fee_public);\n    }\n\n    /**\n     * Gets a verifying key. If the verifying key is for a credits.aleo function, get it from the wasm cache otherwise\n     *\n     * @returns {Promise<VerifyingKey | Error>} Verifying key for the function\n     */\n    // attempt to fetch it from the network\n    async getVerifyingKey(verifierUri: string): Promise<VerifyingKey | Error> {\n        switch (verifierUri) {\n            case CREDITS_PROGRAM_KEYS.bond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.bond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.bond_validator.verifier:\n                return CREDITS_PROGRAM_KEYS.bond_validator.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.claim_unbond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_private.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_public.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.inclusion.verifier:\n                return CREDITS_PROGRAM_KEYS.inclusion.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.join.verifier:\n                return CREDITS_PROGRAM_KEYS.join.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.set_validator_state.verifier:\n                return CREDITS_PROGRAM_KEYS.set_validator_state.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.split.verifier:\n                return CREDITS_PROGRAM_KEYS.split.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public_as_signer.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public_as_signer.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.unbond_public.verifyingKey();\n            default:\n                try {\n                    /// Try to fetch the verifying key from the network as a string\n                    const response = await get(verifierUri);\n                    const text = await response.text();\n                    return <VerifyingKey>VerifyingKey.fromString(text);\n                } catch (e) {\n                    /// If that fails, try to fetch the verifying key from the network as bytes\n                    try {\n                    return <VerifyingKey>VerifyingKey.fromBytes(await this.fetchBytes(verifierUri));\n                    } catch (inner) {\n                        return new Error(\"Invalid verifying key. Error: \" + inner);\n                    }\n                }\n        }\n    }\n\n    unBondPublicKeys(): Promise<FunctionKeyPair | Error> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.unbond_public);\n    }\n}\n\nexport {AleoKeyProvider, AleoKeyProviderParams, AleoKeyProviderInitParams, CachedKeyPair, FunctionKeyPair, FunctionKeyProvider, KeySearchParams}\n","import {\n    Account,\n    AleoKeyProvider,\n    AleoNetworkClient,\n    ExecutionResponse,\n    FunctionKeyProvider,\n    FunctionKeyPair,\n    OfflineQuery,\n    KeySearchParams,\n    RecordPlaintext,\n    RecordProvider,\n    RecordSearchParams,\n    PrivateKey,\n    Program,\n    ProgramImports,\n    ProvingKey,\n    VerifyingKey,\n    Transaction,\n    PRIVATE_TRANSFER_TYPES,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n    ProgramManagerBase as WasmProgramManager, verifyFunctionExecution, AleoKeyProviderParams, CREDITS_PROGRAM_KEYS,\n} from \"./index\";\nimport {Execution} from \"@provablehq/wasm/dist/crates/aleo_wasm\";\n\n/**\n * Represents the options for executing a transaction in the Aleo network.\n * This interface is used to specify the parameters required for building and submitting an execution transaction.\n *\n * @property {string} programName - The name of the program containing the function to be executed.\n * @property {string} functionName - The name of the function to execute within the program.\n * @property {number} fee - The fee to be paid for the transaction.\n * @property {boolean} privateFee - If true, uses a private record to pay the fee; otherwise, uses the account's public credit balance.\n * @property {string[]} inputs - The inputs to the function being executed.\n * @property {RecordSearchParams} [recordSearchParams] - Optional parameters for searching for a record to pay the execution transaction fee.\n * @property {KeySearchParams} [keySearchParams] - Optional parameters for finding the matching proving & verifying keys for the function.\n * @property {string | RecordPlaintext} [feeRecord] - Optional fee record to use for the transaction.\n * @property {ProvingKey} [provingKey] - Optional proving key to use for the transaction.\n * @property {VerifyingKey} [verifyingKey] - Optional verifying key to use for the transaction.\n * @property {PrivateKey} [privateKey] - Optional private key to use for the transaction.\n * @property {OfflineQuery} [offlineQuery] - Optional offline query if creating transactions in an offline environment.\n * @property {string | Program} [program] - Optional program source code to use for the transaction.\n * @property {ProgramImports} [imports] - Optional programs that the program being executed imports.\n */\ninterface ExecuteOptions {\n    programName: string;\n    functionName: string;\n    fee: number;\n    privateFee: boolean;\n    inputs: string[];\n    recordSearchParams?: RecordSearchParams;\n    keySearchParams?: KeySearchParams;\n    feeRecord?: string | RecordPlaintext;\n    provingKey?: ProvingKey;\n    verifyingKey?: VerifyingKey;\n    privateKey?: PrivateKey;\n    offlineQuery?: OfflineQuery;\n    program?: string | Program;\n    imports?: ProgramImports;\n}\n\n/**\n * The ProgramManager class is used to execute and deploy programs on the Aleo network and create value transfers.\n */\nclass ProgramManager {\n    account: Account | undefined;\n    keyProvider: FunctionKeyProvider;\n    host: string;\n    networkClient: AleoNetworkClient;\n    recordProvider: RecordProvider | undefined;\n\n    /** Create a new instance of the ProgramManager\n     *\n     * @param { string | undefined } host A host uri running the official Aleo API\n     * @param { FunctionKeyProvider | undefined } keyProvider A key provider that implements {@link FunctionKeyProvider} interface\n     * @param { RecordProvider | undefined } recordProvider A record provider that implements {@link RecordProvider} interface\n     */\n    constructor(host?: string | undefined, keyProvider?: FunctionKeyProvider | undefined, recordProvider?: RecordProvider | undefined) {\n        this.host = host ? host : 'https://api.explorer.aleo.org/v1';\n        this.networkClient = new AleoNetworkClient(this.host);\n        \n        this.keyProvider = keyProvider ? keyProvider : new AleoKeyProvider();\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Set the account to use for transaction submission to the Aleo network\n     *\n     * @param {Account} account Account to use for transaction submission\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Set the key provider that provides the proving and verifying keys for programs\n     *\n     * @param {FunctionKeyProvider} keyProvider\n     */\n    setKeyProvider(keyProvider: FunctionKeyProvider) {\n        this.keyProvider = keyProvider;\n    }\n\n    /**\n     * Set the host peer to use for transaction submission to the Aleo network\n     *\n     * @param host {string} Peer url to use for transaction submission\n     */\n    setHost(host: string) {\n        this.host = host;\n        this.networkClient.setHost(host);\n    }\n\n    /**\n     * Set the record provider that provides records for transactions\n     *\n     * @param {RecordProvider} recordProvider\n     */\n    setRecordProvider(recordProvider: RecordProvider) {\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Deploy an Aleo program to the Aleo network\n     *\n     * @param {string} program Program source code\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for searching for a record to use\n     * pay the deployment fee\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {string | Error} The transaction id of the deployed program or a failure message from the network\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for deployments\n     * const program = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     *\n     * // Define a fee in credits\n     * const fee = 1.2;\n     *\n     * // Deploy the program\n     * const tx_id = await programManager.deploy(program, fee);\n     *\n     * // Verify the transaction was successful\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async deploy(\n        program: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        feeRecord?: string | RecordPlaintext,\n        privateKey?: PrivateKey,\n    ): Promise<string | Error> {\n        // Ensure the program is valid and does not exist on the network\n        try {\n            const programObject = Program.fromString(program);\n            let programSource;\n            try {\n                programSource = await this.networkClient.getProgram(programObject.id());\n            } catch (e) {\n                // Program does not exist on the network, deployment can proceed\n                console.log(`Program ${programObject.id()} does not exist on the network, deploying...`);\n            }\n            if (typeof programSource == \"string\") {\n                throw (`Program ${programObject.id()} already exists on the network, please rename your program`);\n            }\n        } catch (e) {\n            throw logAndThrow(`Error validating program: ${e}`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let deploymentPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            deploymentPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof deploymentPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n        } catch (e) {\n            throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build a deployment transaction and submit it to the network\n        const tx = await WasmProgramManager.buildDeploymentTransaction(deploymentPrivateKey, program, fee, feeRecord, this.host, imports, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<Transaction | Error>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const transaction = await programManager.buildExecutionTransaction({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   fee: 0.020,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async buildExecutionTransaction(options: ExecuteOptions): Promise<Transaction | Error> {\n        // Destructure the options object to access the parameters\n        const {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            recordSearchParams,\n            keySearchParams,\n            privateKey,\n            offlineQuery\n        } = options;\n\n        let feeRecord = options.feeRecord;\n        let provingKey = options.provingKey;\n        let verifyingKey = options.verifyingKey;\n        let program = options.program;\n        let imports = options.imports;\n\n        // Ensure the function exists on the network\n        if (program === undefined) {\n            try {\n                program = <string>(await this.networkClient.getProgram(programName));\n            } catch (e) {\n                throw logAndThrow(`Error finding ${programName}. Network response: '${e}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`);\n            }\n        } else if (program instanceof Program) {\n            program = program.toString();\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the fee proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Resolve the program imports if they exist\n        const numberOfImports = Program.fromString(program).getImports().length;\n        if (numberOfImports > 0 && !imports) {\n            try {\n                imports = <ProgramImports>await this.networkClient.getProgramImports(programName);\n            } catch (e) {\n                throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n            }\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildExecutionTransaction(executionPrivateKey, program, functionName, inputs, fee, feeRecord, this.host, imports, provingKey, verifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<Transaction | Error>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const transaction = await programManager.execute({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   fee: 0.020,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async execute(options: ExecuteOptions): Promise<string | Error> {\n        const tx = <Transaction>await this.buildExecutionTransaction(options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Run an Aleo program in offline mode\n     *\n     * @param {string} program Program source code containing the function to be executed\n     * @param {string} function_name Function name to execute\n     * @param {string[]} inputs Inputs to the function\n     * @param {number} proveExecution Whether to prove the execution of the function and return an execution transcript\n     * that contains the proof.\n     * @param {string[] | undefined} imports Optional imports to the program\n     * @param {KeySearchParams | undefined} keySearchParams Optional parameters for finding the matching proving &\n     * verifying keys for the function\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * import { Account, Program } from '@provablehq/sdk';\n     *\n     * /// Create the source for the \"helloworld\" program\n     * const program = \"program helloworld.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager();\n     *\n     * /// Create a temporary account for the execution of the program\n     * const account = new Account();\n     * programManager.setAccount(account);\n     *\n     * /// Get the response and ensure that the program executed correctly\n     * const executionResponse = await programManager.run(program, \"hello\", [\"5u32\", \"5u32\"]);\n     * const result = executionResponse.getOutputs();\n     * assert(result === [\"10u32\"]);\n     */\n    async run(\n        program: string,\n        function_name: string,\n        inputs: string[],\n        proveExecution: boolean,\n        imports?: ProgramImports,\n        keySearchParams?: KeySearchParams,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<ExecutionResponse> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Run the program offline and return the result\n        console.log(\"Running program offline\")\n        console.log(\"Proving key: \", provingKey);\n        console.log(\"Verifying key: \", verifyingKey);\n        return WasmProgramManager.executeFunctionOffline(executionPrivateKey, program, function_name, inputs, proveExecution, false, imports, provingKey, verifyingKey, this.host, offlineQuery);\n    }\n\n    /**\n     * Join two credits records into a single credits record\n     *\n     * @param {RecordPlaintext | string} recordOne First credits record to join\n     * @param {RecordPlaintext | string} recordTwo Second credits record to join\n     * @param {number} fee Fee in credits pay for the join transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the fee record to use\n     * to pay the fee for the join transaction\n     * @param {RecordPlaintext | string | undefined} feeRecord Fee record to use for the join transaction\n     * @param {PrivateKey | undefined} privateKey Private key to use for the join transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     */\n    async join(\n        recordOne: RecordPlaintext | string,\n        recordTwo: RecordPlaintext | string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams | undefined,\n        feeRecord?: RecordPlaintext | string | undefined,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let joinKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            joinKeys = <FunctionKeyPair>await this.keyProvider.joinKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [joinProvingKey, joinVerifyingKey] = joinKeys;\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Validate the records provided are valid plaintext records\n        try {\n            recordOne = recordOne instanceof RecordPlaintext ? recordOne : RecordPlaintext.fromString(recordOne);\n            recordTwo = recordTwo instanceof RecordPlaintext ? recordTwo : RecordPlaintext.fromString(recordTwo);\n        } catch (e) {\n            throw logAndThrow('Records provided are not valid. Please ensure they are valid plaintext records.')\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildJoinTransaction(executionPrivateKey, recordOne, recordTwo, fee, feeRecord, this.host, joinProvingKey, joinVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Split credits into two new credits records\n     *\n     * @param {number} splitAmount Amount in microcredits to split from the original credits record\n     * @param {RecordPlaintext | string} amountRecord Amount record to use for the split transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the split transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * const record = \"{  owner: aleo184vuwr5u7u0ha5f5k44067dd2uaqewxx6pe5ltha5pv99wvhfqxqv339h4.private,  microcredits: 45000000u64.private,  _nonce: 4106205762862305308495708971985748592380064201230396559307556388725936304984group.public}\"\n     * const tx_id = await programManager.split(25000000, record);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async split(splitAmount: number, amountRecord: RecordPlaintext | string, privateKey?: PrivateKey, offlineQuery?: OfflineQuery): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the split keys from the key provider\n        let splitKeys;\n        try {\n            splitKeys = <FunctionKeyPair>await this.keyProvider.splitKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [splitProvingKey, splitVerifyingKey] = splitKeys;\n\n        // Validate the record to be split\n        try {\n            amountRecord = amountRecord instanceof RecordPlaintext ? amountRecord : RecordPlaintext.fromString(amountRecord);\n        } catch (e) {\n            throw logAndThrow(\"Record provided is not valid. Please ensure it is a valid plaintext record.\");\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildSplitTransaction(executionPrivateKey, splitAmount, amountRecord, this.host, splitProvingKey, splitVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Pre-synthesize proving and verifying keys for a program\n     *\n     * @param program {string} The program source code to synthesize keys for\n     * @param function_id {string} The function id to synthesize keys for\n     * @param inputs {Array<string>}  Sample inputs to the function\n     * @param privateKey {PrivateKey | undefined} Optional private key to use for the key synthesis\n     *\n     * @returns {Promise<FunctionKeyPair | Error>}\n     */\n    async synthesizeKeys(\n        program: string,\n        function_id: string,\n        inputs: Array<string>,\n        privateKey?: PrivateKey,\n    ): Promise<FunctionKeyPair | Error> {\n        // Resolve the program imports if they exist\n        let imports;\n\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\") {\n            if (typeof this.account !== \"undefined\") {\n                executionPrivateKey = this.account.privateKey();\n            } else {\n                executionPrivateKey = new PrivateKey();\n            }\n        }\n\n        // Attempt to run an offline execution of the program and extract the proving and verifying keys\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n            const keyPair = await WasmProgramManager.synthesizeKeyPair(\n                executionPrivateKey,\n                program,\n                function_id,\n                inputs,\n                imports\n            );\n            return [<ProvingKey>keyPair.provingKey(), <VerifyingKey>keyPair.verifyingKey()];\n        } catch (e) {\n            throw logAndThrow(`Could not synthesize keys - error ${e}. Please ensure the program is valid and the inputs are correct.`);\n        }\n    }\n\n    /**\n     * Build a transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async buildTransferTransaction(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction | Error> {\n        // Validate the transfer type\n        transferType = <string>validateTransferType(transferType);\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let transferKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            transferKeys = <FunctionKeyPair>await this.keyProvider.transferKeys(transferType);\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [transferProvingKey, transferVerifyingKey] = transferKeys;\n\n        // Get the amount and fee record from the account if it is not provided in the parameters\n        try {\n            // Track the nonces of the records found so no duplicate records are used\n            const nonces: string[] = [];\n            if (requiresAmountRecord(transferType)) {\n                // If the transfer type is private and requires an amount record, get it from the record provider\n                amountRecord = <RecordPlaintext>await this.getCreditsRecord(fee, [], amountRecord, recordSearchParams);\n                nonces.push(amountRecord.nonce());\n            } else {\n                amountRecord = undefined;\n            }\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, nonces, feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildTransferTransaction(executionPrivateKey, amount, recipient, transferType, amountRecord, fee, feeRecord, this.host, transferProvingKey, transferVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Build a transfer_public transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     */\n    async buildTransferPublicTransaction(\n        amount: number,\n        recipient: string,\n        fee: number,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction | Error> {\n        return this.buildTransferTransaction(amount, recipient, \"public\", fee, false, undefined, undefined, undefined, privateKey, offlineQuery);\n    }\n\n    /**\n     * Build a transfer_public_as_signer transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     */\n    async buildTransferPublicAsSignerTransaction(\n        amount: number,\n        recipient: string,\n        fee: number,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction | Error> {\n        return this.buildTransferTransaction(amount, recipient, \"public\", fee, false, undefined, undefined, undefined, privateKey, offlineQuery);\n    }\n\n    /**\n     * Transfer credits to another account\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async transfer(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<string | Error> {\n        const tx = <Transaction>await this.buildTransferTransaction(amount, recipient, transferType, fee, privateFee, recordSearchParams, amountRecord, feeRecord, privateKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build transaction to bond credits to a validator for later submission to the Aleo Network\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction object for later submission\n     * const tx = await programManager.buildBondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can be later submitted to the network using the network client.\n     * const result = await programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is bonding the credits\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async buildBondPublicTransaction(staker_address: string, validator_address: string, withdrawal_address: string, amount: number, options: Partial<ExecuteOptions> = {}) {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"bond_public\",\n            fee = options.fee || 0.86,\n            privateFee = false,\n            inputs = [staker_address, validator_address, withdrawal_address, `${scaledAmount.toString()}u64`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.bond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.bond_public.verifier,\n                cacheKey: \"credits.aleo/bond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Bond credits to validator.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is bonding the credits\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the signer (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 1,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {Options} options Options for the execution\n     */\n    async bondPublic(staker_address: string, validator_address: string, withdrawal_address:string, amount: number, options: Partial<ExecuteOptions> = {}) {\n        const tx = <Transaction>await this.buildBondPublicTransaction(staker_address, validator_address, withdrawal_address, amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a bond_validator transaction for later submission to the Aleo Network.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bond validator transaction object for later use.\n     * const tx = await programManager.buildBondValidatorTransaction(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can later be submitted to the network using the network client.\n     * const tx_id = await programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {number} commission The commission rate for the validator (must be between 0 and 100 - an error will be thrown if it is not)\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async buildBondValidatorTransaction(validator_address: string, withdrawal_address: string, amount: number, commission: number, options: Partial<ExecuteOptions> = {}) {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const adjustedCommission = Math.trunc(commission)\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"bond_validator\",\n            fee = options.fee || 0.86,\n            privateFee = false,\n            inputs = [validator_address, withdrawal_address, `${scaledAmount.toString()}u64`, `${adjustedCommission.toString()}u8`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.bond_validator.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.bond_validator.verifier,\n                cacheKey: \"credits.aleo/bond_validator\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Build transaction to bond a validator.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondValidator(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     *\n     * @returns string\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {number} commission The commission rate for the validator (must be between 0 and 100 - an error will be thrown if it is not)\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async bondValidator(validator_address: string, withdrawal_address: string, amount: number, commission: number, options: Partial<ExecuteOptions> = {}) {\n        const tx = <Transaction>await this.buildBondValidatorTransaction(validator_address, withdrawal_address, amount, commission, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to unbond public credits from a validator in the Aleo network.\n     *\n     * @param {string} staker_address - The address of the staker who is unbonding the credits.\n     * @param {number} amount - The amount of credits to unbond (scaled by 1,000,000).\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction | Error>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * // Create a keyProvider to handle key management.\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to unbond credits.\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * const tx = await programManager.buildUnbondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     */\n    async buildUnbondPublicTransaction(staker_address: string, amount: number, options: Partial<ExecuteOptions> = {}): Promise<Transaction | Error> {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"unbond_public\",\n            fee = options.fee || 1.3,\n            privateFee = false,\n            inputs = [staker_address, `${scaledAmount.toString()}u64`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.unbond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.unbond_public.verifier,\n                cacheKey: \"credits.aleo/unbond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Unbond a specified amount of staked credits.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction and send it to the network\n     * const tx_id = await programManager.unbondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", 10);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is unbonding the credits\n     * @param {number} amount Amount of credits to unbond. If the address of the executor of this function is an\n     * existing validator, it will subtract this amount of credits from the validator's staked credits. If there are\n     * less than 1,000,000 credits staked pool after the unbond, the validator will be removed from the validator set.\n     * If the address of the executor of this function is not a validator and has credits bonded as a delegator, it will\n     * subtract this amount of credits from the delegator's staked credits. If there are less than 10 credits bonded\n     * after the unbond operation, the delegator will be removed from the validator's staking pool.\n     * @param {ExecuteOptions} options Options for the execution\n     */\n    async unbondPublic(staker_address: string, amount: number, options: Partial<ExecuteOptions> = {}): Promise<string | Error> {\n        const tx = <Transaction>await this.buildUnbondPublicTransaction(staker_address, amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to claim unbonded public credits in the Aleo network.\n     *\n     * @param {string} staker_address - The address of the staker who is claiming the credits.\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction | Error>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to claim unbonded credits.\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     *\n     * // Create the claim unbonded transaction object for later use.\n     * const tx = await programManager.buildClaimUnbondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\");\n     * console.log(tx);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     */\n    async buildClaimUnbondPublicTransaction(staker_address: string, options: Partial<ExecuteOptions> = {}): Promise<Transaction | Error> {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"claim_unbond_public\",\n            fee = options.fee || 2,\n            privateFee = false,\n            inputs = [staker_address],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier,\n                cacheKey: \"credits.aleo/claim_unbond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Claim unbonded credits. If credits have been unbonded by the account executing this function, this method will\n     * claim them and add them to the public balance of the account.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.claimUnbondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\");\n     *\n     * @param {string} staker_address Address of the staker who is claiming the credits\n     * @param {ExecuteOptions} options\n     * @returns string\n     */\n    async claimUnbondPublic(staker_address: string, options: Partial<ExecuteOptions> = {}): Promise<string | Error> {\n        const tx = <Transaction>await this.buildClaimUnbondPublicTransaction(staker_address, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a set_validator_state transaction for later usage.\n     *\n     * This function allows a validator to set their state to be either opened or closed to new stakers.\n     * When the validator is open to new stakers, any staker (including the validator) can bond or unbond from the validator.\n     * When the validator is closed to new stakers, existing stakers can still bond or unbond from the validator, but new stakers cannot bond.\n     *\n     * This function serves two primary purposes:\n     * 1. Allow a validator to leave the committee, by closing themselves to stakers and then unbonding all of their stakers.\n     * 2. Allow a validator to maintain their % of stake, by closing themselves to allowing more stakers to bond to them.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"ValidatorPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx = await programManager.buildSetValidatorStateTransaction(true);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {boolean} validator_state\n     * @param {Partial<ExecuteOptions>} options - Override default execution options\n     */\n    async buildSetValidatorStateTransaction(validator_state: boolean, options: Partial<ExecuteOptions> = {}) {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"set_validator_state\",\n            fee = 1,\n            privateFee = false,\n            inputs = [validator_state.toString()],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.set_validator_state.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.set_validator_state.verifier,\n                cacheKey: \"credits.aleo/set_validator_state\"\n            }),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.execute(executeOptions);\n    }\n\n    /**\n     * Submit a set_validator_state transaction to the Aleo Network.\n     *\n     * This function allows a validator to set their state to be either opened or closed to new stakers.\n     * When the validator is open to new stakers, any staker (including the validator) can bond or unbond from the validator.\n     * When the validator is closed to new stakers, existing stakers can still bond or unbond from the validator, but new stakers cannot bond.\n     *\n     * This function serves two primary purposes:\n     * 1. Allow a validator to leave the committee, by closing themselves to stakers and then unbonding all of their stakers.\n     * 2. Allow a validator to maintain their % of stake, by closing themselves to allowing more stakers to bond to them.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"ValidatorPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.setValidatorState(true);\n     *\n     * @returns string\n     * @param {boolean} validator_state\n     * @param {Partial<ExecuteOptions>} options - Override default execution options\n     */\n    async setValidatorState(validator_state: boolean, options: Partial<ExecuteOptions> = {}) {\n        const tx = <string>await this.buildSetValidatorStateTransaction(validator_state, options);\n        return this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Verify a proof of execution from an offline execution\n     *\n     * @param {executionResponse} executionResponse\n     * @returns {boolean} True if the proof is valid, false otherwise\n     */\n    verifyExecution(executionResponse: ExecutionResponse): boolean {\n        try {\n            const execution = <Execution>executionResponse.getExecution();\n            const function_id = executionResponse.getFunctionId();\n            const program = executionResponse.getProgram();\n            const verifyingKey = executionResponse.getVerifyingKey();\n            return verifyFunctionExecution(execution, verifyingKey, program, function_id);\n        } catch(e) {\n            console.warn(\"The execution was not found in the response, cannot verify the execution\");\n            return false;\n        }\n    }\n\n    /**\n     * Create a program object from a program's source code\n     *\n     * @param {string} program Program source code\n     * @returns {Program | Error} The program object\n     */\n    createProgramFromSource(program: string): Program | Error {\n        return Program.fromString(program);\n    }\n\n    /**\n     * Get the credits program object\n     *\n     * @returns {Program} The credits program object\n     */\n    creditsProgram(): Program {\n        return Program.getCreditsProgram();\n    }\n\n    /**\n     * Verify a program is valid\n     *\n     * @param {string} program The program source code\n     */\n    verifyProgram(program: string): boolean {\n        try {\n            <Program>Program.fromString(program);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    // Internal utility function for getting a credits.aleo record\n    async getCreditsRecord(amount: number, nonces: string[], record?: RecordPlaintext | string, params?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        try {\n            return record instanceof RecordPlaintext ? record : RecordPlaintext.fromString(<string>record);\n        } catch (e) {\n            try {\n                const recordProvider = <RecordProvider>this.recordProvider;\n                return <RecordPlaintext>(await recordProvider.findCreditsRecord(amount, true, nonces, params))\n            } catch (e) {\n                throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n            }\n        }\n    }\n}\n\n// Ensure the transfer type requires an amount record\nfunction requiresAmountRecord(transferType: string): boolean {\n    return PRIVATE_TRANSFER_TYPES.has(transferType);\n}\n\n// Validate the transfer type\nfunction validateTransferType(transferType: string): string | Error {\n    return VALID_TRANSFER_TYPES.has(transferType) ? transferType :\n        logAndThrow(`Invalid transfer type '${transferType}'. Valid transfer types are 'private', 'privateToPublic', 'public', and 'publicToPrivate'.`);\n}\n\nexport { ProgramManager }\n","import {VerifyingKey, Metadata} from \"@provablehq/wasm\";\n\nconst KEY_STORE = Metadata.baseUrl();\n\ninterface Key {\n    name: string,\n    locator: string,\n    prover: string,\n    verifier: string,\n    verifyingKey: () => VerifyingKey,\n}\n\nfunction convert(metadata: Metadata): Key {\n    // This looks up the method name in VerifyingKey\n    const verifyingKey = (VerifyingKey as any)[metadata.verifyingKey];\n\n    if (!verifyingKey) {\n        throw new Error(\"Invalid method name: \" + metadata.verifyingKey);\n    }\n\n    return {\n        name: metadata.name,\n        locator: metadata.locator,\n        prover: metadata.prover,\n        verifier: metadata.verifier,\n        verifyingKey,\n    };\n}\n\nconst CREDITS_PROGRAM_KEYS = {\n    bond_public: convert(Metadata.bond_public()),\n    bond_validator: convert(Metadata.bond_validator()),\n    claim_unbond_public: convert(Metadata.claim_unbond_public()),\n    fee_private: convert(Metadata.fee_private()),\n    fee_public: convert(Metadata.fee_public()),\n    inclusion: convert(Metadata.inclusion()),\n    join: convert(Metadata.join()),\n    set_validator_state: convert(Metadata.set_validator_state()),\n    split: convert(Metadata.split()),\n    transfer_private: convert(Metadata.transfer_private()),\n    transfer_private_to_public: convert(Metadata.transfer_private_to_public()),\n    transfer_public: convert(Metadata.transfer_public()),\n    transfer_public_as_signer: convert(Metadata.transfer_public_as_signer()),\n    transfer_public_to_private: convert(Metadata.transfer_public_to_private()),\n    unbond_public: convert(Metadata.unbond_public()),\n    getKey: function(key: string): Key | Error {\n        if (this.hasOwnProperty(key)) {\n            return (this as any)[key] as Key;\n        } else {\n            return new Error(`Key \"${key}\" not found.`);\n        }\n    }\n};\n\nconst PRIVATE_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n]);\nconst VALID_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n    \"transfer_public\",\n    \"transfer_public_as_signer\",\n    \"public\",\n    \"public_as_signer\",\n    \"transferPublic\",\n    \"transferPublicAsSigner\",\n    \"transfer_public_to_private\",\n    \"publicToPrivate\",\n    \"publicAsSigner\",\n    \"transferPublicToPrivate\",\n]);\nconst PRIVATE_TRANSFER = new Set([\n    \"private\",\n    \"transfer_private\",\n    \"transferPrivate\",\n]);\nconst PRIVATE_TO_PUBLIC_TRANSFER = new Set([\n    \"private_to_public\",\n    \"privateToPublic\",\n    \"transfer_private_to_public\",\n    \"transferPrivateToPublic\",\n]);\nconst PUBLIC_TRANSFER = new Set([\n    \"public\",\n    \"transfer_public\",\n    \"transferPublic\",\n]);\nconst PUBLIC_TRANSFER_AS_SIGNER = new Set([\n    \"public_as_signer\",\n    \"transfer_public_as_signer\",\n    \"transferPublicAsSigner\",\n]);\nconst PUBLIC_TO_PRIVATE_TRANSFER = new Set([\n    \"public_to_private\",\n    \"publicToPrivate\",\n    \"transfer_public_to_private\",\n    \"transferPublicToPrivate\",\n]);\n\nfunction logAndThrow(message: string): Error {\n    console.error(message);\n    throw message;\n}\n\nimport { Account } from \"./account\";\nimport { AleoNetworkClient, ProgramImports } from \"./network-client\";\nimport { Block } from \"./models/block\";\nimport { Execution } from \"./models/execution\";\nimport { Input } from \"./models/input\";\nimport { Output } from \"./models/output\";\nimport { TransactionModel } from \"./models/transactionModel\";\nimport { Transition } from \"./models/transition\";\nimport {\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    CachedKeyPair,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    KeySearchParams,\n} from \"./function-key-provider\";\nimport {\n    OfflineKeyProvider,\n    OfflineSearchParams\n} from \"./offline-key-provider\";\nimport {\n    BlockHeightSearch,\n    NetworkRecordProvider,\n    RecordProvider,\n    RecordSearchParams,\n} from \"./record-provider\";\n\n// @TODO: This function is no longer needed, remove it.\nasync function initializeWasm() {\n    console.warn(\"initializeWasm is deprecated, you no longer need to use it\");\n}\n\nexport { createAleoWorker } from \"./managed-worker\";\n\nexport { ProgramManager } from \"./program-manager\";\n\nexport {\n    Address,\n    Execution as FunctionExecution,\n    ExecutionResponse,\n    Field,\n    OfflineQuery,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProgramManager as ProgramManagerBase,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    Signature,\n    Transaction,\n    VerifyingKey,\n    ViewKey,\n    initThreadPool,\n    verifyFunctionExecution,\n} from \"@provablehq/wasm\";\n\nexport { initializeWasm };\n\nexport {\n    Account,\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    AleoNetworkClient,\n    Block,\n    BlockHeightSearch,\n    CachedKeyPair,\n    Execution,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    Input,\n    Key,\n    KeySearchParams,\n    NetworkRecordProvider,\n    ProgramImports,\n    OfflineKeyProvider,\n    OfflineSearchParams,\n    Output,\n    RecordProvider,\n    RecordSearchParams,\n    TransactionModel,\n    Transition,\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PRIVATE_TRANSFER_TYPES,\n    PUBLIC_TRANSFER,\n    PUBLIC_TRANSFER_AS_SIGNER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n};\n","import * as aleo from \"@provablehq/sdk\";\n\nawait aleo.initThreadPool();\n\nconst defaultHost = \"https://api.explorer.aleo.org/v1\";\nconst keyProvider = new aleo.AleoKeyProvider();\nconst programManager = new aleo.ProgramManager(defaultHost, keyProvider, undefined);\nkeyProvider.useCache(true);\n\nself.postMessage({\n    type: \"ALEO_WORKER_READY\",\n});\n\nlet lastLocalProgram = null;\nself.addEventListener(\"message\", (ev) => {\n    if (ev.data.type === \"ALEO_EXECUTE_PROGRAM_LOCAL\") {\n        const { localProgram, aleoFunction, inputs, privateKey } = ev.data;\n\n        console.log(\"Web worker: Executing function locally...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                const privateKeyObject = aleo.PrivateKey.from_string(privateKey);\n                // Ensure the program is valid and that it contains the function specified\n                const program = programManager.createProgramFromSource(localProgram);\n                const program_id = program.id();\n                if (!program.hasFunction(aleoFunction)) {\n                    throw `Program ${program_id} does not contain function ${aleoFunction}`;\n                }\n                const cacheKey = `${program_id}:${aleoFunction}`;\n\n                // Get the program imports\n                const imports = programManager.networkClient.getProgramImports(localProgram);\n\n                // Get the proving and verifying keys for the function\n                if (lastLocalProgram !== localProgram) {\n                    const keys = await programManager.synthesizeKeys(localProgram, aleoFunction, inputs, privateKeyObject);\n                    programManager.keyProvider.cacheKeys(cacheKey, keys);\n                    lastLocalProgram = localProgram;\n                }\n\n                // Pass the cache key to the execute function\n                const keyParams = new aleo.AleoKeyProviderParams({\"cacheKey\": cacheKey});\n\n                // Execute the function locally\n                let response = await programManager.run(\n                    localProgram,\n                    aleoFunction,\n                    inputs,\n                    false,\n                    imports,\n                    keyParams,\n                    undefined,\n                    undefined,\n                    privateKeyObject,\n                    undefined\n                );\n\n                // Return the outputs to the main thread\n                console.log(`Web worker: Local execution completed in ${performance.now() - startTime} ms`);\n                const outputs = response.getOutputs();\n                let execution = response.getExecution();\n                if (execution) {\n                    aleo.verifyFunctionExecution(execution, keyProvider.getKeys(cacheKey)[1], program, \"hello\");\n                    execution = execution.toString();\n                    console.log(\"Execution verified successfully: \" + execution);\n                } else {\n                    execution = \"\";\n                }\n\n                console.log(`Function execution response: ${outputs}`);\n                self.postMessage({\n                    type: \"OFFLINE_EXECUTION_COMPLETED\",\n                    outputs: {outputs: outputs, execution: execution}\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_EXECUTE_PROGRAM_ON_CHAIN\") {\n        const {\n            remoteProgram,\n            aleoFunction,\n            inputs,\n            privateKey,\n            fee,\n            privateFee,\n            feeRecord,\n            url,\n        } = ev.data;\n\n        console.log(\"Web worker: Creating execution...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                const privateKeyObject = aleo.PrivateKey.from_string(privateKey)\n                // Ensure the program is valid and that it contains the function specified\n                const program = await programManager.networkClient.getProgramObject(remoteProgram);\n                const program_id = program.id();\n                if (!program.hasFunction(aleoFunction)) {\n                    throw `Program ${program_id} does not contain function ${aleoFunction}`;\n                }\n\n                // Get the proving and verifying keys for the function\n                const cacheKey = `${program_id}:${aleoFunction}`;\n                if (!programManager.keyProvider.containsKeys(cacheKey)) {\n                    console.log(`Web worker: Synthesizing proving & verifying keys for: '${program_id}:${aleoFunction}'`);\n                    const keys = await programManager.synthesizeKeys(remoteProgram, aleoFunction, inputs, privateKeyObject);\n                    programManager.keyProvider.cacheKeys(cacheKey, keys);\n                }\n\n                // Pass the cache key to the execute function\n                const keyParams = new aleo.AleoKeyProviderParams({\"cacheKey\": cacheKey})\n\n                // Set the host to the provided URL if provided\n                if (typeof url === \"string\") { programManager.setHost(url); }\n                const transaction = await programManager.execute({\n                    programName: program_id,\n                    functionName: aleoFunction,\n                    fee: fee,\n                    privateFee: privateFee,\n                    inputs: inputs,\n                    keySearchParams: keyParams,\n                    feeRecord: feeRecord,\n                    privateKey: privateKeyObject\n                });\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: On-chain execution transaction created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"EXECUTION_TRANSACTION_COMPLETED\",\n                    executeTransaction: transaction,\n                });\n            } catch (error) {\n                console.error(`Error creating execution transaction: ${error}`);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_ESTIMATE_EXECUTION_FEE\") {\n        const { remoteProgram, privateKey, aleoFunction, inputs, url } =\n            ev.data;\n\n        console.log(\"Web worker: Estimating execution fee...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                const privateKeyObject = aleo.PrivateKey.from_string(privateKey);\n                // Ensure the program is valid and that it contains the function specified\n                const program = await programManager.networkClient.getProgramObject(remoteProgram);\n                const program_id = program.id();\n                if (!program.getFunctions().includes(aleoFunction)) {\n                    throw `Program ${program_id} does not contain function ${aleoFunction}`;\n                }\n                const cacheKey = `${program_id}:${aleoFunction}`;\n                const imports = await programManager.networkClient.getProgramImports(remoteProgram);\n\n                // Get the proving and verifying keys for the function\n                if (!programManager.keyProvider.containsKeys(cacheKey)) {\n                    console.log(`Web worker: Synthesizing proving & verifying keys for: '${program_id}:${aleoFunction}'`);\n                    const keys = await programManager.synthesizeKeys(program.toString(), aleoFunction, inputs, privateKeyObject);\n                    programManager.keyProvider.cacheKeys(cacheKey, keys);\n                }\n\n                // Estimate the execution fee\n                const [provingKey, verifyingKey] = programManager.keyProvider.getKeys(cacheKey);\n                let executeFee = await aleo.ProgramManagerBase.estimateExecutionFee(\n                    privateKeyObject,\n                    remoteProgram,\n                    aleoFunction,\n                    inputs,\n                    url,\n                    imports,\n                    provingKey,\n                    verifyingKey,\n                    undefined\n                );\n\n                // Return the execution fee estimate to the main thread\n                console.log(`Web worker: Execution fee estimated in ${performance.now() - startTime} ms`);\n                console.log(`Execution Fee Estimation: ${executeFee} microcredits`);\n                self.postMessage({\n                    type: \"EXECUTION_FEE_ESTIMATION_COMPLETED\",\n                    executionFee: Number(executeFee) / 1000000 + 0.01,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_ESTIMATE_DEPLOYMENT_FEE\") {\n        const { program, url } = ev.data;\n\n        console.log(\"Web worker: Estimating deployment fee...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                const imports = await programManager.networkClient.getProgramImports(program);\n                console.log(\"Estimating deployment fee..\");\n                let deploymentFee =\n                    await aleo.ProgramManagerBase.estimateDeploymentFee(\n                        program,\n                        imports,\n                    );\n\n                // Return the deployment fee estimate to the main thread\n                console.log(`Web worker: Deployment fee estimation completed in ${performance.now() - startTime} ms`);\n                console.log(`Deployment Fee Estimation: ${deploymentFee} microcredits`);\n                self.postMessage({\n                    type: \"DEPLOYMENT_FEE_ESTIMATION_COMPLETED\",\n                    deploymentFee: Number(deploymentFee) / 1000000 + 0.01,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_TRANSFER\") {\n        const {\n            privateKey,\n            amountCredits,\n            recipient,\n            transfer_type,\n            amountRecord,\n            fee,\n            privateFee,\n            feeRecord,\n            url,\n        } = ev.data;\n\n        console.log(\n            `Web worker: Creating transfer of type ${transfer_type}...`,\n        );\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                // Set the host to the provided URL if provided\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Create the transfer transaction and submit it to the network\n                const transaction = await programManager.transfer(\n                    amountCredits,\n                    recipient,\n                    transfer_type,\n                    fee,\n                    privateFee,\n                    undefined,\n                    amountRecord,\n                    feeRecord,\n                    aleo.PrivateKey.from_string(privateKey),\n                    undefined\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Transfer transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"TRANSFER_TRANSACTION_COMPLETED\",\n                    transferTransaction: transaction,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_DEPLOY\") {\n        const { program, privateKey, fee, privateFee, feeRecord, url } = ev.data;\n\n        console.log(\"Web worker: Creating deployment...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                // Set the network client host if specified\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Check if the program is valid\n                const programObject = programManager.createProgramFromSource(program);\n\n                // Check if the program already exists on the network. If so, throw an error\n                let programExists = false;\n                try {\n                    await programManager.networkClient.getProgram(programObject.id());\n                    programExists = true;\n                } catch (e) {\n                    console.log(\n                        `Program not found on the Aleo Network - proceeding with deployment...`,\n                    );\n                }\n\n                if (programExists) {\n                    throw `Program ${programObject.id()} already exists on the network`;\n                }\n\n                console.log(\"fee is: \", fee);\n                // Create the deployment transaction and submit it to the network\n                let transaction = await programManager.deploy(\n                    program,\n                    fee,\n                    privateFee,\n                    undefined,\n                    feeRecord,\n                    aleo.PrivateKey.from_string(privateKey),\n                )\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Deployment transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"DEPLOY_TRANSACTION_COMPLETED\",\n                    deployTransaction: transaction,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_SPLIT\") {\n        const { splitAmount, record, privateKey, url } = ev.data;\n\n        console.log(\"Web worker: Creating split...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                // Set the network client host if specified\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Create the split transaction and submit to the network\n                const transaction = await programManager.split(\n                    splitAmount,\n                    record,\n                    aleo.PrivateKey.from_string(privateKey),\n                    undefined\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Split transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"SPLIT_TRANSACTION_COMPLETED\",\n                    splitTransaction: transaction,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_JOIN\") {\n        const { recordOne, recordTwo, fee, privateFee, feeRecord, privateKey, url } =\n            ev.data;\n\n        console.log(\"Web worker: Creating join...\");\n\n        let startTime = performance.now();\n        (async function () {\n\n            try {\n                // Set the network client host if specified\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Create the join transaction and submit it to the network\n                const transaction = await programManager.join(\n                    recordOne,\n                    recordTwo,\n                    fee,\n                    privateFee,\n                    undefined,\n                    feeRecord,\n                    aleo.PrivateKey.from_string(privateKey),\n                    undefined\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Join transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"JOIN_TRANSACTION_COMPLETED\",\n                    joinTransaction: transaction,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    }\n});\n"],"names":["async","get","url","options","response","fetch","ok","Error","status","post","method","AleoNetworkClient","host","headers","account","constructor","this","setAccount","getAccount","setHost","fetchData","json","error","findUnspentRecords","startHeight","endHeight","privateKey","amounts","maxMicrocredits","nonces","records","Array","start","end","resolvedPrivateKey","latestHeight","failures","totalRecordValue","BigInt","_privateKey","PrivateKey","from_string","viewKey","to_view_key","blockHeight","getLatestHeight","blocks","getBlockRange","i","length","transactions","j","confirmedTransaction","type","transaction","execution","transitions","k","transition","program","outputs","l","output","record","RecordCiphertext","fromString","value","isOwner","recordPlaintext","decrypt","nonce","includes","serialNumber","serialNumberString","getTransitionId","push","microcredits","amounts_found","console","warn","toString","getBlock","height","getDeploymentTransactionIDForProgram","Program","replace","getDeploymentTransactionForProgram","transaction_id","getTransaction","getLatestBlock","getLatestCommittee","getProgram","programId","getProgramObject","inputProgram","getProgramImports","imports","importList","getImports","import_id","hasOwnProperty","programSource","nestedImports","key","logAndThrow","getProgramImportNames","getProgramMappingNames","getProgramMappingValue","mappingName","getStateRoot","id","getTransactions","getTransactionsInMempool","inputOrOutputID","submitTransaction","transaction_string","Transaction","body","Object","assign","message","AleoKeyProviderParams","name","proverUri","verifierUri","cacheKey","params","AleoKeyProvider","cache","cacheOption","keyUris","fetchBytes","data","arrayBuffer","Uint8Array","KEY_STORE","Map","useCache","clearCache","clear","cacheKeys","keyId","keys","provingKey","verifyingKey","set","toBytes","containsKeys","has","deleteKeys","delete","getKeys","debug","provingKeyBytes","verifyingKeyBytes","ProvingKey","fromBytes","VerifyingKey","functionKeys","proverUrl","verifierUrl","CREDITS_PROGRAM_KEYS","getKey","fetchCreditsKeys","fetchRemoteKeys","getVerifyingKey","fetchProvingKey","locator","keyPair","verifying_key","proving_key","prover","bond_public","bondPublicKeys","bondValidatorKeys","bond_validator","claimUnbondPublicKeys","claim_unbond_public","transferKeys","visibility","PRIVATE_TRANSFER","transfer_private","PRIVATE_TO_PUBLIC_TRANSFER","transfer_private_to_public","PUBLIC_TRANSFER","transfer_public","PUBLIC_TRANSFER_AS_SIGNER","transfer_public_as_signer","PUBLIC_TO_PRIVATE_TRANSFER","transfer_public_to_private","joinKeys","join","splitKeys","split","feePrivateKeys","fee_private","feePublicKeys","fee_public","verifier","inclusion","set_validator_state","unbond_public","text","e","inner","unBondPublicKeys","ProgramManager","keyProvider","networkClient","recordProvider","setKeyProvider","setRecordProvider","deploy","fee","privateFee","recordSearchParams","feeRecord","programObject","log","feeKeys","deploymentPrivateKey","getCreditsRecord","undefined","feeProvingKey","feeVerifyingKey","tx","ProgramManager$1","buildDeploymentTransaction","buildExecutionTransaction","programName","functionName","inputs","keySearchParams","offlineQuery","executionPrivateKey","execute","run","function_name","proveExecution","executeFunctionOffline","recordOne","recordTwo","joinProvingKey","joinVerifyingKey","RecordPlaintext","buildJoinTransaction","splitAmount","amountRecord","splitProvingKey","splitVerifyingKey","buildSplitTransaction","synthesizeKeys","function_id","synthesizeKeyPair","buildTransferTransaction","amount","recipient","transferType","validateTransferType","transferProvingKey","transferVerifyingKey","requiresAmountRecord","buildTransferPublicTransaction","buildTransferPublicAsSignerTransaction","transfer","buildBondPublicTransaction","staker_address","validator_address","withdrawal_address","scaledAmount","Math","trunc","creditsProgram","additionalOptions","executeOptions","bondPublic","buildBondValidatorTransaction","commission","adjustedCommission","bondValidator","buildUnbondPublicTransaction","unbondPublic","buildClaimUnbondPublicTransaction","claimUnbondPublic","buildSetValidatorStateTransaction","validator_state","setValidatorState","verifyExecution","executionResponse","getExecution","getFunctionId","verifyFunctionExecution","createProgramFromSource","getCreditsProgram","verifyProgram","findCreditsRecord","PRIVATE_TRANSFER_TYPES","VALID_TRANSFER_TYPES","Metadata","baseUrl","convert","metadata","Set","_regeneratorRuntime","t","r","prototype","n","o","defineProperty","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","setPrototypeOf","__proto__","awrap","Promise","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","_asyncToGenerator","fn","self","args","arguments","apply","err","aleo","defaultHost","programManager","postMessage","lastLocalProgram","addEventListener","ev","_ev$data","localProgram","aleoFunction","startTime","performance","now","_callee","privateKeyObject","program_id","keyParams","_context","hasFunction","concat","getOutputs","t0","errorMessage","_ev$data2","remoteProgram","_callee2","_context2","executeTransaction","_ev$data3","_callee3","_programManager$keyPr","_programManager$keyPr2","executeFee","_context3","getFunctions","estimateExecutionFee","executionFee","Number","_ev$data4","_callee4","deploymentFee","_context4","estimateDeploymentFee","_ev$data5","amountCredits","transfer_type","_callee5","_context5","transferTransaction","_ev$data6","_callee6","programExists","_context6","deployTransaction","t1","_ev$data7","_callee7","_context7","splitTransaction","_ev$data8","_callee8","_context8","joinTransaction"],"sourceRoot":""}